{"ast":null,"code":"import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, Component, ViewEncapsulation, ElementRef, Renderer2, Input, ViewChild, HostBinding, HostListener, EventEmitter, ChangeDetectionStrategy, Output, Directive, NgZone, ChangeDetectorRef, NgModule, ViewContainerRef, ContentChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\nimport { __decorate } from 'tslib';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { select, event } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleQuantile, scaleOrdinal, scaleBand } from 'd3-scale';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { curveLinear, area, line, curveCardinalClosed, lineRadial, arc, pie } from 'd3-shape';\nimport { range, min, max } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { format } from 'd3-format';\nimport { rgb } from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/platform-browser';\nconst _c0 = [\"caretElm\"];\n\nfunction TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    model: a0\n  };\n};\n\nfunction TooltipContentComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, \"ng-template\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r1.context));\n  }\n}\n\nfunction TooltipContentComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r2.title, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelement(0, \"ngx-charts-scale-legend\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"horizontal\", ctx_r0.legendOptions && ctx_r0.legendOptions.position === \"below\")(\"valueRange\", ctx_r0.legendOptions.domain)(\"colors\", ctx_r0.legendOptions.colors)(\"height\", ctx_r0.view[1])(\"width\", ctx_r0.legendWidth);\n  }\n}\n\nfunction ChartComponent_ngx_charts_legend_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"ngx-charts-legend\", 5);\n    ɵngcc0.ɵɵlistener(\"labelClick\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.legendLabelClick.emit($event);\n    })(\"labelActivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.legendLabelActivate.emit($event);\n    })(\"labelDeactivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.legendLabelDeactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"horizontal\", ctx_r1.legendOptions && ctx_r1.legendOptions.position === \"below\")(\"data\", ctx_r1.legendOptions.domain)(\"title\", ctx_r1.legendOptions.title)(\"colors\", ctx_r1.legendOptions.colors)(\"height\", ctx_r1.view[1])(\"width\", ctx_r1.legendWidth)(\"activeEntries\", ctx_r1.activeEntries);\n  }\n}\n\nconst _c2 = [\"*\"];\nconst _c3 = [\"ngx-charts-axis-label\", \"\"];\nconst _c4 = [\"ticksel\"];\nconst _c5 = [\"ngx-charts-x-axis-ticks\", \"\"];\n\nfunction XAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 3)(1, \"title\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"text\", 4);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r1.tickTransform(tick_r3));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r3));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"font-size\", \"12px\");\n    ɵngcc0.ɵɵattribute(\"text-anchor\", ctx_r1.textAnchor)(\"transform\", ctx_r1.textTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r3)), \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"line\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r5.gridLineTransform());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"y1\", -ctx_r5.gridLineHeight);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, \"g\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.tickTransform(tick_r4));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.showGridLines);\n  }\n}\n\nconst _c6 = [\"ngx-charts-x-axis\", \"\"];\n\nfunction XAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.emitTicksHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"rotateTicks\", ctx_r0.rotateTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.xScale)(\"orient\", ctx_r0.xOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineHeight\", ctx_r0.dims.height)(\"width\", ctx_r0.dims.width)(\"tickValues\", ctx_r0.ticks);\n  }\n}\n\nfunction XAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", \"bottom\")(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c7 = [\"ngx-charts-y-axis-ticks\", \"\"];\n\nfunction YAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4)(1, \"title\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"text\", 5);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r1.transform(tick_r5));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r5));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"font-size\", \"12px\");\n    ɵngcc0.ɵɵattribute(\"dy\", ctx_r1.dy)(\"x\", ctx_r1.x1)(\"y\", ctx_r1.y1)(\"text-anchor\", ctx_r1.textAnchor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r5)), \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"d\", ctx_r2.referenceAreaPath)(\"transform\", ctx_r2.gridLineTransform());\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattribute(\"x2\", ctx_r8.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattribute(\"x2\", -ctx_r9.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, \"line\", 8);\n    ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, \"line\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r7.gridLineTransform());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r7.orient === \"left\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r7.orient === \"right\");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, \"g\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r6 = ctx.$implicit;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r3.transform(tick_r6));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.showGridLines);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"title\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"text\", 11);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const refLine_r10 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r12 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r12.tickTrim(ctx_r12.tickFormat(refLine_r10.value)));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"dy\", ctx_r12.dy)(\"y\", -6)(\"x\", ctx_r12.gridLineWidth)(\"text-anchor\", ctx_r12.textAnchor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", refLine_r10.name, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"line\", 10);\n    ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, \"g\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const refLine_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r11.transform(refLine_r10.value));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"x2\", ctx_r11.gridLineWidth)(\"transform\", ctx_r11.gridLineTransform());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r11.showRefLabels);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, \"g\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.showRefLines);\n  }\n}\n\nconst _c8 = [\"ngx-charts-y-axis\", \"\"];\n\nfunction YAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.emitTicksWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickValues\", ctx_r0.ticks)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.yScale)(\"orient\", ctx_r0.yOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineWidth\", ctx_r0.dims.width)(\"referenceLines\", ctx_r0.referenceLines)(\"showRefLines\", ctx_r0.showRefLines)(\"showRefLabels\", ctx_r0.showRefLabels)(\"height\", ctx_r0.dims.height);\n  }\n}\n\nfunction YAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.yOrient)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c9 = [\"ngx-charts-circle-series\", \"\"];\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"x\", ctx_r1.circle.cx - ctx_r1.circle.radius)(\"y\", ctx_r1.circle.cy)(\"width\", ctx_r1.circle.radius * 2)(\"height\", ctx_r1.circle.height)(\"fill\", ctx_r1.gradientFill);\n  }\n}\n\nconst _c10 = function (a0) {\n  return {\n    name: a0\n  };\n};\n\nfunction CircleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n    ɵngcc0.ɵɵelement(2, \"g\", 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, \"rect\", 2);\n    ɵngcc0.ɵɵelementStart(4, \"g\", 3);\n    ɵngcc0.ɵɵlistener(\"select\", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick(ctx_r2.circle.data);\n    })(\"activate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activateCircle();\n    })(\"deactivate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivateCircle();\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.circle.gradientStops);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"active\", ctx_r0.isActive(ɵngcc0.ɵɵpureFunction1(18, _c10, ctx_r0.circle.seriesName)));\n    ɵngcc0.ɵɵproperty(\"cx\", ctx_r0.circle.cx)(\"cy\", ctx_r0.circle.cy)(\"r\", ctx_r0.circle.radius)(\"fill\", ctx_r0.circle.color)(\"pointerEvents\", ctx_r0.circle.value === 0 ? \"none\" : \"all\")(\"data\", ctx_r0.circle.value)(\"classNames\", ctx_r0.circle.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ctx_r0.circle.data);\n  }\n}\n\nconst _c11 = [\"ngx-charts-circle\", \"\"];\nconst _c12 = [\"ngx-charts-grid-panel\", \"\"];\nconst _c13 = [\"ngx-charts-grid-panel-series\", \"\"];\n\nfunction GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 1);\n  }\n\n  if (rf & 2) {\n    const gridPanel_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"grid-panel\", true)(\"odd\", gridPanel_r1.class === \"odd\")(\"even\", gridPanel_r1.class === \"even\");\n    ɵngcc0.ɵɵproperty(\"height\", gridPanel_r1.height)(\"width\", gridPanel_r1.width)(\"x\", gridPanel_r1.x)(\"y\", gridPanel_r1.y);\n  }\n}\n\nconst _c14 = [\"ngx-charts-svg-linear-gradient\", \"\"];\n\nfunction SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    ɵngcc0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c15 = [\"ngx-charts-svg-radial-gradient\", \"\"];\n\nfunction SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    ɵngcc0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c16 = [\"ngx-charts-area\", \"\"];\n\nfunction AreaComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c17 = [\"ngx-charts-count-up\", \"\"];\nconst _c18 = [\"tooltipAnchor\"];\nconst _c19 = [\"ngx-charts-tooltip-area\", \"\"];\n\nfunction TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵelement(1, \"span\", 7);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tooltipItem_r5 = ctx.$implicit;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"background-color\", tooltipItem_r5.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r4.getToolTipText(tooltipItem_r5), \" \");\n  }\n}\n\nfunction TooltipArea__svg_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const model_r3 = ctx.model;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", model_r3);\n  }\n}\n\nconst _c20 = [\"ngx-charts-timeline\", \"\"];\n\nfunction LegendComponent_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"header\", 4)(1, \"span\", 5);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);\n  }\n}\n\nfunction LegendComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 6)(1, \"ngx-charts-legend-entry\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.labelClick.emit($event);\n    })(\"activate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate($event);\n    })(\"deactivate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const entry_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"label\", entry_r2.label)(\"formattedLabel\", entry_r2.formattedLabel)(\"color\", entry_r2.color)(\"isActive\", ctx_r1.isActive(entry_r2));\n  }\n}\n\nfunction AdvancedLegendComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"countTo\", ctx_r0.roundedTotal)(\"valueFormatting\", ctx_r0.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 16);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"countTo\", legendItem_r3._value)(\"valueFormatting\", ctx_r4.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 17);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 18);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"countTo\", legendItem_r3.percentage)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", legendItem_r3.percentage.toLocaleString(), \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵlistener(\"mouseenter\", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.activate.emit(legendItem_r3.data);\n    })(\"mouseleave\", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.deactivate.emit(legendItem_r3.data);\n    })(\"click\", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.select.emit(legendItem_r3.data);\n    });\n    ɵngcc0.ɵɵelement(1, \"div\", 10);\n    ɵngcc0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, \"div\", 11);\n    ɵngcc0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(4, \"div\", 13);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, \"div\", 14);\n    ɵngcc0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"border-left-color\", legendItem_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(legendItem_r3.displayLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n  }\n}\n\nconst _c21 = [\"tooltipTemplate\"];\nconst _c22 = [\"seriesTooltipTemplate\"];\n\nfunction AreaChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"baseValue\", ctx_r2.baseValue)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"baseValue\", ctx_r19.baseValue)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nconst _c23 = function (a0, a1) {\n  return [a0, a1];\n};\n\nfunction AreaChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 14);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"activeEntries\", ctx_r2.activeEntries)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"showPercentage\", true)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 14);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 8, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c24 = \".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\";\n\nfunction AreaChartStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"activeEntries\", ctx_r2.activeEntries)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 12);\n    ɵngcc0.ɵɵlistener(\"select\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 8, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c25 = [\"ngx-charts-area-series\", \"\"];\nconst _c26 = [\"ngx-charts-bar\", \"\"];\n\nfunction BarComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"orientation\", ctx_r0.orientation)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.valueScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.groupScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.valueScale)(\"activeEntries\", ctx_r2.activeEntries)(\"yScale\", ctx_r2.innerScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"roundEdges\", ctx_r2.roundEdges)(\"animations\", ctx_r2.animations)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event, group_r7);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"activeEntries\", ctx_r2.activeEntries)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.groupScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.valueScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_5_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarVertical2DComponent__svg_g_5_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_5_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_5_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"activeEntries\", ctx_r2.activeEntries)(\"xScale\", ctx_r2.innerScale)(\"yScale\", ctx_r2.valueScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"seriesName\", group_r7.name)(\"roundEdges\", ctx_r2.roundEdges)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onClick($event, group_r7);\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event, group_r7);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nconst _c27 = [\"ngx-charts-series-vertical\", \"\"];\n\nfunction SeriesVerticalComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.onClick($event);\n    })(\"activate\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate.emit($event);\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx_r0.animations)(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", \"vertical\")(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"ariaLabel\", bar_r2.ariaLabel)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r10.dataLabelHeightChanged.emit({\n        size: $event,\n        index: i_r9\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", \"vertical\");\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nconst _c28 = [\"ngx-charts-series-horizontal\", \"\"];\n\nfunction SeriesHorizontal__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.click($event);\n    })(\"activate\", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate.emit($event);\n    })(\"deactivate\", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", \"horizontal\")(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"ariaLabel\", bar_r2.ariaLabel)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r10.dataLabelWidthChanged.emit({\n        size: $event,\n        index: i_r9\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", \"horizontal\");\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nconst _c29 = [\"ngx-charts-bar-label\", \"\"];\n\nfunction BubbleChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"showGridLines\", ctx_r0.showGridLines)(\"dims\", ctx_r0.dims)(\"xScale\", ctx_r0.xScale)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"showGridLines\", ctx_r1.showGridLines)(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const series_r7 = restoredCtx.$implicit;\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onClick($event, series_r7);\n    })(\"activate\", function BubbleChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onActivate($event);\n    })(\"deactivate\", function BubbleChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r7 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"rScale\", ctx_r2.rScale)(\"xScaleType\", ctx_r2.xScaleType)(\"yScaleType\", ctx_r2.yScaleType)(\"xAxisLabel\", ctx_r2.xAxisLabel)(\"yAxisLabel\", ctx_r2.yAxisLabel)(\"colors\", ctx_r2.colors)(\"data\", series_r7)(\"activeEntries\", ctx_r2.activeEntries)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate);\n  }\n}\n\nconst _c30 = [\"ngx-charts-bubble-series\", \"\"];\n\nfunction BubbleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\")(2, \"g\", 1);\n    ɵngcc0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_select_2_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const circle_r1 = restoredCtx.$implicit;\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick(circle_r1.data);\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const circle_r1 = restoredCtx.$implicit;\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activateCircle(circle_r1);\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const circle_r1 = restoredCtx.$implicit;\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivateCircle(circle_r1);\n    });\n    ɵngcc0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"transform\", circle_r1.transform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    ɵngcc0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nconst _c31 = [\"ngx-charts-heat-map-cell\", \"\"];\n\nfunction HeatMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c32 = [\"ngx-charts-heat-map-cell-series\", \"\"];\n\nconst _c33 = function (a0, a1, a2) {\n  return {\n    series: a0,\n    name: a1,\n    value: a2\n  };\n};\n\nfunction HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 1);\n    ɵngcc0.ɵɵlistener(\"select\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick(c_r1.cell);\n    })(\"activate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activate.emit(c_r1.cell);\n    })(\"deactivate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit(c_r1.cell);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"data\", c_r1.data)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ɵngcc0.ɵɵpureFunction3(14, _c33, c_r1.series, c_r1.label, c_r1.data));\n  }\n}\n\nfunction HeatMapComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"rect\");\n  }\n\n  if (rf & 2) {\n    const rect_r7 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"x\", rect_r7.x)(\"y\", rect_r7.y)(\"rx\", rect_r7.rx)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\n\nconst _c34 = [\"ngx-charts-line\", \"\"];\n\nfunction LineChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"referenceLines\", ctx_r1.referenceLines)(\"showRefLines\", ctx_r1.showRefLines)(\"showRefLabels\", ctx_r1.showRefLabels);\n  }\n}\n\nfunction LineChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"curve\", ctx_r2.curve)(\"rangeFillOpacity\", ctx_r2.rangeFillOpacity)(\"hasRange\", ctx_r2.hasRange)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event);\n    })(\"activate\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"activeEntries\", ctx_r10.activeEntries)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction LineChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function LineChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function LineChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, LineChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction LineChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"curve\", ctx_r19.curve)(\"hasRange\", ctx_r19.hasRange)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 14);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function LineChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, LineChartComponent__svg_g_10__svg_g_1_Template, 2, 8, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"scaleType\", ctx_r4.scaleType)(\"legend\", ctx_r4.legend);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c35 = [\"ngx-charts-line-series\", \"\"];\n\nfunction LineSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction LineSeriesComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"active\", ctx_r1.isActive(ctx_r1.data))(\"inactive\", ctx_r1.isInactive(ctx_r1.data));\n    ɵngcc0.ɵɵproperty(\"data\", ctx_r1.data)(\"path\", ctx_r1.outerPath)(\"fill\", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))(\"opacity\", ctx_r1.rangeFillOpacity)(\"animations\", ctx_r1.animations);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 8);\n  }\n\n  if (rf & 2) {\n    const r_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"r\", r_r6);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, \"circle\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.radiusTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 10);\n  }\n\n  if (rf & 2) {\n    const tick_r8 = ctx.$implicit;\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"data\", tick_r8)(\"radius\", ctx_r7.outerRadius)(\"label\", tick_r8.label)(\"max\", ctx_r7.outerRadius)(\"value\", ctx_r7.showGridLines ? 1 : ctx_r7.outerRadius)(\"explodeSlices\", true)(\"animations\", ctx_r7.animations)(\"labelTrim\", ctx_r7.labelTrim)(\"labelTrimSize\", ctx_r7.labelTrimSize);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.thetaTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r2.yAxisScale)(\"dims\", ctx_r2.yAxisDims)(\"showGridLines\", ctx_r2.showGridLines)(\"showLabel\", ctx_r2.showYAxisLabel)(\"labelText\", ctx_r2.yAxisLabel)(\"trimTicks\", ctx_r2.trimYAxisTicks)(\"maxTickLength\", ctx_r2.maxYAxisTickLength)(\"tickFormatting\", ctx_r2.yAxisTickFormatting);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.transformYAxis);\n  }\n}\n\nfunction PolarChartComponent__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 12);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"label\", ctx_r3.xAxisLabel)(\"offset\", ctx_r3.labelOffset)(\"orient\", \"bottom\")(\"height\", ctx_r3.dims.height)(\"width\", ctx_r3.dims.width);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onClick($event);\n    })(\"activate\", function PolarChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function PolarChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"gradient\", ctx_r4.gradient)(\"xScale\", ctx_r4.xScale)(\"yScale\", ctx_r4.yScale)(\"colors\", ctx_r4.colors)(\"data\", series_r11)(\"activeEntries\", ctx_r4.activeEntries)(\"scaleType\", ctx_r4.scaleType)(\"curve\", ctx_r4.curve)(\"rangeFillOpacity\", ctx_r4.rangeFillOpacity)(\"animations\", ctx_r4.animations)(\"tooltipDisabled\", ctx_r4.tooltipDisabled)(\"tooltipTemplate\", ctx_r4.tooltipTemplate);\n  }\n}\n\nconst _c36 = [\"ngx-charts-polar-series\", \"\"];\n\nfunction PolarSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r0.seriesColor)(\"name\", ctx_r0.gradientId)(\"startOpacity\", 0.25)(\"endOpacity\", 1)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction PolarSeriesComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"select\", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.select.emit(circle_r2.data);\n    })(\"activate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate.emit({\n        name: circle_r2.data.series\n      });\n    })(\"deactivate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit({\n        name: circle_r2.data.series\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"opacity\", ctx_r1.inactive ? 0.2 : 1);\n    ɵngcc0.ɵɵproperty(\"cx\", circle_r2.cx)(\"cy\", circle_r2.cy)(\"r\", ctx_r1.circleRadius)(\"fill\", circle_r2.color)(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", circle_r2.data);\n  }\n}\n\nconst _c37 = [\"ngx-charts-pie-label\", \"\"];\nconst _c38 = [\"ngx-charts-pie-arc\", \"\"];\n\nfunction PieArcComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r0.fill)(\"name\", ctx_r0.radialGradientId)(\"startOpacity\", ctx_r0.startOpacity);\n  }\n}\n\nconst _c39 = \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:fadeIn .75s ease-in;animation:fadeIn .75s ease-in}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:drawOut 3s linear;animation:drawOut 3s linear;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\";\n\nfunction PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"text\", 10);\n  }\n\n  if (rf & 2) {\n    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"countTo\", series_r1.percent)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"text\", 11);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", series_r1.percent.toLocaleString(), \" \");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"text\", 12);\n  }\n\n  if (rf & 2) {\n    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"countTo\", series_r1.total)(\"countPrefix\", ctx_r4.label + \": \");\n    ɵngcc0.ɵɵattribute(\"y\", series_r1.outerRadius);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"text\", 13);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"y\", series_r1.outerRadius);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ctx_r5.label, \": \", series_r1.total.toLocaleString(), \" \");\n  }\n}\n\nconst _c40 = function (a0) {\n  return {\n    data: a0\n  };\n};\n\nfunction PieGridComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 3)(1, \"g\", 4);\n    ɵngcc0.ɵɵlistener(\"select\", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onClick($event);\n    })(\"activate\", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onActivate($event);\n    })(\"deactivate\", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, \"text\", 5);\n    ɵngcc0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, \"text\", 6);\n    ɵngcc0.ɵɵelementStart(4, \"text\", 7);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, \"text\", 8);\n    ɵngcc0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, \"text\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", series_r1.transform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"colors\", series_r1.colors)(\"data\", series_r1.data)(\"innerRadius\", series_r1.innerRadius)(\"outerRadius\", series_r1.outerRadius)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(ɵngcc0.ɵɵpureFunction1(17, _c40, series_r1)))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", series_r1.data[0].data);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", series_r1.label, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n  }\n}\n\nconst _c41 = [\"ngx-charts-pie-grid-series\", \"\"];\n\nfunction PieGridSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    })(\"activate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activate.emit($event);\n    })(\"deactivate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"data\", arc_r1.data)(\"gradient\", false)(\"pointerEvents\", arc_r1.pointerEvents)(\"animate\", arc_r1.animate);\n    ɵngcc0.ɵɵattribute(\"class\", arc_r1.class);\n  }\n}\n\nconst _c42 = [\"ngx-charts-pie-series\", \"\"];\n\nfunction PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"data\", arc_r1)(\"radius\", ctx_r2.outerRadius)(\"color\", ctx_r2.color(arc_r1))(\"label\", ctx_r2.labelText(arc_r1))(\"labelTrim\", ctx_r2.trimLabels)(\"labelTrimSize\", ctx_r2.maxLabelLength)(\"max\", ctx_r2.max)(\"value\", arc_r1.value)(\"explodeSlices\", ctx_r2.explodeSlices)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction PieSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, \"g\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.activate.emit($event);\n    })(\"deactivate\", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.deactivate.emit($event);\n    })(\"dblclick\", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.dblclick.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.labelVisible(arc_r1));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"gradient\", ctx_r0.gradient)(\"data\", arc_r1.data)(\"max\", ctx_r0.max)(\"explodeSlices\", ctx_r0.explodeSlices)(\"isActive\", ctx_r0.isActive(arc_r1.data))(\"animate\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.getTooltipTitle(arc_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", arc_r1.data);\n  }\n}\n\nconst _c43 = [\"textEl\"];\nconst _c44 = [\"ngx-charts-card\", \"\"];\n\nfunction CardComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"fill\", ctx_r0.bandColor)(\"transform\", ctx_r0.transformBand)(\"d\", ctx_r0.bandPath);\n  }\n}\n\nconst _c45 = [\"ngx-charts-card-series\", \"\"];\n\nfunction CardSeriesComponent__svg_rect_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"rect\", 2);\n  }\n\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"fill\", ctx_r0.emptyColor);\n    ɵngcc0.ɵɵattribute(\"x\", c_r2.x)(\"y\", c_r2.y)(\"width\", c_r2.width)(\"height\", c_r2.height);\n  }\n}\n\nfunction CardSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 3);\n    ɵngcc0.ɵɵlistener(\"select\", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r3 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"x\", c_r3.x)(\"y\", c_r3.y)(\"width\", c_r3.width)(\"height\", c_r3.height)(\"color\", c_r3.color)(\"bandColor\", c_r3.bandColor)(\"textColor\", c_r3.textColor)(\"data\", c_r3.data)(\"label\", c_r3.label)(\"medianSize\", ctx_r1.medianSize)(\"valueFormatting\", ctx_r1.valueFormatting)(\"labelFormatting\", ctx_r1.labelFormatting)(\"animations\", ctx_r1.animations);\n  }\n}\n\nconst _c46 = [\"ngx-charts-tree-map-cell\", \"\"];\n\nfunction TreeMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"countTo\", ctx_r2.value)(\"valueFormatting\", ctx_r2.valueFormatting);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.formattedValue, \" \");\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"foreignObject\", 4);\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(1, \"p\");\n    ɵngcc0.ɵɵelement(2, \"span\", 5)(3, \"br\");\n    ɵngcc0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, \"span\", 6);\n    ɵngcc0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    ɵngcc0.ɵɵattribute(\"x\", ctx_r1.x)(\"y\", ctx_r1.y)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r1.getTextColor())(\"height\", ctx_r1.height + \"px\")(\"width\", ctx_r1.width + \"px\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r1.formattedLabel, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.animations);\n  }\n}\n\nconst _c47 = [\"ngx-charts-tree-map-cell-series\", \"\"];\n\nfunction TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 1);\n    ɵngcc0.ɵɵlistener(\"select\", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"data\", c_r1.data)(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"label\", c_r1.label)(\"value\", c_r1.value)(\"valueType\", c_r1.valueType)(\"valueFormatting\", ctx_r0.valueFormatting)(\"labelFormatting\", ctx_r0.labelFormatting)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", c_r1.data);\n  }\n}\n\nconst _c48 = [\"valueTextEl\"];\nconst _c49 = [\"unitsTextEl\"];\n\nfunction LinearGaugeComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r0.transformLine)(\"stroke\", ctx_r0.colors.getColor(ctx_r0.units));\n  }\n}\n\nfunction LinearGaugeComponent__svg_line_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r1.transformLine)(\"stroke\", ctx_r1.colors.getColor(ctx_r1.units));\n  }\n}\n\nconst _c50 = function () {\n  return {};\n};\n\nfunction GaugeComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"select\", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.onActivate($event);\n    })(\"deactivate\", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const arc_r3 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r0.rotation);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"backgroundArc\", arc_r3.backgroundArc)(\"valueArc\", arc_r3.valueArc)(\"cornerRadius\", ctx_r0.cornerRadius)(\"colors\", ctx_r0.colors)(\"isActive\", ctx_r0.isActive(arc_r3.valueArc.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"valueFormatting\", ctx_r0.valueFormatting)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction GaugeComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"bigSegments\", ctx_r1.bigSegments)(\"smallSegments\", ctx_r1.smallSegments)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"radius\", ctx_r1.outerRadius)(\"angleSpan\", ctx_r1.angleSpan)(\"valueScale\", ctx_r1.valueScale)(\"startAngle\", ctx_r1.startAngle)(\"tickFormatting\", ctx_r1.axisTickFormatting);\n  }\n}\n\nfunction GaugeComponent__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"text\", 7, 8)(2, \"tspan\", 9);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"tspan\", 10);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.textTransform);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.displayValue);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.units);\n  }\n}\n\nconst _c51 = [\"ngx-charts-gauge-arc\", \"\"];\nconst _c52 = [\"ngx-charts-gauge-axis\", \"\"];\n\nfunction GaugeAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵelement(1, \"path\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"d\", tick_r3.line);\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2)(1, \"text\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"text-anchor\", tick_r4.textAnchor);\n    ɵngcc0.ɵɵattribute(\"transform\", tick_r4.textTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", tick_r4.text, \" \");\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4);\n    ɵngcc0.ɵɵelement(1, \"path\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"d\", tick_r5.line);\n  }\n}\n\nfunction isViewContainerRef(x) {\n  return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n\n\nlet InjectionService = /*#__PURE__*/(() => {\n  class InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n      this.applicationRef = applicationRef;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n\n\n    static setGlobalRootViewContainer(container) {\n      InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n\n\n    getRootViewContainer() {\n      if (this._container) return this._container;\n      if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n      if (this.applicationRef.components.length) return this.applicationRef.components[0];\n      throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n\n\n    setRootViewContainer(container) {\n      this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n\n\n    getComponentRootNode(component) {\n      if (isViewContainerRef(component)) {\n        return component.element.nativeElement;\n      }\n\n      if (component.hostView && component.hostView.rootNodes.length > 0) {\n        return component.hostView.rootNodes[0];\n      } // the top most component root node has no `hostView`\n\n\n      return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n\n\n    getRootViewContainerNode(component) {\n      return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n\n\n    projectComponentBindings(component, bindings) {\n      if (bindings) {\n        if (bindings.inputs !== undefined) {\n          const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n\n          for (const bindingName of bindingKeys) {\n            component.instance[bindingName] = bindings.inputs[bindingName];\n          }\n        }\n\n        if (bindings.outputs !== undefined) {\n          const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n\n          for (const eventName of eventKeys) {\n            component.instance[eventName] = bindings.outputs[eventName];\n          }\n        }\n      }\n\n      return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n\n\n    appendComponent(componentClass, bindings = {}, location) {\n      if (!location) location = this.getRootViewContainer();\n      const appendLocation = this.getComponentRootNode(location);\n      const portalHost = new DomPortalHost(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n      const portal = new ComponentPortal(componentClass);\n      const componentRef = portalHost.attach(portal);\n      this.projectComponentBindings(componentRef, bindings);\n      return componentRef;\n    }\n\n  }\n\n  InjectionService.ɵfac = function InjectionService_Factory(t) {\n    return new (t || InjectionService)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  InjectionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: InjectionService,\n    factory: InjectionService.ɵfac\n  });\n  InjectionService.globalRootViewContainer = null;\n  return InjectionService;\n})();\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n\nvar PlacementTypes = /*#__PURE__*/(() => {\n  (function (PlacementTypes) {\n    PlacementTypes[PlacementTypes[\"top\"] = 'top'] = \"top\";\n    PlacementTypes[PlacementTypes[\"bottom\"] = 'bottom'] = \"bottom\";\n    PlacementTypes[PlacementTypes[\"left\"] = 'left'] = \"left\";\n    PlacementTypes[PlacementTypes[\"right\"] = 'right'] = \"right\";\n  })(PlacementTypes || (PlacementTypes = {}));\n\n  return PlacementTypes;\n})();\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\n\n\nclass PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === 'top') {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === 'bottom') {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === 'left') {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === 'right') {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n    let flip = false;\n\n    if (placement === 'right') {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'left') {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'top') {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'bottom') {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static determinePlacement(placement, elmDim, hostDim, spacing) {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.right) {\n        return PlacementTypes.left;\n      } else if (placement === PlacementTypes.left) {\n        return PlacementTypes.right;\n      } else if (placement === PlacementTypes.top) {\n        return PlacementTypes.bottom;\n      } else if (placement === PlacementTypes.bottom) {\n        return PlacementTypes.top;\n      }\n    }\n\n    return placement;\n  }\n\n}\n\nlet TooltipContentComponent = /*#__PURE__*/(() => {\n  class TooltipContentComponent {\n    constructor(element, renderer) {\n      this.element = element;\n      this.renderer = renderer;\n    }\n\n    get cssClasses() {\n      let clz = 'ngx-charts-tooltip-content';\n      clz += ` position-${this.placement}`;\n      clz += ` type-${this.type}`;\n      clz += ` ${this.cssClass}`;\n      return clz;\n    }\n\n    ngAfterViewInit() {\n      setTimeout(this.position.bind(this));\n    }\n\n    position() {\n      const nativeElm = this.element.nativeElement;\n      const hostDim = this.host.nativeElement.getBoundingClientRect(); // if no dims were found, never show\n\n      if (!hostDim.height && !hostDim.width) return;\n      const elmDim = nativeElm.getBoundingClientRect();\n      this.checkFlip(hostDim, elmDim);\n      this.positionContent(nativeElm, hostDim, elmDim);\n\n      if (this.showCaret) {\n        this.positionCaret(hostDim, elmDim);\n      } // animate its entry\n\n\n      setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n\n    positionContent(nativeElm, hostDim, elmDim) {\n      const {\n        top,\n        left\n      } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n      this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n      this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n\n    positionCaret(hostDim, elmDim) {\n      const caretElm = this.caretElm.nativeElement;\n      const caretDimensions = caretElm.getBoundingClientRect();\n      const {\n        top,\n        left\n      } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n      this.renderer.setStyle(caretElm, 'top', `${top}px`);\n      this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n\n    checkFlip(hostDim, elmDim) {\n      this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n\n    onWindowResize() {\n      this.position();\n    }\n\n  }\n\n  TooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) {\n    return new (t || TooltipContentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  TooltipContentComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TooltipContentComponent,\n    selectors: [[\"ngx-tooltip-content\"]],\n    viewQuery: function TooltipContentComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resize\", function TooltipContentComponent_resize_HostBindingHandler() {\n          return ctx.onWindowResize();\n        }, false, ɵngcc0.ɵɵresolveWindow);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.cssClasses);\n      }\n    },\n    inputs: {\n      placement: \"placement\",\n      host: \"host\",\n      showCaret: \"showCaret\",\n      type: \"type\",\n      alignment: \"alignment\",\n      spacing: \"spacing\",\n      cssClass: \"cssClass\",\n      title: \"title\",\n      template: \"template\",\n      context: \"context\"\n    },\n    decls: 6,\n    vars: 6,\n    consts: [[3, \"hidden\"], [\"caretElm\", \"\"], [1, \"tooltip-content\"], [4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n    template: function TooltipContentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵelement(1, \"span\", 0, 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMapInterpolate1(\"tooltip-caret position-\", ctx.placement, \"\");\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.showCaret);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.title);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.title);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    styles: [\".ngx-charts-tooltip-content{border-radius:3px;display:block;font-weight:400;opacity:0;pointer-events:none!important;position:fixed;z-index:5000}.ngx-charts-tooltip-content.type-popover{background:#fff;border:1px solid #72809b;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);color:#060709;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{height:0;position:absolute;width:0;z-index:5001}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-bottom:7px solid transparent;border-left:7px solid #fff;border-top:7px solid transparent}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-bottom:7px solid transparent;border-right:7px solid #fff;border-top:7px solid transparent}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-bottom:7px solid #fff;border-left:7px solid transparent;border-right:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip{background:rgba(0,0,0,.75);color:#fff;font-size:12px;padding:0 10px;pointer-events:auto;text-align:center}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75);border-top:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75);border-top:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-bottom:7px solid rgba(0,0,0,.75);border-left:7px solid transparent;border-right:7px solid transparent}.ngx-charts-tooltip-content .tooltip-label{display:block;font-size:1em;line-height:1em;padding:8px 5px 5px}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{height:0;position:absolute;width:0;z-index:5001}.ngx-charts-tooltip-content.position-right{transform:translate3d(10px,0,0)}.ngx-charts-tooltip-content.position-left{transform:translate3d(-10px,0,0)}.ngx-charts-tooltip-content.position-top{transform:translate3d(0,-10px,0)}.ngx-charts-tooltip-content.position-bottom{transform:translate3d(0,10px,0)}.ngx-charts-tooltip-content.animate{opacity:1;pointer-events:auto;transform:translateZ(0);transition:opacity .3s,transform .3s}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{line-height:1.2em;padding:5px 0;text-align:left}.tooltip-item .tooltip-item-color{border-radius:3px;color:#5b646b;display:inline-block;height:12px;margin-right:5px;width:12px}\"],\n    encapsulation: 2\n  });\n\n  __decorate([throttleable(100)], TooltipContentComponent.prototype, \"onWindowResize\", null);\n\n  return TooltipContentComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass InjectionRegisteryService {\n  constructor(injectionService) {\n    this.injectionService = injectionService;\n    this.defaults = {};\n    this.components = new Map();\n  }\n\n  getByType(type = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings) {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type, bindings) {\n    bindings = this.assignDefaults(bindings);\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n    return component;\n  }\n\n  destroy(instance) {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll() {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type) {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  injectComponent(type, bindings) {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  assignDefaults(bindings) {\n    const inputs = Object.assign({}, this.defaults.inputs);\n    const outputs = Object.assign({}, this.defaults.outputs);\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = {\n        inputs: bindings\n      };\n    }\n\n    if (inputs) {\n      bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);\n    }\n\n    if (outputs) {\n      bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);\n    }\n\n    return bindings;\n  }\n\n  register(type, component) {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n\n}\n\nlet TooltipService = /*#__PURE__*/(() => {\n  class TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n      super(injectionService);\n      this.type = TooltipContentComponent;\n    }\n\n  }\n\n  TooltipService.ɵfac = function TooltipService_Factory(t) {\n    return new (t || TooltipService)(ɵngcc0.ɵɵinject(InjectionService));\n  };\n\n  TooltipService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TooltipService,\n    factory: TooltipService.ɵfac\n  });\n  return TooltipService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor() {\n      this.showLegend = false;\n      this.animations = true;\n      this.legendLabelClick = new EventEmitter();\n      this.legendLabelActivate = new EventEmitter();\n      this.legendLabelDeactivate = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      let legendColumns = 0;\n\n      if (this.showLegend) {\n        this.legendType = this.getLegendType();\n\n        if (!this.legendOptions || this.legendOptions.position === 'right') {\n          if (this.legendType === 'scaleLegend') {\n            legendColumns = 1;\n          } else {\n            legendColumns = 2;\n          }\n        }\n      }\n\n      const chartColumns = 12 - legendColumns;\n      this.chartWidth = Math.floor(this.view[0] * chartColumns / 12.0);\n      this.legendWidth = !this.legendOptions || this.legendOptions.position === 'right' ? Math.floor(this.view[0] * legendColumns / 12.0) : this.chartWidth;\n    }\n\n    getLegendType() {\n      if (this.legendOptions.scaleType === 'linear') {\n        return 'scaleLegend';\n      } else {\n        return 'legend';\n      }\n    }\n\n  }\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)();\n  };\n\n  ChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"ngx-charts-chart\"]],\n    inputs: {\n      showLegend: \"showLegend\",\n      animations: \"animations\",\n      legendType: \"legendType\",\n      view: \"view\",\n      legendOptions: \"legendOptions\",\n      data: \"data\",\n      legendData: \"legendData\",\n      colors: \"colors\",\n      activeEntries: \"activeEntries\"\n    },\n    outputs: {\n      legendLabelClick: \"legendLabelClick\",\n      legendLabelActivate: \"legendLabelActivate\",\n      legendLabelDeactivate: \"legendLabelDeactivate\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TooltipService]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 5,\n    vars: 8,\n    consts: [[1, \"ngx-charts-outer\"], [1, \"ngx-charts\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\", 4, \"ngIf\"], [1, \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\"], [1, \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"svg\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, \"ngx-charts-scale-legend\", 2);\n        ɵngcc0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, \"ngx-charts-legend\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.view[0], \"px\");\n        ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.chartWidth)(\"height\", ctx.view[1]);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === \"scaleLegend\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === \"legend\");\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ScaleLegendComponent, LegendComponent];\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate('500ms 100ms', style({\n        opacity: 1\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return ChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Visibility Observer\n */\n\n\nlet VisibilityObserver = /*#__PURE__*/(() => {\n  class VisibilityObserver {\n    constructor(element, zone) {\n      this.element = element;\n      this.zone = zone;\n      this.visible = new EventEmitter();\n      this.isVisible = false;\n      this.runCheck();\n    }\n\n    destroy() {\n      clearTimeout(this.timeout);\n    }\n\n    onVisibilityChange() {\n      // trigger zone recalc for columns\n      this.zone.run(() => {\n        this.isVisible = true;\n        this.visible.emit(true);\n      });\n    }\n\n    runCheck() {\n      const check = () => {\n        if (!this.element) {\n          return;\n        } // https://davidwalsh.name/offsetheight-visibility\n\n\n        const {\n          offsetHeight,\n          offsetWidth\n        } = this.element.nativeElement;\n\n        if (offsetHeight && offsetWidth) {\n          clearTimeout(this.timeout);\n          this.onVisibilityChange();\n        } else {\n          clearTimeout(this.timeout);\n          this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check(), 100);\n          });\n        }\n      };\n\n      this.zone.runOutsideAngular(() => {\n        this.timeout = setTimeout(() => check());\n      });\n    }\n\n  }\n\n  VisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n    return new (t || VisibilityObserver)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  VisibilityObserver.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: VisibilityObserver,\n    selectors: [[\"visibility-observer\"]],\n    outputs: {\n      visible: \"visible\"\n    }\n  });\n  return VisibilityObserver;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BaseChartComponent = /*#__PURE__*/(() => {\n  class BaseChartComponent {\n    constructor(chartElement, zone, cd) {\n      this.chartElement = chartElement;\n      this.zone = zone;\n      this.cd = cd;\n      this.scheme = 'cool';\n      this.schemeType = 'ordinal';\n      this.animations = true;\n      this.select = new EventEmitter();\n    }\n\n    ngAfterViewInit() {\n      this.bindWindowResizeEvent(); // listen for visibility of the element for hidden by default scenario\n\n      this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n      this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n\n    ngOnDestroy() {\n      this.unbindEvents();\n\n      if (this.visibilityObserver) {\n        this.visibilityObserver.visible.unsubscribe();\n        this.visibilityObserver.destroy();\n      }\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      if (this.results) {\n        this.results = this.cloneData(this.results);\n      } else {\n        this.results = [];\n      }\n\n      if (this.view) {\n        this.width = this.view[0];\n        this.height = this.view[1];\n      } else {\n        const dims = this.getContainerDims();\n\n        if (dims) {\n          this.width = dims.width;\n          this.height = dims.height;\n        }\n      } // default values if width or height are 0 or undefined\n\n\n      if (!this.width) {\n        this.width = 600;\n      }\n\n      if (!this.height) {\n        this.height = 400;\n      }\n\n      this.width = Math.floor(this.width);\n      this.height = Math.floor(this.height);\n\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    }\n\n    getContainerDims() {\n      let width;\n      let height;\n      const hostElem = this.chartElement.nativeElement;\n\n      if (hostElem.parentNode !== null) {\n        // Get the container dimensions\n        const dims = hostElem.parentNode.getBoundingClientRect();\n        width = dims.width;\n        height = dims.height;\n      }\n\n      if (width && height) {\n        return {\n          width,\n          height\n        };\n      }\n\n      return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n\n\n    formatDates() {\n      for (let i = 0; i < this.results.length; i++) {\n        const g = this.results[i];\n        g.label = g.name;\n\n        if (g.label instanceof Date) {\n          g.label = g.label.toLocaleDateString();\n        }\n\n        if (g.series) {\n          for (let j = 0; j < g.series.length; j++) {\n            const d = g.series[j];\n            d.label = d.name;\n\n            if (d.label instanceof Date) {\n              d.label = d.label.toLocaleDateString();\n            }\n          }\n        }\n      }\n    }\n\n    unbindEvents() {\n      if (this.resizeSubscription) {\n        this.resizeSubscription.unsubscribe();\n      }\n    }\n\n    bindWindowResizeEvent() {\n      const source = fromEvent(window, 'resize');\n      const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n        this.update();\n\n        if (this.cd) {\n          this.cd.markForCheck();\n        }\n      });\n      this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n\n\n    cloneData(data) {\n      const results = [];\n\n      for (const item of data) {\n        const copy = {\n          name: item['name']\n        };\n\n        if (item['value'] !== undefined) {\n          copy['value'] = item['value'];\n        }\n\n        if (item['series'] !== undefined) {\n          copy['series'] = [];\n\n          for (const seriesItem of item['series']) {\n            const seriesItemCopy = Object.assign({}, seriesItem);\n            copy['series'].push(seriesItemCopy);\n          }\n        }\n\n        if (item['extra'] !== undefined) {\n          copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n        }\n\n        results.push(copy);\n      }\n\n      return results;\n    }\n\n  }\n\n  BaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) {\n    return new (t || BaseChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  BaseChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BaseChartComponent,\n    selectors: [[\"base-chart\"]],\n    inputs: {\n      scheme: \"scheme\",\n      schemeType: \"schemeType\",\n      animations: \"animations\",\n      results: \"results\",\n      view: \"view\",\n      customColors: \"customColors\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    template: function BaseChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\");\n      }\n    },\n    encapsulation: 2\n  });\n  return BaseChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AxisLabelComponent = /*#__PURE__*/(() => {\n  class AxisLabelComponent {\n    constructor(element) {\n      this.textHeight = 25;\n      this.margin = 5;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.strokeWidth = '0.01';\n      this.textAnchor = 'middle';\n      this.transform = '';\n\n      switch (this.orient) {\n        case 'top':\n          this.y = this.offset;\n          this.x = this.width / 2;\n          break;\n\n        case 'bottom':\n          this.y = this.offset;\n          this.x = this.width / 2;\n          break;\n\n        case 'left':\n          this.y = -(this.offset + this.textHeight + this.margin);\n          this.x = -this.height / 2;\n          this.transform = 'rotate(270)';\n          break;\n\n        case 'right':\n          this.y = this.offset + this.margin;\n          this.x = -this.height / 2;\n          this.transform = 'rotate(270)';\n          break;\n\n        default:\n      }\n    }\n\n  }\n\n  AxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) {\n    return new (t || AxisLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  AxisLabelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AxisLabelComponent,\n    selectors: [[\"g\", \"ngx-charts-axis-label\", \"\"]],\n    inputs: {\n      orient: \"orient\",\n      label: \"label\",\n      offset: \"offset\",\n      width: \"width\",\n      height: \"height\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c3,\n    decls: 2,\n    vars: 6,\n    template: function AxisLabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"text\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"stroke-width\", ctx.strokeWidth)(\"x\", ctx.x)(\"y\", ctx.y)(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AxisLabelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction trimLabel(s, max = 16) {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n\nlet XAxisTicksComponent = /*#__PURE__*/(() => {\n  class XAxisTicksComponent {\n    constructor() {\n      this.tickArguments = [5];\n      this.tickStroke = '#ccc';\n      this.trimTicks = true;\n      this.maxTickLength = 16;\n      this.showGridLines = false;\n      this.rotateTicks = true;\n      this.dimensionsChanged = new EventEmitter();\n      this.verticalSpacing = 20;\n      this.rotateLabels = false;\n      this.innerTickSize = 6;\n      this.outerTickSize = 6;\n      this.tickPadding = 3;\n      this.textAnchor = 'middle';\n      this.maxTicksLength = 0;\n      this.maxAllowedLength = 16;\n      this.height = 0;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    ngAfterViewInit() {\n      setTimeout(() => this.updateDims());\n    }\n\n    updateDims() {\n      const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n\n      if (height !== this.height) {\n        this.height = height;\n        this.dimensionsChanged.emit({\n          height\n        });\n        setTimeout(() => this.updateDims());\n      }\n    }\n\n    update() {\n      const scale = this.scale;\n      this.ticks = this.getTicks();\n\n      if (this.tickFormatting) {\n        this.tickFormat = this.tickFormatting;\n      } else if (scale.tickFormat) {\n        this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n      } else {\n        this.tickFormat = function (d) {\n          if (d.constructor.name === 'Date') {\n            return d.toLocaleDateString();\n          }\n\n          return d.toLocaleString();\n        };\n      }\n\n      const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n      this.adjustedScale = this.scale.bandwidth ? function (d) {\n        return this.scale(d) + this.scale.bandwidth() * 0.5;\n      } : this.scale;\n      this.textTransform = '';\n\n      if (angle && angle !== 0) {\n        this.textTransform = `rotate(${angle})`;\n        this.textAnchor = 'end';\n        this.verticalSpacing = 10;\n      } else {\n        this.textAnchor = 'middle';\n      }\n\n      setTimeout(() => this.updateDims());\n    }\n\n    getRotationAngle(ticks) {\n      let angle = 0;\n      this.maxTicksLength = 0;\n\n      for (let i = 0; i < ticks.length; i++) {\n        const tick = this.tickFormat(ticks[i]).toString();\n        let tickLength = tick.length;\n\n        if (this.trimTicks) {\n          tickLength = this.tickTrim(tick).length;\n        }\n\n        if (tickLength > this.maxTicksLength) {\n          this.maxTicksLength = tickLength;\n        }\n      }\n\n      const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n      const charWidth = 8; // need to measure this\n\n      const wordWidth = len * charWidth;\n      let baseWidth = wordWidth;\n      const maxBaseWidth = Math.floor(this.width / ticks.length); // calculate optimal angle\n\n      while (baseWidth > maxBaseWidth && angle > -90) {\n        angle -= 30;\n        baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n      }\n\n      return angle;\n    }\n\n    getTicks() {\n      let ticks;\n      const maxTicks = this.getMaxTicks(20);\n      const maxScaleTicks = this.getMaxTicks(100);\n\n      if (this.tickValues) {\n        ticks = this.tickValues;\n      } else if (this.scale.ticks) {\n        ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n      } else {\n        ticks = this.scale.domain();\n        ticks = reduceTicks(ticks, maxTicks);\n      }\n\n      return ticks;\n    }\n\n    getMaxTicks(tickWidth) {\n      return Math.floor(this.width / tickWidth);\n    }\n\n    tickTransform(tick) {\n      return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n\n    gridLineTransform() {\n      return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n\n    tickTrim(label) {\n      return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n\n  }\n\n  XAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) {\n    return new (t || XAxisTicksComponent)();\n  };\n\n  XAxisTicksComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: XAxisTicksComponent,\n    selectors: [[\"g\", \"ngx-charts-x-axis-ticks\", \"\"]],\n    viewQuery: function XAxisTicksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c4, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n      }\n    },\n    inputs: {\n      tickArguments: \"tickArguments\",\n      tickStroke: \"tickStroke\",\n      trimTicks: \"trimTicks\",\n      maxTickLength: \"maxTickLength\",\n      showGridLines: \"showGridLines\",\n      rotateTicks: \"rotateTicks\",\n      scale: \"scale\",\n      orient: \"orient\",\n      tickValues: \"tickValues\",\n      tickFormatting: \"tickFormatting\",\n      gridLineHeight: \"gridLineHeight\",\n      width: \"width\"\n    },\n    outputs: {\n      dimensionsChanged: \"dimensionsChanged\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c5,\n    decls: 4,\n    vars: 2,\n    consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [4, \"ngIf\"], [\"y2\", \"0\", 1, \"gridline-path\", \"gridline-path-vertical\"]],\n    template: function XAxisTicksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", null, 0);\n        ɵngcc0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 5, 7, \"g\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, \"g\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return XAxisTicksComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet XAxisComponent = /*#__PURE__*/(() => {\n  class XAxisComponent {\n    constructor() {\n      this.rotateTicks = true;\n      this.showGridLines = false;\n      this.xOrient = 'bottom';\n      this.xAxisOffset = 0;\n      this.dimensionsChanged = new EventEmitter();\n      this.xAxisClassName = 'x axis';\n      this.labelOffset = 0;\n      this.fill = 'none';\n      this.stroke = 'stroke';\n      this.tickStroke = '#ccc';\n      this.strokeWidth = 'none';\n      this.padding = 5;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n      if (typeof this.xAxisTickCount !== 'undefined') {\n        this.tickArguments = [this.xAxisTickCount];\n      }\n    }\n\n    emitTicksHeight({\n      height\n    }) {\n      const newLabelOffset = height + 25 + 5;\n\n      if (newLabelOffset !== this.labelOffset) {\n        this.labelOffset = newLabelOffset;\n        setTimeout(() => {\n          this.dimensionsChanged.emit({\n            height\n          });\n        }, 0);\n      }\n    }\n\n  }\n\n  XAxisComponent.ɵfac = function XAxisComponent_Factory(t) {\n    return new (t || XAxisComponent)();\n  };\n\n  XAxisComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: XAxisComponent,\n    selectors: [[\"g\", \"ngx-charts-x-axis\", \"\"]],\n    viewQuery: function XAxisComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(XAxisTicksComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n      }\n    },\n    inputs: {\n      rotateTicks: \"rotateTicks\",\n      showGridLines: \"showGridLines\",\n      xOrient: \"xOrient\",\n      xAxisOffset: \"xAxisOffset\",\n      xScale: \"xScale\",\n      dims: \"dims\",\n      trimTicks: \"trimTicks\",\n      maxTickLength: \"maxTickLength\",\n      tickFormatting: \"tickFormatting\",\n      showLabel: \"showLabel\",\n      labelText: \"labelText\",\n      ticks: \"ticks\",\n      xAxisTickInterval: \"xAxisTickInterval\",\n      xAxisTickCount: \"xAxisTickCount\"\n    },\n    outputs: {\n      dimensionsChanged: \"dimensionsChanged\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c6,\n    decls: 3,\n    vars: 4,\n    consts: [[\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n    template: function XAxisComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\");\n        ɵngcc0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 12, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"class\", ctx.xAxisClassName)(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xScale);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n      }\n    },\n    directives: [ɵngcc1.NgIf, XAxisTicksComponent, AxisLabelComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return XAxisComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\n\n\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n  let retval = '';\n  w = Math.floor(w);\n  h = Math.floor(h);\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n  return retval;\n}\n\nlet YAxisTicksComponent = /*#__PURE__*/(() => {\n  class YAxisTicksComponent {\n    constructor() {\n      this.tickArguments = [5];\n      this.tickStroke = '#ccc';\n      this.trimTicks = true;\n      this.maxTickLength = 16;\n      this.showGridLines = false;\n      this.showRefLabels = false;\n      this.showRefLines = false;\n      this.dimensionsChanged = new EventEmitter();\n      this.innerTickSize = 6;\n      this.tickPadding = 3;\n      this.verticalSpacing = 20;\n      this.textAnchor = 'middle';\n      this.width = 0;\n      this.outerTickSize = 6;\n      this.rotateLabels = false;\n      this.referenceLineLength = 0;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    ngAfterViewInit() {\n      setTimeout(() => this.updateDims());\n    }\n\n    updateDims() {\n      const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n\n      if (width !== this.width) {\n        this.width = width;\n        this.dimensionsChanged.emit({\n          width\n        });\n        setTimeout(() => this.updateDims());\n      }\n    }\n\n    update() {\n      let scale;\n      const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n      this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n      scale = this.scale;\n      this.ticks = this.getTicks();\n\n      if (this.tickFormatting) {\n        this.tickFormat = this.tickFormatting;\n      } else if (scale.tickFormat) {\n        this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n      } else {\n        this.tickFormat = function (d) {\n          if (d.constructor.name === 'Date') {\n            return d.toLocaleDateString();\n          }\n\n          return d.toLocaleString();\n        };\n      }\n\n      this.adjustedScale = scale.bandwidth ? function (d) {\n        return scale(d) + scale.bandwidth() * 0.5;\n      } : scale;\n\n      if (this.showRefLines && this.referenceLines) {\n        this.setReferencelines();\n      }\n\n      switch (this.orient) {\n        case 'top':\n          this.transform = function (tick) {\n            return 'translate(' + this.adjustedScale(tick) + ',0)';\n          };\n\n          this.textAnchor = 'middle';\n          this.y2 = this.innerTickSize * sign;\n          this.y1 = this.tickSpacing * sign;\n          this.dy = sign < 0 ? '0em' : '.71em';\n          break;\n\n        case 'bottom':\n          this.transform = function (tick) {\n            return 'translate(' + this.adjustedScale(tick) + ',0)';\n          };\n\n          this.textAnchor = 'middle';\n          this.y2 = this.innerTickSize * sign;\n          this.y1 = this.tickSpacing * sign;\n          this.dy = sign < 0 ? '0em' : '.71em';\n          break;\n\n        case 'left':\n          this.transform = function (tick) {\n            return 'translate(0,' + this.adjustedScale(tick) + ')';\n          };\n\n          this.textAnchor = 'end';\n          this.x2 = this.innerTickSize * -sign;\n          this.x1 = this.tickSpacing * -sign;\n          this.dy = '.32em';\n          break;\n\n        case 'right':\n          this.transform = function (tick) {\n            return 'translate(0,' + this.adjustedScale(tick) + ')';\n          };\n\n          this.textAnchor = 'start';\n          this.x2 = this.innerTickSize * -sign;\n          this.x1 = this.tickSpacing * -sign;\n          this.dy = '.32em';\n          break;\n\n        default:\n      }\n\n      setTimeout(() => this.updateDims());\n    }\n\n    setReferencelines() {\n      this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n      this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n      this.referenceLineLength = this.referenceLines.length;\n      this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [false, false, false, false]);\n    }\n\n    getTicks() {\n      let ticks;\n      const maxTicks = this.getMaxTicks(20);\n      const maxScaleTicks = this.getMaxTicks(50);\n\n      if (this.tickValues) {\n        ticks = this.tickValues;\n      } else if (this.scale.ticks) {\n        ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n      } else {\n        ticks = this.scale.domain();\n        ticks = reduceTicks(ticks, maxTicks);\n      }\n\n      return ticks;\n    }\n\n    getMaxTicks(tickHeight) {\n      return Math.floor(this.height / tickHeight);\n    }\n\n    tickTransform(tick) {\n      return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n\n    gridLineTransform() {\n      return `translate(5,0)`;\n    }\n\n    tickTrim(label) {\n      return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n\n  }\n\n  YAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) {\n    return new (t || YAxisTicksComponent)();\n  };\n\n  YAxisTicksComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: YAxisTicksComponent,\n    selectors: [[\"g\", \"ngx-charts-y-axis-ticks\", \"\"]],\n    viewQuery: function YAxisTicksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c4, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n      }\n    },\n    inputs: {\n      tickArguments: \"tickArguments\",\n      tickStroke: \"tickStroke\",\n      trimTicks: \"trimTicks\",\n      maxTickLength: \"maxTickLength\",\n      showGridLines: \"showGridLines\",\n      showRefLabels: \"showRefLabels\",\n      showRefLines: \"showRefLines\",\n      scale: \"scale\",\n      orient: \"orient\",\n      tickValues: \"tickValues\",\n      tickFormatting: \"tickFormatting\",\n      gridLineWidth: \"gridLineWidth\",\n      height: \"height\",\n      referenceLines: \"referenceLines\"\n    },\n    outputs: {\n      dimensionsChanged: \"dimensionsChanged\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c7,\n    decls: 6,\n    vars: 4,\n    consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"reference-area\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [1, \"reference-area\"], [4, \"ngIf\"], [\"class\", \"gridline-path gridline-path-horizontal\", \"x1\", \"0\", 4, \"ngIf\"], [\"x1\", \"0\", 1, \"gridline-path\", \"gridline-path-horizontal\"], [\"x1\", \"0\", 1, \"refline-path\", \"gridline-path-horizontal\"], [1, \"refline-label\"]],\n    template: function YAxisTicksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", null, 0);\n        ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 5, 9, \"g\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, \"path\", 2);\n        ɵngcc0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.referenceLines);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return YAxisTicksComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet YAxisComponent = /*#__PURE__*/(() => {\n  class YAxisComponent {\n    constructor() {\n      this.showGridLines = false;\n      this.yOrient = 'left';\n      this.yAxisOffset = 0;\n      this.dimensionsChanged = new EventEmitter();\n      this.yAxisClassName = 'y axis';\n      this.labelOffset = 15;\n      this.fill = 'none';\n      this.stroke = '#CCC';\n      this.tickStroke = '#CCC';\n      this.strokeWidth = 1;\n      this.padding = 5;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.offset = -(this.yAxisOffset + this.padding);\n\n      if (this.yOrient === 'right') {\n        this.labelOffset = 65;\n        this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n      } else {\n        this.offset = this.offset;\n        this.transform = `translate(${this.offset} , 0)`;\n      }\n\n      if (this.yAxisTickCount !== undefined) {\n        this.tickArguments = [this.yAxisTickCount];\n      }\n    }\n\n    emitTicksWidth({\n      width\n    }) {\n      if (width !== this.labelOffset && this.yOrient === 'right') {\n        this.labelOffset = width + this.labelOffset;\n        setTimeout(() => {\n          this.dimensionsChanged.emit({\n            width\n          });\n        }, 0);\n      } else if (width !== this.labelOffset) {\n        this.labelOffset = width;\n        setTimeout(() => {\n          this.dimensionsChanged.emit({\n            width\n          });\n        }, 0);\n      }\n    }\n\n  }\n\n  YAxisComponent.ɵfac = function YAxisComponent_Factory(t) {\n    return new (t || YAxisComponent)();\n  };\n\n  YAxisComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: YAxisComponent,\n    selectors: [[\"g\", \"ngx-charts-y-axis\", \"\"]],\n    viewQuery: function YAxisComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(YAxisTicksComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n      }\n    },\n    inputs: {\n      showGridLines: \"showGridLines\",\n      yOrient: \"yOrient\",\n      yAxisOffset: \"yAxisOffset\",\n      yScale: \"yScale\",\n      dims: \"dims\",\n      trimTicks: \"trimTicks\",\n      maxTickLength: \"maxTickLength\",\n      tickFormatting: \"tickFormatting\",\n      ticks: \"ticks\",\n      showLabel: \"showLabel\",\n      labelText: \"labelText\",\n      yAxisTickInterval: \"yAxisTickInterval\",\n      yAxisTickCount: \"yAxisTickCount\",\n      referenceLines: \"referenceLines\",\n      showRefLines: \"showRefLines\",\n      showRefLabels: \"showRefLabels\"\n    },\n    outputs: {\n      dimensionsChanged: \"dimensionsChanged\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c8,\n    decls: 3,\n    vars: 4,\n    consts: [[\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n    template: function YAxisComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\");\n        ɵngcc0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 14, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"class\", ctx.yAxisClassName)(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yScale);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n      }\n    },\n    directives: [ɵngcc1.NgIf, YAxisTicksComponent, AxisLabelComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return YAxisComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AxesModule = /*#__PURE__*/(() => {\n  class AxesModule {}\n\n  AxesModule.ɵfac = function AxesModule_Factory(t) {\n    return new (t || AxesModule)();\n  };\n\n  AxesModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AxesModule\n  });\n  AxesModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return AxesModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AxesModule, {\n    declarations: function () {\n      return [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent];\n    }\n  });\n})();\n\nvar StyleTypes = /*#__PURE__*/(() => {\n  (function (StyleTypes) {\n    StyleTypes[StyleTypes[\"popover\"] = 'popover'] = \"popover\";\n    StyleTypes[StyleTypes[\"tooltip\"] = 'tooltip'] = \"tooltip\";\n  })(StyleTypes || (StyleTypes = {}));\n\n  return StyleTypes;\n})();\nvar AlignmentTypes = /*#__PURE__*/(() => {\n  (function (AlignmentTypes) {\n    AlignmentTypes[AlignmentTypes[\"left\"] = 'left'] = \"left\";\n    AlignmentTypes[AlignmentTypes[\"center\"] = 'center'] = \"center\";\n    AlignmentTypes[AlignmentTypes[\"right\"] = 'right'] = \"right\";\n  })(AlignmentTypes || (AlignmentTypes = {}));\n\n  return AlignmentTypes;\n})();\nvar ShowTypes = /*#__PURE__*/(() => {\n  (function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n  })(ShowTypes || (ShowTypes = {}));\n\n  return ShowTypes;\n})();\nlet TooltipDirective = /*#__PURE__*/(() => {\n  class TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n      this.tooltipService = tooltipService;\n      this.viewContainerRef = viewContainerRef;\n      this.renderer = renderer;\n      this.tooltipCssClass = '';\n      this.tooltipTitle = '';\n      this.tooltipAppendToBody = true;\n      this.tooltipSpacing = 10;\n      this.tooltipDisabled = false;\n      this.tooltipShowCaret = true;\n      this.tooltipPlacement = PlacementTypes.top;\n      this.tooltipAlignment = AlignmentTypes.center;\n      this.tooltipType = StyleTypes.popover;\n      this.tooltipCloseOnClickOutside = true;\n      this.tooltipCloseOnMouseLeave = true;\n      this.tooltipHideTimeout = 300;\n      this.tooltipShowTimeout = 100;\n      this.tooltipShowEvent = ShowTypes.all;\n      this.tooltipImmediateExit = false;\n      this.show = new EventEmitter();\n      this.hide = new EventEmitter();\n    }\n\n    get listensForFocus() {\n      return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n\n    get listensForHover() {\n      return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n\n    ngOnDestroy() {\n      this.hideTooltip(true);\n    }\n\n    onFocus() {\n      if (this.listensForFocus) {\n        this.showTooltip();\n      }\n    }\n\n    onBlur() {\n      if (this.listensForFocus) {\n        this.hideTooltip(true);\n      }\n    }\n\n    onMouseEnter() {\n      if (this.listensForHover) {\n        this.showTooltip();\n      }\n    }\n\n    onMouseLeave(target) {\n      if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n        clearTimeout(this.timeout);\n\n        if (this.component) {\n          const contentDom = this.component.instance.element.nativeElement;\n          const contains = contentDom.contains(target);\n          if (contains) return;\n        }\n\n        this.hideTooltip(this.tooltipImmediateExit);\n      }\n    }\n\n    onMouseClick() {\n      if (this.listensForHover) {\n        this.hideTooltip(true);\n      }\n    }\n\n    showTooltip(immediate) {\n      if (this.component || this.tooltipDisabled) return;\n      const time = immediate ? 0 : this.tooltipShowTimeout;\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(() => {\n        this.tooltipService.destroyAll();\n        const options = this.createBoundOptions();\n        this.component = this.tooltipService.create(options); // add a tiny timeout to avoid event re-triggers\n\n        setTimeout(() => {\n          if (this.component) {\n            this.addHideListeners(this.component.instance.element.nativeElement);\n          }\n        }, 10);\n        this.show.emit(true);\n      }, time);\n    }\n\n    addHideListeners(tooltip) {\n      // on mouse enter, cancel the hide triggered by the leave\n      this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n        clearTimeout(this.timeout);\n      }); // content mouse leave listener\n\n      if (this.tooltipCloseOnMouseLeave) {\n        this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n          this.hideTooltip(this.tooltipImmediateExit);\n        });\n      } // content close on click outside\n\n\n      if (this.tooltipCloseOnClickOutside) {\n        this.documentClickEvent = this.renderer.listen(document, 'click', event => {\n          const contains = tooltip.contains(event.target);\n          if (!contains) this.hideTooltip();\n        });\n      }\n    }\n\n    hideTooltip(immediate = false) {\n      if (!this.component) return;\n\n      const destroyFn = () => {\n        // remove events\n        if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n        if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n        if (this.documentClickEvent) this.documentClickEvent(); // emit events\n\n        this.hide.emit(true); // destroy component\n\n        this.tooltipService.destroy(this.component);\n        this.component = undefined;\n      };\n\n      clearTimeout(this.timeout);\n\n      if (!immediate) {\n        this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n      } else {\n        destroyFn();\n      }\n    }\n\n    createBoundOptions() {\n      return {\n        title: this.tooltipTitle,\n        template: this.tooltipTemplate,\n        host: this.viewContainerRef.element,\n        placement: this.tooltipPlacement,\n        alignment: this.tooltipAlignment,\n        type: this.tooltipType,\n        showCaret: this.tooltipShowCaret,\n        cssClass: this.tooltipCssClass,\n        spacing: this.tooltipSpacing,\n        context: this.tooltipContext\n      };\n    }\n\n  }\n\n  TooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n    return new (t || TooltipDirective)(ɵngcc0.ɵɵdirectiveInject(TooltipService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  TooltipDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TooltipDirective,\n    selectors: [[\"\", \"ngx-tooltip\", \"\"]],\n    hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function TooltipDirective_focusin_HostBindingHandler() {\n          return ctx.onFocus();\n        })(\"blur\", function TooltipDirective_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        })(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler($event) {\n          return ctx.onMouseLeave($event.target);\n        })(\"click\", function TooltipDirective_click_HostBindingHandler() {\n          return ctx.onMouseClick();\n        });\n      }\n    },\n    inputs: {\n      tooltipCssClass: \"tooltipCssClass\",\n      tooltipTitle: \"tooltipTitle\",\n      tooltipAppendToBody: \"tooltipAppendToBody\",\n      tooltipSpacing: \"tooltipSpacing\",\n      tooltipDisabled: \"tooltipDisabled\",\n      tooltipShowCaret: \"tooltipShowCaret\",\n      tooltipPlacement: \"tooltipPlacement\",\n      tooltipAlignment: \"tooltipAlignment\",\n      tooltipType: \"tooltipType\",\n      tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\",\n      tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\",\n      tooltipHideTimeout: \"tooltipHideTimeout\",\n      tooltipShowTimeout: \"tooltipShowTimeout\",\n      tooltipShowEvent: \"tooltipShowEvent\",\n      tooltipImmediateExit: \"tooltipImmediateExit\",\n      tooltipTemplate: \"tooltipTemplate\",\n      tooltipContext: \"tooltipContext\"\n    },\n    outputs: {\n      show: \"show\",\n      hide: \"hide\"\n    }\n  });\n  return TooltipDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TooltipModule = /*#__PURE__*/(() => {\n  class TooltipModule {}\n\n  TooltipModule.ɵfac = function TooltipModule_Factory(t) {\n    return new (t || TooltipModule)();\n  };\n\n  TooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TooltipModule\n  });\n  TooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [InjectionService, TooltipService],\n    imports: [[CommonModule]]\n  });\n  return TooltipModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TooltipModule, {\n    declarations: function () {\n      return [TooltipContentComponent, TooltipDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [TooltipContentComponent, TooltipDirective];\n    }\n  });\n})();\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\n\n\nfunction formatLabel(label) {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\n\n\nfunction escapeLabel(label) {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\n\nfunction id() {\n  let newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4); // append a 'a' because neo gets mad\n\n  newId = `a${newId}`; // ensure not already used\n\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n\nlet CircleSeriesComponent = /*#__PURE__*/(() => {\n  class CircleSeriesComponent {\n    constructor() {\n      this.type = 'standard';\n      this.tooltipDisabled = false;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.barVisible = false;\n    }\n\n    ngOnInit() {\n      this.gradientId = 'grad' + id().toString();\n      this.gradientFill = `url(#${this.gradientId})`;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.circle = this.getActiveCircle();\n    }\n\n    getActiveCircle() {\n      const indexActiveDataPoint = this.data.series.findIndex(d => {\n        const label = d.name;\n        return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n      });\n\n      if (indexActiveDataPoint === -1) {\n        // No valid point is 'active/hovered over' at this moment.\n        return undefined;\n      }\n\n      return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n\n    mapDataPointToCircle(d, i) {\n      const seriesName = this.data.name;\n      const value = d.value;\n      const label = d.name;\n      const tooltipLabel = formatLabel(label);\n      let cx;\n\n      if (this.scaleType === 'time') {\n        cx = this.xScale(label);\n      } else if (this.scaleType === 'linear') {\n        cx = this.xScale(Number(label));\n      } else {\n        cx = this.xScale(label);\n      }\n\n      const cy = this.yScale(this.type === 'standard' ? value : d.d1);\n      const radius = 5;\n      const height = this.yScale.range()[0] - cy;\n      const opacity = 1;\n      let color;\n\n      if (this.colors.scaleType === 'linear') {\n        if (this.type === 'standard') {\n          color = this.colors.getColor(value);\n        } else {\n          color = this.colors.getColor(d.d1);\n        }\n      } else {\n        color = this.colors.getColor(seriesName);\n      }\n\n      const data = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: label\n      });\n      return {\n        classNames: [`circle-data-${i}`],\n        value,\n        label,\n        data,\n        cx,\n        cy,\n        radius,\n        height,\n        tooltipLabel,\n        color,\n        opacity,\n        seriesName,\n        gradientStops: this.getGradientStops(color),\n        min: d.min,\n        max: d.max\n      };\n    }\n\n    getTooltipText({\n      tooltipLabel,\n      value,\n      seriesName,\n      min,\n      max\n    }) {\n      return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n\n    getTooltipMinMaxText(min, max) {\n      if (min !== undefined || max !== undefined) {\n        let result = ' (';\n\n        if (min !== undefined) {\n          if (max === undefined) {\n            result += '≥';\n          }\n\n          result += min.toLocaleString();\n\n          if (max !== undefined) {\n            result += ' - ';\n          }\n        } else if (max !== undefined) {\n          result += '≤';\n        }\n\n        if (max !== undefined) {\n          result += max.toLocaleString();\n        }\n\n        result += ')';\n        return result;\n      } else {\n        return '';\n      }\n    }\n\n    getGradientStops(color) {\n      return [{\n        offset: 0,\n        color,\n        opacity: 0.2\n      }, {\n        offset: 100,\n        color,\n        opacity: 1\n      }];\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n\n    activateCircle() {\n      this.barVisible = true;\n      this.activate.emit({\n        name: this.data.name\n      });\n    }\n\n    deactivateCircle() {\n      this.barVisible = false;\n      this.circle.opacity = 0;\n      this.deactivate.emit({\n        name: this.data.name\n      });\n    }\n\n  }\n\n  CircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) {\n    return new (t || CircleSeriesComponent)();\n  };\n\n  CircleSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CircleSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-circle-series\", \"\"]],\n    inputs: {\n      type: \"type\",\n      tooltipDisabled: \"tooltipDisabled\",\n      data: \"data\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      colors: \"colors\",\n      scaleType: \"scaleType\",\n      visibleValue: \"visibleValue\",\n      activeEntries: \"activeEntries\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c9,\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"], [\"class\", \"tooltip-bar\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [1, \"tooltip-bar\"]],\n    template: function CircleSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 5, 20, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.circle);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, SvgLinearGradientComponent, CircleComponent, TooltipDirective];\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 1\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return CircleSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CircleComponent = /*#__PURE__*/(() => {\n  class CircleComponent {\n    constructor() {\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n    }\n\n    onClick() {\n      this.select.emit(this.data);\n    }\n\n    onMouseEnter() {\n      this.activate.emit(this.data);\n    }\n\n    onMouseLeave() {\n      this.deactivate.emit(this.data);\n    }\n\n    ngOnChanges(changes) {\n      this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n      this.classNames += 'circle';\n    }\n\n  }\n\n  CircleComponent.ɵfac = function CircleComponent_Factory(t) {\n    return new (t || CircleComponent)();\n  };\n\n  CircleComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CircleComponent,\n    selectors: [[\"g\", \"ngx-charts-circle\", \"\"]],\n    hostBindings: function CircleComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CircleComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        })(\"mouseenter\", function CircleComponent_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function CircleComponent_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        });\n      }\n    },\n    inputs: {\n      classNames: \"classNames\",\n      cx: \"cx\",\n      cy: \"cy\",\n      r: \"r\",\n      fill: \"fill\",\n      stroke: \"stroke\",\n      data: \"data\",\n      circleOpacity: \"circleOpacity\",\n      pointerEvents: \"pointerEvents\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c11,\n    decls: 1,\n    vars: 8,\n    template: function CircleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelement(0, \"circle\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke)(\"opacity\", ctx.circleOpacity)(\"class\", ctx.classNames)(\"pointer-events\", ctx.pointerEvents);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CircleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GridPanelComponent = /*#__PURE__*/(() => {\n  class GridPanelComponent {}\n\n  GridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) {\n    return new (t || GridPanelComponent)();\n  };\n\n  GridPanelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: GridPanelComponent,\n    selectors: [[\"g\", \"ngx-charts-grid-panel\", \"\"]],\n    inputs: {\n      path: \"path\",\n      width: \"width\",\n      height: \"height\",\n      x: \"x\",\n      y: \"y\"\n    },\n    attrs: _c12,\n    decls: 1,\n    vars: 4,\n    consts: [[\"stroke\", \"none\", 1, \"gridpanel\"]],\n    template: function GridPanelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelement(0, \"rect\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"height\", ctx.height)(\"width\", ctx.width)(\"x\", ctx.x)(\"y\", ctx.y);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return GridPanelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GridPanelSeriesComponent = /*#__PURE__*/(() => {\n  class GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.gridPanels = this.getGridPanels();\n    }\n\n    getGridPanels() {\n      return this.data.map(d => {\n        let offset;\n        let width;\n        let height;\n        let x;\n        let y;\n        let className = 'odd';\n\n        if (this.orient === 'vertical') {\n          const position = this.xScale(d.name);\n          const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n          if (positionIndex % 2 === 1) {\n            className = 'even';\n          }\n\n          offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n          width = this.xScale.bandwidth() + offset;\n          height = this.dims.height;\n          x = this.xScale(d.name) - offset / 2;\n          y = 0;\n        } else if (this.orient === 'horizontal') {\n          const position = this.yScale(d.name);\n          const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n          if (positionIndex % 2 === 1) {\n            className = 'even';\n          }\n\n          offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n          width = this.dims.width;\n          height = this.yScale.bandwidth() + offset;\n          x = 0;\n          y = this.yScale(d.name) - offset / 2;\n        }\n\n        return {\n          name: d.name,\n          class: className,\n          height,\n          width,\n          x,\n          y\n        };\n      });\n    }\n\n  }\n\n  GridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) {\n    return new (t || GridPanelSeriesComponent)();\n  };\n\n  GridPanelSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: GridPanelSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-grid-panel-series\", \"\"]],\n    inputs: {\n      data: \"data\",\n      dims: \"dims\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      orient: \"orient\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c13,\n    decls: 1,\n    vars: 1,\n    consts: [[\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\", \"grid-panel\", \"odd\", \"even\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\"]],\n    template: function GridPanelSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridPanels);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, GridPanelComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return GridPanelSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SvgLinearGradientComponent = /*#__PURE__*/(() => {\n  class SvgLinearGradientComponent {\n    constructor() {\n      this.orientation = 'vertical';\n    }\n\n    ngOnChanges(changes) {\n      this.x1 = '0%';\n      this.x2 = '0%';\n      this.y1 = '0%';\n      this.y2 = '0%';\n\n      if (this.orientation === 'horizontal') {\n        this.x2 = '100%';\n      } else if (this.orientation === 'vertical') {\n        this.y1 = '100%';\n      }\n    }\n\n  }\n\n  SvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) {\n    return new (t || SvgLinearGradientComponent)();\n  };\n\n  SvgLinearGradientComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SvgLinearGradientComponent,\n    selectors: [[\"g\", \"ngx-charts-svg-linear-gradient\", \"\"]],\n    inputs: {\n      orientation: \"orientation\",\n      name: \"name\",\n      stops: \"stops\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c14,\n    decls: 2,\n    vars: 6,\n    consts: [[3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function SvgLinearGradientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"linearGradient\", 0);\n        ɵngcc0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.name);\n        ɵngcc0.ɵɵattribute(\"x1\", ctx.x1)(\"y1\", ctx.y1)(\"x2\", ctx.x2)(\"y2\", ctx.y2);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.stops);\n      }\n    },\n    directives: [ɵngcc1.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SvgLinearGradientComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SvgRadialGradientComponent = /*#__PURE__*/(() => {\n  class SvgRadialGradientComponent {\n    constructor() {\n      this.endOpacity = 1;\n      this.cx = 0;\n      this.cy = 0;\n    }\n\n    get stops() {\n      return this.stopsInput || this.stopsDefault;\n    }\n\n    set stops(value) {\n      this.stopsInput = value;\n    }\n\n    ngOnChanges(changes) {\n      this.r = '30%';\n\n      if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n        this.stopsDefault = [{\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        }, {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }];\n      }\n    }\n\n  }\n\n  SvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) {\n    return new (t || SvgRadialGradientComponent)();\n  };\n\n  SvgRadialGradientComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SvgRadialGradientComponent,\n    selectors: [[\"g\", \"ngx-charts-svg-radial-gradient\", \"\"]],\n    inputs: {\n      endOpacity: \"endOpacity\",\n      cx: \"cx\",\n      cy: \"cy\",\n      stops: \"stops\",\n      color: \"color\",\n      name: \"name\",\n      startOpacity: \"startOpacity\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c15,\n    decls: 2,\n    vars: 5,\n    consts: [[\"gradientUnits\", \"userSpaceOnUse\", 3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function SvgRadialGradientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"radialGradient\", 0);\n        ɵngcc0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.name);\n        ɵngcc0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.stops);\n      }\n    },\n    directives: [ɵngcc1.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SvgRadialGradientComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AreaComponent = /*#__PURE__*/(() => {\n  class AreaComponent {\n    constructor(element) {\n      this.opacity = 1;\n      this.startOpacity = 0.5;\n      this.endOpacity = 1;\n      this.gradient = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.initialized = false;\n      this.hasGradient = false;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      if (!this.initialized) {\n        this.loadAnimation();\n        this.initialized = true;\n      } else {\n        this.update();\n      }\n    }\n\n    update() {\n      this.gradientId = 'grad' + id().toString();\n      this.gradientFill = `url(#${this.gradientId})`;\n\n      if (this.gradient || this.stops) {\n        this.gradientStops = this.getGradient();\n        this.hasGradient = true;\n      } else {\n        this.hasGradient = false;\n      }\n\n      this.updatePathEl();\n    }\n\n    loadAnimation() {\n      this.areaPath = this.startingPath;\n      setTimeout(this.update.bind(this), 100);\n    }\n\n    updatePathEl() {\n      const node = select(this.element).select('.area');\n\n      if (this.animations) {\n        node.transition().duration(750).attr('d', this.path);\n      } else {\n        node.attr('d', this.path);\n      }\n    }\n\n    getGradient() {\n      if (this.stops) {\n        return this.stops;\n      }\n\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }];\n    }\n\n  }\n\n  AreaComponent.ɵfac = function AreaComponent_Factory(t) {\n    return new (t || AreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  AreaComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AreaComponent,\n    selectors: [[\"g\", \"ngx-charts-area\", \"\"]],\n    inputs: {\n      opacity: \"opacity\",\n      startOpacity: \"startOpacity\",\n      endOpacity: \"endOpacity\",\n      gradient: \"gradient\",\n      animations: \"animations\",\n      data: \"data\",\n      path: \"path\",\n      startingPath: \"startingPath\",\n      fill: \"fill\",\n      activeLabel: \"activeLabel\",\n      stops: \"stops\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c16,\n    decls: 2,\n    vars: 5,\n    consts: [[4, \"ngIf\"], [1, \"area\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"]],\n    template: function AreaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 2, \"defs\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelement(1, \"path\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"opacity\", ctx.opacity);\n        ɵngcc0.ɵɵattribute(\"d\", ctx.areaPath)(\"fill\", ctx.gradient ? ctx.gradientFill : ctx.fill);\n      }\n    },\n    directives: [ɵngcc1.NgIf, SvgLinearGradientComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AreaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Robert Penner's easeOutExpo\n\n\nfunction easeOutExpo(t, b, c, d) {\n  return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\n\n\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\n\n\nfunction decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n\n\nlet CountUpDirective = /*#__PURE__*/(() => {\n  class CountUpDirective {\n    constructor(cd, element) {\n      this.cd = cd;\n      this.countDuration = 1;\n      this.countPrefix = '';\n      this.countSuffix = '';\n      this.countChange = new EventEmitter();\n      this.countFinish = new EventEmitter();\n      this.value = '';\n      this._countDecimals = 0;\n      this._countTo = 0;\n      this._countFrom = 0;\n      this.nativeElement = element.nativeElement;\n    }\n\n    set countDecimals(val) {\n      this._countDecimals = val;\n    }\n\n    get countDecimals() {\n      if (this._countDecimals) return this._countDecimals;\n      return decimalChecker(this.countTo);\n    }\n\n    set countTo(val) {\n      this._countTo = parseFloat(val);\n      this.start();\n    }\n\n    get countTo() {\n      return this._countTo;\n    }\n\n    set countFrom(val) {\n      this._countFrom = parseFloat(val);\n      this.start();\n    }\n\n    get countFrom() {\n      return this._countFrom;\n    }\n\n    ngOnDestroy() {\n      cancelAnimationFrame(this.animationReq);\n    }\n\n    start() {\n      cancelAnimationFrame(this.animationReq);\n\n      const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n      const callback = ({\n        value,\n        progress,\n        finished\n      }) => {\n        this.value = valueFormatting(value);\n        this.cd.markForCheck();\n        if (!finished) this.countChange.emit({\n          value: this.value,\n          progress\n        });\n        if (finished) this.countFinish.emit({\n          value: this.value,\n          progress\n        });\n      };\n\n      this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n\n  }\n\n  CountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n    return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CountUpDirective.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CountUpDirective,\n    selectors: [[\"\", \"ngx-charts-count-up\", \"\"]],\n    inputs: {\n      countDuration: \"countDuration\",\n      countPrefix: \"countPrefix\",\n      countSuffix: \"countSuffix\",\n      countDecimals: \"countDecimals\",\n      countTo: \"countTo\",\n      countFrom: \"countFrom\",\n      valueFormatting: \"valueFormatting\"\n    },\n    outputs: {\n      countChange: \"countChange\",\n      countFinish: \"countFinish\"\n    },\n    attrs: _c17,\n    decls: 1,\n    vars: 1,\n    template: function CountUpDirective_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n      }\n    },\n    encapsulation: 2\n  });\n  return CountUpDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\n\n\nlet root;\n\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} // tslint:disable-next-line:variable-name\n\n\nconst MouseEvent = root.MouseEvent;\n\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, {\n      bubbles,\n      cancelable\n    });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n\nlet TooltipArea = /*#__PURE__*/(() => {\n  class TooltipArea {\n    constructor() {\n      this.anchorOpacity = 0;\n      this.anchorPos = -1;\n      this.anchorValues = [];\n      this.showPercentage = false;\n      this.tooltipDisabled = false;\n      this.hover = new EventEmitter();\n    }\n\n    getValues(xVal) {\n      const results = [];\n\n      for (const group of this.results) {\n        const item = group.series.find(d => d.name.toString() === xVal.toString());\n        let groupName = group.name;\n\n        if (groupName instanceof Date) {\n          groupName = groupName.toLocaleDateString();\n        }\n\n        if (item) {\n          const label = item.name;\n          let val = item.value;\n\n          if (this.showPercentage) {\n            val = (item.d1 - item.d0).toFixed(2) + '%';\n          }\n\n          let color;\n\n          if (this.colors.scaleType === 'linear') {\n            let v = val;\n\n            if (item.d1) {\n              v = item.d1;\n            }\n\n            color = this.colors.getColor(v);\n          } else {\n            color = this.colors.getColor(group.name);\n          }\n\n          const data = Object.assign({}, item, {\n            value: val,\n            name: label,\n            series: groupName,\n            min: item.min,\n            max: item.max,\n            color\n          });\n          results.push(data);\n        }\n      }\n\n      return results;\n    }\n\n    mouseMove(event) {\n      const xPos = event.pageX - event.target.getBoundingClientRect().left;\n      const closestIndex = this.findClosestPointIndex(xPos);\n      const closestPoint = this.xSet[closestIndex];\n      this.anchorPos = this.xScale(closestPoint);\n      this.anchorPos = Math.max(0, this.anchorPos);\n      this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n      this.anchorValues = this.getValues(closestPoint);\n\n      if (this.anchorPos !== this.lastAnchorPos) {\n        const ev = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n        this.anchorOpacity = 0.7;\n        this.hover.emit({\n          value: closestPoint\n        });\n        this.showTooltip();\n        this.lastAnchorPos = this.anchorPos;\n      }\n    }\n\n    findClosestPointIndex(xPos) {\n      let minIndex = 0;\n      let maxIndex = this.xSet.length - 1;\n      let minDiff = Number.MAX_VALUE;\n      let closestIndex = 0;\n\n      while (minIndex <= maxIndex) {\n        const currentIndex = (minIndex + maxIndex) / 2 | 0;\n        const currentElement = this.xScale(this.xSet[currentIndex]);\n        const curDiff = Math.abs(currentElement - xPos);\n\n        if (curDiff < minDiff) {\n          minDiff = curDiff;\n          closestIndex = currentIndex;\n        }\n\n        if (currentElement < xPos) {\n          minIndex = currentIndex + 1;\n        } else if (currentElement > xPos) {\n          maxIndex = currentIndex - 1;\n        } else {\n          minDiff = 0;\n          closestIndex = currentIndex;\n          break;\n        }\n      }\n\n      return closestIndex;\n    }\n\n    showTooltip() {\n      const event = createMouseEvent('mouseenter');\n      this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n\n    hideTooltip() {\n      const event = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(event);\n      this.anchorOpacity = 0;\n      this.lastAnchorPos = -1;\n    }\n\n    getToolTipText(tooltipItem) {\n      let result = '';\n\n      if (tooltipItem.series !== undefined) {\n        result += tooltipItem.series;\n      } else {\n        result += '???';\n      }\n\n      result += ': ';\n\n      if (tooltipItem.value !== undefined) {\n        result += tooltipItem.value.toLocaleString();\n      }\n\n      if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n        result += ' (';\n\n        if (tooltipItem.min !== undefined) {\n          if (tooltipItem.max === undefined) {\n            result += '≥';\n          }\n\n          result += tooltipItem.min.toLocaleString();\n\n          if (tooltipItem.max !== undefined) {\n            result += ' - ';\n          }\n        } else if (tooltipItem.max !== undefined) {\n          result += '≤';\n        }\n\n        if (tooltipItem.max !== undefined) {\n          result += tooltipItem.max.toLocaleString();\n        }\n\n        result += ')';\n      }\n\n      return result;\n    }\n\n  }\n\n  TooltipArea.ɵfac = function TooltipArea_Factory(t) {\n    return new (t || TooltipArea)();\n  };\n\n  TooltipArea.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TooltipArea,\n    selectors: [[\"g\", \"ngx-charts-tooltip-area\", \"\"]],\n    viewQuery: function TooltipArea_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c18, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);\n      }\n    },\n    inputs: {\n      showPercentage: \"showPercentage\",\n      tooltipDisabled: \"tooltipDisabled\",\n      dims: \"dims\",\n      xSet: \"xSet\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      results: \"results\",\n      colors: \"colors\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      hover: \"hover\"\n    },\n    attrs: _c19,\n    decls: 6,\n    vars: 18,\n    consts: [[\"y\", \"0\", 1, \"tooltip-area\", 2, \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mousemove\", \"mouseleave\"], [\"defaultTooltipTemplate\", \"\"], [\"y\", \"0\", \"ngx-tooltip\", \"\", 1, \"tooltip-anchor\", 3, \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipSpacing\", \"tooltipTemplate\", \"tooltipContext\", \"tooltipImmediateExit\"], [\"tooltipAnchor\", \"\"], [1, \"area-tooltip-container\"], [\"class\", \"tooltip-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"tooltip-item\"], [1, \"tooltip-item-color\"]],\n    template: function TooltipArea_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"rect\", 0);\n        ɵngcc0.ɵɵlistener(\"mousemove\", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) {\n          return ctx.mouseMove($event);\n        })(\"mouseleave\", function TooltipArea_Template__svg_rect_mouseleave_1_listener() {\n          return ctx.hideTooltip();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelement(4, \"rect\", 2, 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(3);\n\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"x\", 0)(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"opacity\", ctx.anchorOpacity)(\"pointer-events\", \"none\");\n        ɵngcc0.ɵɵproperty(\"@animationState\", ctx.anchorOpacity !== 0 ? \"active\" : \"inactive\")(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", \"right\")(\"tooltipType\", \"tooltip\")(\"tooltipSpacing\", 15)(\"tooltipTemplate\", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)(\"tooltipContext\", ctx.anchorValues)(\"tooltipImmediateExit\", true);\n        ɵngcc0.ɵɵattribute(\"x\", ctx.anchorPos)(\"width\", 1)(\"height\", ctx.dims.height);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, TooltipDirective],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition('inactive => active', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 0.7\n      }))]), transition('active => inactive', [style({\n        opacity: 0.7\n      }), animate(250, style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return TooltipArea;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Timeline = /*#__PURE__*/(() => {\n  class Timeline {\n    constructor(element, cd) {\n      this.cd = cd;\n      this.height = 50;\n      this.select = new EventEmitter();\n      this.onDomainChange = new EventEmitter();\n      this.initialized = false;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n\n      if (!this.initialized) {\n        this.addBrush();\n        this.initialized = true;\n      }\n    }\n\n    update() {\n      this.dims = this.getDims();\n      this.height = this.dims.height;\n      const offsetY = this.view[1] - this.height;\n      this.xDomain = this.getXDomain();\n      this.xScale = this.getXScale();\n\n      if (this.brush) {\n        this.updateBrush();\n      }\n\n      this.transform = `translate(0 , ${offsetY})`;\n      this.filterId = 'filter' + id().toString();\n      this.filter = `url(#${this.filterId})`;\n      this.cd.markForCheck();\n    }\n\n    getXDomain() {\n      let values = [];\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          if (!values.includes(d.name)) {\n            values.push(d.name);\n          }\n        }\n      }\n\n      let domain = [];\n\n      if (this.scaleType === 'time') {\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        domain = [min, max];\n      } else if (this.scaleType === 'linear') {\n        values = values.map(v => Number(v));\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        domain = [min, max];\n      } else {\n        domain = values;\n      }\n\n      return domain;\n    }\n\n    getXScale() {\n      let scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n      }\n\n      return scale;\n    }\n\n    addBrush() {\n      if (this.brush) return;\n      const height = this.height;\n      const width = this.view[0];\n      this.brush = brushX().extent([[0, 0], [width, height]]).on('brush end', () => {\n        const selection = event.selection || this.xScale.range();\n        const newDomain = selection.map(this.xScale.invert);\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n      select(this.element).select('.brush').call(this.brush);\n    }\n\n    updateBrush() {\n      if (!this.brush) return;\n      const height = this.height;\n      const width = this.view[0];\n      this.brush.extent([[0, 0], [width, height]]);\n      select(this.element).select('.brush').call(this.brush); // clear hardcoded properties so they can be defined by CSS\n\n      select(this.element).select('.selection').attr('fill', undefined).attr('stroke', undefined).attr('fill-opacity', undefined);\n      this.cd.markForCheck();\n    }\n\n    getDims() {\n      const width = this.view[0];\n      const dims = {\n        width,\n        height: this.height\n      };\n      return dims;\n    }\n\n  }\n\n  Timeline.ɵfac = function Timeline_Factory(t) {\n    return new (t || Timeline)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  Timeline.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Timeline,\n    selectors: [[\"g\", \"ngx-charts-timeline\", \"\"]],\n    inputs: {\n      height: \"height\",\n      view: \"view\",\n      state: \"state\",\n      results: \"results\",\n      scheme: \"scheme\",\n      customColors: \"customColors\",\n      legend: \"legend\",\n      miniChart: \"miniChart\",\n      autoScale: \"autoScale\",\n      scaleType: \"scaleType\"\n    },\n    outputs: {\n      select: \"select\",\n      onDomainChange: \"onDomainChange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c20,\n    ngContentSelectors: _c2,\n    decls: 7,\n    vars: 4,\n    consts: [[1, \"timeline\"], [\"in\", \"SourceGraphic\", \"type\", \"matrix\", \"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"], [1, \"embedded-chart\"], [\"x\", \"0\", \"y\", \"0\", 1, \"brush-background\"], [1, \"brush\"]],\n    template: function Timeline_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", 0)(1, \"filter\");\n        ɵngcc0.ɵɵelement(2, \"feColorMatrix\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"g\", 2);\n        ɵngcc0.ɵɵprojection(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(5, \"rect\", 3)(6, \"g\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.filterId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.view[0])(\"height\", ctx.height);\n      }\n    },\n    styles: [\".timeline .brush-background{fill:rgba(0,0,0,.05)}.timeline .brush .selection{fill:rgba(0,0,0,.1);stroke:#888;stroke-width:1px}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Timeline;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LegendComponent = /*#__PURE__*/(() => {\n  class LegendComponent {\n    constructor(cd) {\n      this.cd = cd;\n      this.horizontal = false;\n      this.labelClick = new EventEmitter();\n      this.labelActivate = new EventEmitter();\n      this.labelDeactivate = new EventEmitter();\n      this.legendEntries = [];\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.cd.markForCheck();\n      this.legendEntries = this.getLegendEntries();\n    }\n\n    getLegendEntries() {\n      const items = [];\n\n      for (const label of this.data) {\n        const formattedLabel = formatLabel(label);\n        const idx = items.findIndex(i => {\n          return i.label === formattedLabel;\n        });\n\n        if (idx === -1) {\n          items.push({\n            label,\n            formattedLabel,\n            color: this.colors.getColor(label)\n          });\n        }\n      }\n\n      return items;\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.label === d.name;\n      });\n      return item !== undefined;\n    }\n\n    activate(item) {\n      this.labelActivate.emit(item);\n    }\n\n    deactivate(item) {\n      this.labelDeactivate.emit(item);\n    }\n\n    trackBy(index, item) {\n      return item.label;\n    }\n\n  }\n\n  LegendComponent.ɵfac = function LegendComponent_Factory(t) {\n    return new (t || LegendComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  LegendComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LegendComponent,\n    selectors: [[\"ngx-charts-legend\"]],\n    inputs: {\n      horizontal: \"horizontal\",\n      data: \"data\",\n      title: \"title\",\n      colors: \"colors\",\n      height: \"height\",\n      width: \"width\",\n      activeEntries: \"activeEntries\"\n    },\n    outputs: {\n      labelClick: \"labelClick\",\n      labelActivate: \"labelActivate\",\n      labelDeactivate: \"labelDeactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 9,\n    consts: [[\"class\", \"legend-title\", 4, \"ngIf\"], [1, \"legend-wrap\"], [1, \"legend-labels\"], [\"class\", \"legend-label\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"legend-title\"], [1, \"legend-title-text\"], [1, \"legend-label\"], [3, \"label\", \"formattedLabel\", \"color\", \"isActive\", \"select\", \"activate\", \"deactivate\"]],\n    template: function LegendComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, \"header\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1)(3, \"ul\", 2);\n        ɵngcc0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, \"li\", 3);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", (ctx.title == null ? null : ctx.title.length) > 0);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵstyleProp(\"max-height\", ctx.height - 45, \"px\");\n        ɵngcc0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.legendEntries)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ɵngcc1.NgForOf, LegendEntryComponent];\n    },\n    styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{font-size:14px;font-weight:700;margin-bottom:5px;margin-left:10px;overflow:hidden;white-space:nowrap}.chart-legend li,.chart-legend ul{list-style:none;margin:0;padding:0}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{background:rgba(0,0,0,.05);border-radius:3px;float:left;line-height:85%;list-style:none;overflow-x:hidden;overflow-y:auto;text-align:left;white-space:nowrap;width:100%}.chart-legend .legend-label{color:#afb7c8;cursor:pointer;font-size:90%;margin:8px}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{border-radius:3px;color:#5b646b;display:inline-block;height:15px;margin-right:5px;width:15px}.chart-legend .legend-label-text{font-size:12px;line-height:15px;vertical-align:top;width:calc(100% - 20px)}.chart-legend .legend-label-text,.chart-legend .legend-title-text{display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.chart-legend .legend-title-text{line-height:16px;vertical-align:bottom}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LegendComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LegendEntryComponent = /*#__PURE__*/(() => {\n  class LegendEntryComponent {\n    constructor() {\n      this.isActive = false;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.toggle = new EventEmitter();\n    }\n\n    get trimmedLabel() {\n      return this.formattedLabel || '(empty)';\n    }\n\n    onMouseEnter() {\n      this.activate.emit({\n        name: this.label\n      });\n    }\n\n    onMouseLeave() {\n      this.deactivate.emit({\n        name: this.label\n      });\n    }\n\n  }\n\n  LegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) {\n    return new (t || LegendEntryComponent)();\n  };\n\n  LegendEntryComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LegendEntryComponent,\n    selectors: [[\"ngx-charts-legend-entry\"]],\n    hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function LegendEntryComponent_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function LegendEntryComponent_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        });\n      }\n    },\n    inputs: {\n      isActive: \"isActive\",\n      color: \"color\",\n      label: \"label\",\n      formattedLabel: \"formattedLabel\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\",\n      toggle: \"toggle\"\n    },\n    decls: 4,\n    vars: 6,\n    consts: [[\"tabindex\", \"-1\", 3, \"title\", \"click\"], [1, \"legend-label-color\", 3, \"click\"], [1, \"legend-label-text\"]],\n    template: function LegendEntryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_0_listener() {\n          return ctx.select.emit(ctx.formattedLabel);\n        });\n        ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_1_listener() {\n          return ctx.toggle.emit(ctx.formattedLabel);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive);\n        ɵngcc0.ɵɵproperty(\"title\", ctx.formattedLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"background-color\", ctx.color);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.trimmedLabel, \" \");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LegendEntryComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ScaleLegendComponent = /*#__PURE__*/(() => {\n  class ScaleLegendComponent {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n      this.horizontal = false;\n    }\n\n    ngOnChanges(changes) {\n      const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n      const direction = this.horizontal ? 'right' : 'bottom';\n      this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n\n\n    gradientString(colors, splits) {\n      // add the 100%\n      splits.push(1);\n      const pairs = [];\n      colors.reverse().forEach((c, i) => {\n        pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n      });\n      return pairs.join(', ');\n    }\n\n  }\n\n  ScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) {\n    return new (t || ScaleLegendComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer));\n  };\n\n  ScaleLegendComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ScaleLegendComponent,\n    selectors: [[\"ngx-charts-scale-legend\"]],\n    inputs: {\n      horizontal: \"horizontal\",\n      valueRange: \"valueRange\",\n      colors: \"colors\",\n      height: \"height\",\n      width: \"width\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 10,\n    consts: [[1, \"scale-legend\"], [1, \"scale-legend-label\"], [1, \"scale-legend-wrap\"]],\n    template: function ScaleLegendComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelement(4, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 1)(6, \"span\");\n        ɵngcc0.ɵɵtext(7);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx.horizontal ? undefined : ctx.height, \"px\")(\"width\", ctx.width, \"px\");\n        ɵngcc0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"background\", ctx.gradient);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());\n      }\n    },\n    styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{display:flex;flex-direction:column;text-align:center}.chart-legend .scale-legend-wrap{border-radius:5px;display:inline-block;flex:1;margin:0 auto;width:30px}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{height:30px;margin:0 16px;width:auto}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ScaleLegendComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AdvancedLegendComponent = /*#__PURE__*/(() => {\n  class AdvancedLegendComponent {\n    constructor() {\n      this.label = 'Total';\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.legendItems = [];\n\n      this.labelFormatting = label => label;\n\n      this.percentageFormatting = percentage => percentage;\n\n      this.defaultValueFormatting = value => value.toLocaleString();\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    getTotal() {\n      return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    update() {\n      this.total = this.getTotal();\n      this.roundedTotal = this.total;\n      this.legendItems = this.getLegendItems();\n    }\n\n    getLegendItems() {\n      return this.data.map(d => {\n        const label = formatLabel(d.name);\n        const value = d.value;\n        const color = this.colors.getColor(label);\n        const percentage = this.total > 0 ? value / this.total * 100 : 0;\n        const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n        return {\n          _value: value,\n          data: d,\n          value,\n          color,\n          label: formattedLabel,\n          displayLabel: trimLabel(formattedLabel, 20),\n          origialLabel: d.name,\n          percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n        };\n      });\n    }\n\n    trackBy(item) {\n      return item.formattedLabel;\n    }\n\n  }\n\n  AdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) {\n    return new (t || AdvancedLegendComponent)();\n  };\n\n  AdvancedLegendComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AdvancedLegendComponent,\n    selectors: [[\"ngx-charts-advanced-legend\"]],\n    inputs: {\n      label: \"label\",\n      animations: \"animations\",\n      labelFormatting: \"labelFormatting\",\n      percentageFormatting: \"percentageFormatting\",\n      width: \"width\",\n      data: \"data\",\n      colors: \"colors\",\n      valueFormatting: \"valueFormatting\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 7,\n    consts: [[1, \"advanced-pie-legend\"], [\"class\", \"total-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"total-value\", 4, \"ngIf\"], [1, \"total-label\"], [1, \"legend-items-container\"], [1, \"legend-items\"], [\"tabindex\", \"-1\", \"class\", \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-count-up\", \"\", 1, \"total-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"total-value\"], [\"tabindex\", \"-1\", 1, \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\"], [1, \"item-color\"], [\"class\", \"item-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"item-value\", 4, \"ngIf\"], [1, \"item-label\"], [\"class\", \"item-percent\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"item-percent\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"item-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"item-value\"], [\"ngx-charts-count-up\", \"\", 1, \"item-percent\", 3, \"countTo\", \"countSuffix\"], [1, \"item-percent\"]],\n    template: function AdvancedLegendComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.animations);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.legendItems)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: [ɵngcc1.NgIf, CountUpDirective, ɵngcc1.NgForOf],\n    styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{overflow:auto;white-space:nowrap}.advanced-pie-legend .legend-items-container .legend-items .legend-item{cursor:pointer;display:inline-block;margin-right:20px}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;margin-left:11px;margin-top:-6px;opacity:.7}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;margin-left:11px;opacity:.7}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;float:left;height:42px;margin-right:7px;width:4px}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AdvancedLegendComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst COMPONENTS = [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent];\nlet ChartCommonModule = /*#__PURE__*/(() => {\n  class ChartCommonModule {}\n\n  ChartCommonModule.ɵfac = function ChartCommonModule_Factory(t) {\n    return new (t || ChartCommonModule)();\n  };\n\n  ChartCommonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ChartCommonModule\n  });\n  ChartCommonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule]\n  });\n  return ChartCommonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartCommonModule, {\n    declarations: function () {\n      return [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent, VisibilityObserver];\n    },\n    imports: function () {\n      return [CommonModule, AxesModule, TooltipModule];\n    },\n    exports: function () {\n      return [CommonModule, AxesModule, TooltipModule, AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent, VisibilityObserver];\n    }\n  });\n})();\n\nfunction calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = 'ordinal',\n  legendPosition = 'right',\n  columns = 12\n}) {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = chartWidth * columns / 12;\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n\nlet colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\n\nclass ColorHelper {\n  constructor(scheme, type, domain, customColors) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    let colorScale;\n\n    if (type === 'quantile') {\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n    } else if (type === 'ordinal') {\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n    } else if (type === 'linear') {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear().domain(points).range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n\n    if (this.scaleType === 'linear') {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found; // todo type customColors\n\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n    const endColor = this.getColor(value); // generate the stops\n\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = (s.offset - startVal) / (endVal - startVal) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n\n}\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\n\n\nfunction getUniqueXDomainValues(results) {\n  const valueSet = new Set();\n\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n\n  return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\n\n\nfunction getScaleType(values, checkDateType = true) {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n\nlet AreaChartComponent = /*#__PURE__*/(() => {\n  class AreaChartComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.baseValue = 'auto';\n      this.showGridLines = true;\n      this.curve = curveLinear;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.roundDomains = false;\n      this.tooltipDisabled = false;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.timelineHeight = 50;\n      this.timelinePadding = 10;\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = `url(#${this.clipPathId})`;\n    }\n\n    updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n      }\n    }\n\n    getXDomain() {\n      let values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      let domain = [];\n\n      if (this.scaleType === 'linear') {\n        values = values.map(v => Number(v));\n      }\n\n      let min;\n      let max;\n\n      if (this.scaleType === 'time' || this.scaleType === 'linear') {\n        min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n        max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n      }\n\n      if (this.scaleType === 'time') {\n        domain = [new Date(min), new Date(max)];\n        this.xSet = [...values].sort((a, b) => {\n          const aDate = a.getTime();\n          const bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        domain = [min, max]; // Use compare function to sort numbers numerically\n\n        this.xSet = [...values].sort((a, b) => a - b);\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n\n    getYDomain() {\n      const domain = [];\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          if (!domain.includes(d.value)) {\n            domain.push(d.value);\n          }\n        }\n      }\n\n      const values = [...domain];\n\n      if (!this.autoScale) {\n        values.push(0);\n      }\n\n      if (this.baseValue !== 'auto') {\n        values.push(this.baseValue);\n      }\n\n      const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n      const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n      return [min, max];\n    }\n\n    getSeriesDomain() {\n      return this.results.map(d => d.name);\n    }\n\n    getXScale(domain, width) {\n      let scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime();\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear();\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().padding(0.1);\n      }\n\n      scale.range([0, width]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getYScale(domain, height) {\n      const scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getScaleType(values) {\n      let date = true;\n      let num = true;\n\n      for (const value of values) {\n        if (!this.isDate(value)) {\n          date = false;\n        }\n\n        if (typeof value !== 'number') {\n          num = false;\n        }\n      }\n\n      if (date) {\n        return 'time';\n      }\n\n      if (num) {\n        return 'linear';\n      }\n\n      return 'ordinal';\n    }\n\n    isDate(value) {\n      if (value instanceof Date) {\n        return true;\n      }\n\n      return false;\n    }\n\n    updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n\n    updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n\n    hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n\n    onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    deactivateAll() {\n      this.activeEntries = [...this.activeEntries];\n\n      for (const entry of this.activeEntries) {\n        this.deactivate.emit({\n          value: entry,\n          entries: []\n        });\n      }\n\n      this.activeEntries = [];\n    }\n\n  }\n\n  AreaChartComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵAreaChartComponent_BaseFactory;\n    return function AreaChartComponent_Factory(t) {\n      return (ɵAreaChartComponent_BaseFactory || (ɵAreaChartComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AreaChartComponent)))(t || AreaChartComponent);\n    };\n  }();\n\n  AreaChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AreaChartComponent,\n    selectors: [[\"ngx-charts-area-chart\"]],\n    contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n      }\n    },\n    hostBindings: function AreaChartComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartComponent_mouseleave_HostBindingHandler() {\n          return ctx.hideCircles();\n        });\n      }\n    },\n    inputs: {\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      baseValue: \"baseValue\",\n      showGridLines: \"showGridLines\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      roundDomains: \"roundDomains\",\n      tooltipDisabled: \"tooltipDisabled\",\n      legend: \"legend\",\n      state: \"state\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      autoScale: \"autoScale\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      timeline: \"timeline\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      xScaleMin: \"xScaleMin\",\n      xScaleMax: \"xScaleMax\",\n      yScaleMin: \"yScaleMin\",\n      yScaleMax: \"yScaleMax\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 11,\n    vars: 20,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n    template: function AreaChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event);\n        })(\"legendLabelDeactivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n        ɵngcc0.ɵɵelement(3, \"rect\");\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵelementStart(7, \"g\");\n        ɵngcc0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n        ɵngcc0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AreaChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AreaChartNormalizedComponent = /*#__PURE__*/(() => {\n  class AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.showGridLines = true;\n      this.curve = curveLinear;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.roundDomains = false;\n      this.tooltipDisabled = false;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.timelineHeight = 50;\n      this.timelinePadding = 10;\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n      for (let i = 0; i < this.xSet.length; i++) {\n        const val = this.xSet[i];\n        let d0 = 0;\n        let total = 0;\n\n        for (const group of this.results) {\n          const d = group.series.find(item => {\n            let a = item.name;\n            let b = val;\n\n            if (this.scaleType === 'time') {\n              a = a.valueOf();\n              b = b.valueOf();\n            }\n\n            return a === b;\n          });\n\n          if (d) {\n            total += d.value;\n          }\n        }\n\n        for (const group of this.results) {\n          let d = group.series.find(item => {\n            let a = item.name;\n            let b = val;\n\n            if (this.scaleType === 'time') {\n              a = a.valueOf();\n              b = b.valueOf();\n            }\n\n            return a === b;\n          });\n\n          if (d) {\n            d.d0 = d0;\n            d.d1 = d0 + d.value;\n            d0 += d.value;\n          } else {\n            d = {\n              name: val,\n              value: 0,\n              d0,\n              d1: d0\n            };\n            group.series.push(d);\n          }\n\n          if (total > 0) {\n            d.d0 = d.d0 * 100 / total;\n            d.d1 = d.d1 * 100 / total;\n          } else {\n            d.d0 = 0;\n            d.d1 = 0;\n          }\n        }\n      }\n\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = `url(#${this.clipPathId})`;\n    }\n\n    updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n      }\n    }\n\n    getXDomain() {\n      let values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      let domain = [];\n\n      if (this.scaleType === 'time') {\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        domain = [new Date(min), new Date(max)];\n        this.xSet = [...values].sort((a, b) => {\n          const aDate = a.getTime();\n          const bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        values = values.map(v => Number(v));\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        domain = [min, max]; // Use compare function to sort numbers numerically\n\n        this.xSet = [...values].sort((a, b) => a - b);\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n\n    getYDomain() {\n      return [0, 100];\n    }\n\n    getSeriesDomain() {\n      return this.results.map(d => d.name);\n    }\n\n    getXScale(domain, width) {\n      let scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime();\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear();\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().padding(0.1);\n      }\n\n      scale.range([0, width]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getYScale(domain, height) {\n      const scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n\n    updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n\n    hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n\n    onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    deactivateAll() {\n      this.activeEntries = [...this.activeEntries];\n\n      for (const entry of this.activeEntries) {\n        this.deactivate.emit({\n          value: entry,\n          entries: []\n        });\n      }\n\n      this.activeEntries = [];\n    }\n\n  }\n\n  AreaChartNormalizedComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵAreaChartNormalizedComponent_BaseFactory;\n    return function AreaChartNormalizedComponent_Factory(t) {\n      return (ɵAreaChartNormalizedComponent_BaseFactory || (ɵAreaChartNormalizedComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent)))(t || AreaChartNormalizedComponent);\n    };\n  }();\n\n  AreaChartNormalizedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AreaChartNormalizedComponent,\n    selectors: [[\"ngx-charts-area-chart-normalized\"]],\n    contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n      }\n    },\n    hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() {\n          return ctx.hideCircles();\n        });\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      showGridLines: \"showGridLines\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      roundDomains: \"roundDomains\",\n      tooltipDisabled: \"tooltipDisabled\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      timeline: \"timeline\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 11,\n    vars: 20,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", \"normalized\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"activeEntries\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", \"normalized\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n    template: function AreaChartNormalizedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event);\n        })(\"legendLabelDeactivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n        ɵngcc0.ɵɵelement(3, \"rect\");\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵelementStart(7, \"g\");\n        ɵngcc0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 9, \"g\", 4);\n        ɵngcc0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AreaChartNormalizedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AreaChartStackedComponent = /*#__PURE__*/(() => {\n  class AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.showGridLines = true;\n      this.curve = curveLinear;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.roundDomains = false;\n      this.tooltipDisabled = false;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.timelineHeight = 50;\n      this.timelinePadding = 10;\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n      for (let i = 0; i < this.xSet.length; i++) {\n        const val = this.xSet[i];\n        let d0 = 0;\n\n        for (const group of this.results) {\n          let d = group.series.find(item => {\n            let a = item.name;\n            let b = val;\n\n            if (this.scaleType === 'time') {\n              a = a.valueOf();\n              b = b.valueOf();\n            }\n\n            return a === b;\n          });\n\n          if (d) {\n            d.d0 = d0;\n            d.d1 = d0 + d.value;\n            d0 += d.value;\n          } else {\n            d = {\n              name: val,\n              value: 0,\n              d0,\n              d1: d0\n            };\n            group.series.push(d);\n          }\n        }\n      }\n\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = `url(#${this.clipPathId})`;\n    }\n\n    updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n      }\n    }\n\n    getXDomain() {\n      let values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      let domain = [];\n\n      if (this.scaleType === 'linear') {\n        values = values.map(v => Number(v));\n      }\n\n      let min;\n      let max;\n\n      if (this.scaleType === 'time' || this.scaleType === 'linear') {\n        min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n        max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n      }\n\n      if (this.scaleType === 'time') {\n        domain = [new Date(min), new Date(max)];\n        this.xSet = [...values].sort((a, b) => {\n          const aDate = a.getTime();\n          const bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        domain = [min, max]; // Use compare function to sort numbers numerically\n\n        this.xSet = [...values].sort((a, b) => a - b);\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n\n    getYDomain() {\n      const domain = [];\n\n      for (let i = 0; i < this.xSet.length; i++) {\n        const val = this.xSet[i];\n        let sum = 0;\n\n        for (const group of this.results) {\n          const d = group.series.find(item => {\n            let a = item.name;\n            let b = val;\n\n            if (this.scaleType === 'time') {\n              a = a.valueOf();\n              b = b.valueOf();\n            }\n\n            return a === b;\n          });\n\n          if (d) {\n            sum += d.value;\n          }\n        }\n\n        domain.push(sum);\n      }\n\n      const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n      const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n      return [min, max];\n    }\n\n    getSeriesDomain() {\n      return this.results.map(d => d.name);\n    }\n\n    getXScale(domain, width) {\n      let scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime();\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear();\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().padding(0.1);\n      }\n\n      scale.range([0, width]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getYScale(domain, height) {\n      const scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n\n    updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n\n    hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n\n    onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    deactivateAll() {\n      this.activeEntries = [...this.activeEntries];\n\n      for (const entry of this.activeEntries) {\n        this.deactivate.emit({\n          value: entry,\n          entries: []\n        });\n      }\n\n      this.activeEntries = [];\n    }\n\n  }\n\n  AreaChartStackedComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵAreaChartStackedComponent_BaseFactory;\n    return function AreaChartStackedComponent_Factory(t) {\n      return (ɵAreaChartStackedComponent_BaseFactory || (ɵAreaChartStackedComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AreaChartStackedComponent)))(t || AreaChartStackedComponent);\n    };\n  }();\n\n  AreaChartStackedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AreaChartStackedComponent,\n    selectors: [[\"ngx-charts-area-chart-stacked\"]],\n    contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n      }\n    },\n    hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent_mouseleave_HostBindingHandler() {\n          return ctx.hideCircles();\n        });\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      showGridLines: \"showGridLines\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      roundDomains: \"roundDomains\",\n      tooltipDisabled: \"tooltipDisabled\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      timeline: \"timeline\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      xScaleMin: \"xScaleMin\",\n      xScaleMax: \"xScaleMax\",\n      yScaleMin: \"yScaleMin\",\n      yScaleMax: \"yScaleMax\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 11,\n    vars: 20,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", \"stacked\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"activeEntries\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [\"ngx-charts-circle-series\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", \"stacked\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n    template: function AreaChartStackedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event);\n        })(\"legendLabelDeactivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n        ɵngcc0.ɵɵelement(3, \"rect\");\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵelementStart(7, \"g\");\n        ɵngcc0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 9, \"g\", 4);\n        ɵngcc0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AreaChartStackedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nfunction sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n\nlet AreaSeriesComponent = /*#__PURE__*/(() => {\n  class AreaSeriesComponent {\n    constructor() {\n      this.baseValue = 'auto';\n      this.stacked = false;\n      this.normalized = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.updateGradient();\n      let currentArea;\n      let startingArea;\n\n      const xProperty = d => {\n        const label = d.name;\n        return this.xScale(label);\n      };\n\n      if (this.stacked || this.normalized) {\n        currentArea = area().x(xProperty).y0((d, i) => this.yScale(d.d0)).y1((d, i) => this.yScale(d.d1));\n        startingArea = area().x(xProperty).y0(d => this.yScale.range()[0]).y1(d => this.yScale.range()[0]);\n      } else {\n        currentArea = area().x(xProperty).y0(() => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.yScale(d.value));\n        startingArea = area().x(xProperty).y0(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue));\n      }\n\n      currentArea.curve(this.curve);\n      startingArea.curve(this.curve);\n      this.opacity = 0.8;\n      let data = this.data.series;\n\n      if (this.scaleType === 'linear') {\n        data = sortLinear(data, 'name');\n      } else if (this.scaleType === 'time') {\n        data = sortByTime(data, 'name');\n      } else {\n        data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n      }\n\n      this.path = currentArea(data);\n      this.startingPath = startingArea(data);\n    }\n\n    updateGradient() {\n      if (this.colors.scaleType === 'linear') {\n        this.hasGradient = true;\n\n        if (this.stacked || this.normalized) {\n          const d0values = this.data.series.map(d => d.d0);\n          const d1values = this.data.series.map(d => d.d1);\n          const max = Math.max(...d1values);\n          const min = Math.min(...d0values);\n          this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        } else {\n          const values = this.data.series.map(d => d.value);\n          const max = Math.max(...values);\n          this.gradientStops = this.colors.getLinearGradientStops(max);\n        }\n      } else {\n        this.hasGradient = false;\n        this.gradientStops = undefined;\n      }\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n\n    isInactive(entry) {\n      if (!this.activeEntries || this.activeEntries.length === 0) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item === undefined;\n    }\n\n  }\n\n  AreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) {\n    return new (t || AreaSeriesComponent)();\n  };\n\n  AreaSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AreaSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-area-series\", \"\"]],\n    inputs: {\n      baseValue: \"baseValue\",\n      stacked: \"stacked\",\n      normalized: \"normalized\",\n      animations: \"animations\",\n      data: \"data\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      colors: \"colors\",\n      scaleType: \"scaleType\",\n      gradient: \"gradient\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c25,\n    decls: 1,\n    vars: 12,\n    consts: [[\"ngx-charts-area\", \"\", 1, \"area-series\", 3, \"data\", \"path\", \"fill\", \"stops\", \"startingPath\", \"opacity\", \"gradient\", \"animations\"]],\n    template: function AreaSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelement(0, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n        ɵngcc0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"fill\", ctx.colors.getColor(ctx.data.name))(\"stops\", ctx.gradientStops)(\"startingPath\", ctx.startingPath)(\"opacity\", ctx.opacity)(\"gradient\", ctx.gradient || ctx.hasGradient)(\"animations\", ctx.animations);\n      }\n    },\n    directives: [AreaComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AreaSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AreaChartModule = /*#__PURE__*/(() => {\n  class AreaChartModule {}\n\n  AreaChartModule.ɵfac = function AreaChartModule_Factory(t) {\n    return new (t || AreaChartModule)();\n  };\n\n  AreaChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AreaChartModule\n  });\n  AreaChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return AreaChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AreaChartModule, {\n    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n  });\n})();\n\nlet BarComponent = /*#__PURE__*/(() => {\n  class BarComponent {\n    constructor(element) {\n      this.roundEdges = true;\n      this.gradient = false;\n      this.offset = 0;\n      this.isActive = false;\n      this.animations = true;\n      this.noBarWhenZero = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.hasGradient = false;\n      this.hideBar = false;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      if (changes.roundEdges) {\n        this.loadAnimation();\n      }\n\n      this.update();\n    }\n\n    update() {\n      this.gradientId = 'grad' + id().toString();\n      this.gradientFill = `url(#${this.gradientId})`;\n\n      if (this.gradient || this.stops) {\n        this.gradientStops = this.getGradient();\n        this.hasGradient = true;\n      } else {\n        this.hasGradient = false;\n      }\n\n      this.updatePathEl();\n      this.checkToHideBar();\n    }\n\n    loadAnimation() {\n      this.path = this.getStartingPath();\n      setTimeout(this.update.bind(this), 100);\n    }\n\n    updatePathEl() {\n      const node = select(this.element).select('.bar');\n      const path = this.getPath();\n\n      if (this.animations) {\n        node.transition().duration(500).attr('d', path);\n      } else {\n        node.attr('d', path);\n      }\n    }\n\n    getGradient() {\n      if (this.stops) {\n        return this.stops;\n      }\n\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }];\n    }\n\n    getStartingPath() {\n      if (!this.animations) {\n        return this.getPath();\n      }\n\n      let radius = this.getRadius();\n      let path;\n\n      if (this.roundEdges) {\n        if (this.orientation === 'vertical') {\n          radius = Math.min(this.height, radius);\n          path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n        } else if (this.orientation === 'horizontal') {\n          radius = Math.min(this.width, radius);\n          path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n        }\n      } else {\n        if (this.orientation === 'vertical') {\n          path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n        } else if (this.orientation === 'horizontal') {\n          path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n        }\n      }\n\n      return path;\n    }\n\n    getPath() {\n      let radius = this.getRadius();\n      let path;\n\n      if (this.roundEdges) {\n        if (this.orientation === 'vertical') {\n          radius = Math.min(this.height, radius);\n          path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        } else if (this.orientation === 'horizontal') {\n          radius = Math.min(this.width, radius);\n          path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n      } else {\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n\n      return path;\n    }\n\n    getRadius() {\n      let radius = 0;\n\n      if (this.roundEdges && this.height > 5 && this.width > 5) {\n        radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n      }\n\n      return radius;\n    }\n\n    getStartOpacity() {\n      if (this.roundEdges) {\n        return 0.2;\n      } else {\n        return 0.5;\n      }\n    }\n\n    get edges() {\n      let edges = [false, false, false, false];\n\n      if (this.roundEdges) {\n        if (this.orientation === 'vertical') {\n          if (this.data.value > 0) {\n            edges = [true, true, false, false];\n          } else {\n            edges = [false, false, true, true];\n          }\n        } else if (this.orientation === 'horizontal') {\n          if (this.data.value > 0) {\n            edges = [false, true, false, true];\n          } else {\n            edges = [true, false, true, false];\n          }\n        }\n      }\n\n      return edges;\n    }\n\n    onMouseEnter() {\n      this.activate.emit(this.data);\n    }\n\n    onMouseLeave() {\n      this.deactivate.emit(this.data);\n    }\n\n    checkToHideBar() {\n      this.hideBar = this.noBarWhenZero && (this.orientation === 'vertical' && this.height === 0 || this.orientation === 'horizontal' && this.width === 0);\n    }\n\n  }\n\n  BarComponent.ɵfac = function BarComponent_Factory(t) {\n    return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  BarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarComponent,\n    selectors: [[\"g\", \"ngx-charts-bar\", \"\"]],\n    hostBindings: function BarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function BarComponent_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function BarComponent_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        });\n      }\n    },\n    inputs: {\n      roundEdges: \"roundEdges\",\n      gradient: \"gradient\",\n      offset: \"offset\",\n      isActive: \"isActive\",\n      animations: \"animations\",\n      noBarWhenZero: \"noBarWhenZero\",\n      fill: \"fill\",\n      data: \"data\",\n      width: \"width\",\n      height: \"height\",\n      x: \"x\",\n      y: \"y\",\n      orientation: \"orientation\",\n      stops: \"stops\",\n      ariaLabel: \"ariaLabel\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c26,\n    decls: 2,\n    vars: 8,\n    consts: [[4, \"ngIf\"], [\"stroke\", \"none\", \"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n    template: function BarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"path\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function BarComponent_Template__svg_path_click_1_listener() {\n          return ctx.select.emit(ctx.data);\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n        ɵngcc0.ɵɵattribute(\"d\", ctx.path)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n      }\n    },\n    directives: [ɵngcc1.NgIf, SvgLinearGradientComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarHorizontalComponent = /*#__PURE__*/(() => {\n  class BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.roundEdges = true;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    update() {\n      super.update();\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxWidth = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n\n    getXScale() {\n      this.xDomain = this.getXDomain();\n      const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getYScale() {\n      this.yDomain = this.getYDomain();\n      const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n\n    getXDomain() {\n      const values = this.results.map(d => d.value);\n      const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n      const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n      return [min, max];\n    }\n\n    getYDomain() {\n      return this.results.map(d => d.label);\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.yDomain;\n      } else {\n        domain = this.xDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.xDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onDataLabelMaxWidthChanged(event) {\n      if (event.size.negative) {\n        this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n      } else {\n        this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n      }\n\n      if (event.index === this.results.length - 1) {\n        setTimeout(() => this.update());\n      }\n    }\n\n    onActivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarHorizontalComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarHorizontalComponent_BaseFactory;\n    return function BarHorizontalComponent_Factory(t) {\n      return (ɵBarHorizontalComponent_BaseFactory || (ɵBarHorizontalComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalComponent)))(t || BarHorizontalComponent);\n    };\n  }();\n\n  BarHorizontalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarHorizontalComponent,\n    selectors: [[\"ngx-charts-bar-horizontal\"]],\n    contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      roundEdges: \"roundEdges\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      xScaleMax: \"xScaleMax\",\n      xScaleMin: \"xScaleMin\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 25,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"activeEntries\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"]],\n    template: function BarHorizontalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, true);\n        })(\"legendLabelDeactivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, true);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"g\", 4);\n        ɵngcc0.ɵɵlistener(\"select\", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) {\n          return ctx.onClick($event);\n        })(\"activate\", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) {\n          return ctx.onActivate($event);\n        })(\"deactivate\", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) {\n          return ctx.onDeactivate($event);\n        })(\"dataLabelWidthChanged\", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) {\n          return ctx.onDataLabelMaxWidthChanged($event);\n        });\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(22, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"noBarWhenZero\", ctx.noBarWhenZero);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, SeriesHorizontal];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BarHorizontalComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarHorizontal2DComponent = /*#__PURE__*/(() => {\n  class BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.groupPadding = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.roundEdges = true;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    update() {\n      super.update();\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxWidth = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valuesDomain = this.getValueDomain();\n      this.groupScale = this.getGroupScale();\n      this.innerScale = this.getInnerScale();\n      this.valueScale = this.getValueScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n\n    getGroupScale() {\n      const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n    }\n\n    getInnerScale() {\n      const height = this.groupScale.bandwidth();\n      const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n\n    getValueScale() {\n      const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getGroupDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        if (!domain.includes(group.label)) {\n          domain.push(group.label);\n        }\n      }\n\n      return domain;\n    }\n\n    getInnerDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.label)) {\n            domain.push(d.label);\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getValueDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.value)) {\n            domain.push(d.value);\n          }\n        }\n      }\n\n      const min = Math.min(0, ...domain);\n      const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n      return [min, max];\n    }\n\n    groupTransform(group) {\n      return `translate(0, ${this.groupScale(group.label)})`;\n    }\n\n    onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valuesDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valuesDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n      if (event.size.negative) {\n        this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n      } else {\n        this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(() => this.update());\n      }\n    }\n\n    onActivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      const items = this.results.map(g => g.series).flat().filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = [...items];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(i => {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarHorizontal2DComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarHorizontal2DComponent_BaseFactory;\n    return function BarHorizontal2DComponent_Factory(t) {\n      return (ɵBarHorizontal2DComponent_BaseFactory || (ɵBarHorizontal2DComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarHorizontal2DComponent)))(t || BarHorizontal2DComponent);\n    };\n  }();\n\n  BarHorizontal2DComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarHorizontal2DComponent,\n    selectors: [[\"ngx-charts-bar-horizontal-2d\"]],\n    contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      groupPadding: \"groupPadding\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      roundEdges: \"roundEdges\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      xScaleMax: \"xScaleMax\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 17,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", \"orient\", \"horizontal\", 3, \"xScale\", \"yScale\", \"data\", \"dims\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"activeEntries\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n    template: function BarHorizontal2DComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, undefined, true);\n        })(\"legendLabelDeactivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, undefined, true);\n        })(\"legendLabelClick\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵelement(2, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n        ɵngcc0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 17, \"g\", 5);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(14, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"xScale\", ctx.valueScale)(\"yScale\", ctx.groupScale)(\"data\", ctx.results)(\"dims\", ctx.dims);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, GridPanelSeriesComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, SeriesHorizontal];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BarHorizontal2DComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarHorizontalNormalizedComponent = /*#__PURE__*/(() => {\n  class BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n\n    getGroupDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        if (!domain.includes(group.label)) {\n          domain.push(group.label);\n        }\n      }\n\n      return domain;\n    }\n\n    getInnerDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.label)) {\n            domain.push(d.label);\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getValueDomain() {\n      return [0, 100];\n    }\n\n    getYScale() {\n      const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n\n    getXScale() {\n      const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    groupTransform(group) {\n      return `translate(0, ${this.yScale(group.name)})`;\n    }\n\n    onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      const items = this.results.map(g => g.series).flat().filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = [...items];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(i => {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarHorizontalNormalizedComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarHorizontalNormalizedComponent_BaseFactory;\n    return function BarHorizontalNormalizedComponent_Factory(t) {\n      return (ɵBarHorizontalNormalizedComponent_BaseFactory || (ɵBarHorizontalNormalizedComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent)))(t || BarHorizontalNormalizedComponent);\n    };\n  }();\n\n  BarHorizontalNormalizedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarHorizontalNormalizedComponent,\n    selectors: [[\"ngx-charts-bar-horizontal-normalized\"]],\n    contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 13,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", \"type\", \"normalized\", 3, \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n    template: function BarHorizontalNormalizedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, undefined, true);\n        })(\"legendLabelDeactivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, undefined, true);\n        })(\"legendLabelClick\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 14, \"g\", 4);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, SeriesHorizontal];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BarHorizontalNormalizedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarHorizontalStackedComponent = /*#__PURE__*/(() => {\n  class BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    update() {\n      super.update();\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxWidth = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n\n    getGroupDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        if (!domain.includes(group.label)) {\n          domain.push(group.label);\n        }\n      }\n\n      return domain;\n    }\n\n    getInnerDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.label)) {\n            domain.push(d.label);\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getValueDomain() {\n      const domain = [];\n      let smallest = 0;\n      let biggest = 0;\n\n      for (const group of this.results) {\n        let smallestSum = 0;\n        let biggestSum = 0;\n\n        for (const d of group.series) {\n          if (d.value < 0) {\n            smallestSum += d.value;\n          } else {\n            biggestSum += d.value;\n          }\n\n          smallest = d.value < smallest ? d.value : smallest;\n          biggest = d.value > biggest ? d.value : biggest;\n        }\n\n        domain.push(smallestSum);\n        domain.push(biggestSum);\n      }\n\n      domain.push(smallest);\n      domain.push(biggest);\n      const min = Math.min(0, ...domain);\n      const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n      return [min, max];\n    }\n\n    getYScale() {\n      const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n\n    getXScale() {\n      const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    groupTransform(group) {\n      return `translate(0, ${this.yScale(group.name)})`;\n    }\n\n    onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n      if (event.size.negative) {\n        this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n      } else {\n        this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(() => this.update());\n      }\n    }\n\n    onActivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      const items = this.results.map(g => g.series).flat().filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = [...items];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(i => {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarHorizontalStackedComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarHorizontalStackedComponent_BaseFactory;\n    return function BarHorizontalStackedComponent_Factory(t) {\n      return (ɵBarHorizontalStackedComponent_BaseFactory || (ɵBarHorizontalStackedComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent)))(t || BarHorizontalStackedComponent);\n    };\n  }();\n\n  BarHorizontalStackedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarHorizontalStackedComponent,\n    selectors: [[\"ngx-charts-bar-horizontal-stacked\"]],\n    contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      xScaleMax: \"xScaleMax\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 13,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"activeEntries\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n    template: function BarHorizontalStackedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, undefined, true);\n        })(\"legendLabelDeactivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, undefined, true);\n        })(\"legendLabelClick\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 16, \"g\", 4);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, SeriesHorizontal];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BarHorizontalStackedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarVerticalComponent = /*#__PURE__*/(() => {\n  class BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.roundEdges = true;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    update() {\n      super.update();\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxHeight = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n\n      if (this.showDataLabel) {\n        this.dims.height -= this.dataLabelMaxHeight.negative;\n      }\n\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n\n    getXScale() {\n      this.xDomain = this.getXDomain();\n      const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n      return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n\n    getYScale() {\n      this.yDomain = this.getYDomain();\n      const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getXDomain() {\n      return this.results.map(d => d.label);\n    }\n\n    getYDomain() {\n      const values = this.results.map(d => d.value);\n      let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n\n      if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n        min = Math.min(min, ...this.yAxisTicks);\n      }\n\n      let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n\n      if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n        max = Math.max(max, ...this.yAxisTicks);\n      }\n\n      return [min, max];\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.xDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.xDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onDataLabelMaxHeightChanged(event) {\n      if (event.size.negative) {\n        this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n      } else {\n        this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n      }\n\n      if (event.index === this.results.length - 1) {\n        setTimeout(() => this.update());\n      }\n    }\n\n    onActivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarVerticalComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarVerticalComponent_BaseFactory;\n    return function BarVerticalComponent_Factory(t) {\n      return (ɵBarVerticalComponent_BaseFactory || (ɵBarVerticalComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarVerticalComponent)))(t || BarVerticalComponent);\n    };\n  }();\n\n  BarVerticalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarVerticalComponent,\n    selectors: [[\"ngx-charts-bar-vertical\"]],\n    contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      roundEdges: \"roundEdges\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      yScaleMax: \"yScaleMax\",\n      yScaleMin: \"yScaleMin\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 25,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"activeEntries\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"activate\", \"deactivate\", \"select\", \"dataLabelHeightChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n    template: function BarVerticalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, true);\n        })(\"legendLabelDeactivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, true);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"g\", 4);\n        ɵngcc0.ɵɵlistener(\"activate\", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) {\n          return ctx.onActivate($event);\n        })(\"deactivate\", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) {\n          return ctx.onDeactivate($event);\n        })(\"select\", function BarVerticalComponent_Template__svg_g_select_4_listener($event) {\n          return ctx.onClick($event);\n        })(\"dataLabelHeightChanged\", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) {\n          return ctx.onDataLabelMaxHeightChanged($event);\n        });\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(22, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"noBarWhenZero\", ctx.noBarWhenZero);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, SeriesVerticalComponent];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BarVerticalComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarVertical2DComponent = /*#__PURE__*/(() => {\n  class BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.scaleType = 'ordinal';\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.groupPadding = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.roundEdges = true;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    update() {\n      super.update();\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxHeight = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.showDataLabel) {\n        this.dims.height -= this.dataLabelMaxHeight.negative;\n      }\n\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valuesDomain = this.getValueDomain();\n      this.groupScale = this.getGroupScale();\n      this.innerScale = this.getInnerScale();\n      this.valueScale = this.getValueScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n      if (event.size.negative) {\n        this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n      } else {\n        this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(() => this.update());\n      }\n    }\n\n    getGroupScale() {\n      const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n    }\n\n    getInnerScale() {\n      const width = this.groupScale.bandwidth();\n      const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n      return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n\n    getValueScale() {\n      const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getGroupDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        if (!domain.includes(group.label)) {\n          domain.push(group.label);\n        }\n      }\n\n      return domain;\n    }\n\n    getInnerDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.label)) {\n            domain.push(d.label);\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getValueDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.value)) {\n            domain.push(d.value);\n          }\n        }\n      }\n\n      const min = Math.min(0, ...domain);\n      const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n      return [min, max];\n    }\n\n    groupTransform(group) {\n      return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n\n    onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valuesDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valuesDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      const items = this.results.map(g => g.series).flat().filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = [...items];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(i => {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarVertical2DComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarVertical2DComponent_BaseFactory;\n    return function BarVertical2DComponent_Factory(t) {\n      return (ɵBarVertical2DComponent_BaseFactory || (ɵBarVertical2DComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarVertical2DComponent)))(t || BarVertical2DComponent);\n    };\n  }();\n\n  BarVertical2DComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarVertical2DComponent,\n    selectors: [[\"ngx-charts-bar-vertical-2d\"]],\n    contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      scaleType: \"scaleType\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      groupPadding: \"groupPadding\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      roundEdges: \"roundEdges\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      yScaleMax: \"yScaleMax\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 17,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", \"orient\", \"vertical\", 3, \"xScale\", \"yScale\", \"data\", \"dims\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n    template: function BarVertical2DComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, undefined, true);\n        })(\"legendLabelDeactivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, undefined, true);\n        })(\"legendLabelClick\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵelement(2, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n        ɵngcc0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 1, 17, \"g\", 5);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(14, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"xScale\", ctx.groupScale)(\"yScale\", ctx.valueScale)(\"data\", ctx.results)(\"dims\", ctx.dims);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, GridPanelSeriesComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, SeriesVerticalComponent];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BarVertical2DComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarVerticalNormalizedComponent = /*#__PURE__*/(() => {\n  class BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n\n    getGroupDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        if (!domain.includes(group.label)) {\n          domain.push(group.label);\n        }\n      }\n\n      return domain;\n    }\n\n    getInnerDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.label)) {\n            domain.push(d.label);\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getValueDomain() {\n      return [0, 100];\n    }\n\n    getXScale() {\n      const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n\n    getYScale() {\n      const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    groupTransform(group) {\n      return `translate(${this.xScale(group.name)}, 0)`;\n    }\n\n    onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      const items = this.results.map(g => g.series).flat().filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = [...items];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(i => {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarVerticalNormalizedComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarVerticalNormalizedComponent_BaseFactory;\n    return function BarVerticalNormalizedComponent_Factory(t) {\n      return (ɵBarVerticalNormalizedComponent_BaseFactory || (ɵBarVerticalNormalizedComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent)))(t || BarVerticalNormalizedComponent);\n    };\n  }();\n\n  BarVerticalNormalizedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarVerticalNormalizedComponent,\n    selectors: [[\"ngx-charts-bar-vertical-normalized\"]],\n    contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 13,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", \"type\", \"normalized\", 3, \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n    template: function BarVerticalNormalizedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, undefined, true);\n        })(\"legendLabelDeactivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, undefined, true);\n        })(\"legendLabelClick\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 14, \"g\", 4);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, SeriesVerticalComponent];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BarVerticalNormalizedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarVerticalStackedComponent = /*#__PURE__*/(() => {\n  class BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.tooltipDisabled = false;\n      this.showGridLines = true;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.barPadding = 8;\n      this.roundDomains = false;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    update() {\n      super.update();\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxHeight = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.showDataLabel) {\n        this.dims.height -= this.dataLabelMaxHeight.negative;\n      }\n\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n\n    getGroupDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        if (!domain.includes(group.label)) {\n          domain.push(group.label);\n        }\n      }\n\n      return domain;\n    }\n\n    getInnerDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.label)) {\n            domain.push(d.label);\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getValueDomain() {\n      const domain = [];\n      let smallest = 0;\n      let biggest = 0;\n\n      for (const group of this.results) {\n        let smallestSum = 0;\n        let biggestSum = 0;\n\n        for (const d of group.series) {\n          if (d.value < 0) {\n            smallestSum += d.value;\n          } else {\n            biggestSum += d.value;\n          }\n\n          smallest = d.value < smallest ? d.value : smallest;\n          biggest = d.value > biggest ? d.value : biggest;\n        }\n\n        domain.push(smallestSum);\n        domain.push(biggestSum);\n      }\n\n      domain.push(smallest);\n      domain.push(biggest);\n      const min = Math.min(0, ...domain);\n      const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n      return [min, max];\n    }\n\n    getXScale() {\n      const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n\n    getYScale() {\n      const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n      if (event.size.negative) {\n        this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n      } else {\n        this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(() => this.update());\n      }\n    }\n\n    groupTransform(group) {\n      return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n\n    onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      const items = this.results.map(g => g.series).flat().filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = [...items];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(i => {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  BarVerticalStackedComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBarVerticalStackedComponent_BaseFactory;\n    return function BarVerticalStackedComponent_Factory(t) {\n      return (ɵBarVerticalStackedComponent_BaseFactory || (ɵBarVerticalStackedComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarVerticalStackedComponent)))(t || BarVerticalStackedComponent);\n    };\n  }();\n\n  BarVerticalStackedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarVerticalStackedComponent,\n    selectors: [[\"ngx-charts-bar-vertical-stacked\"]],\n    contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showGridLines: \"showGridLines\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      barPadding: \"barPadding\",\n      roundDomains: \"roundDomains\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      yScaleMax: \"yScaleMax\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 13,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n    template: function BarVerticalStackedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, undefined, true);\n        })(\"legendLabelDeactivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, undefined, true);\n        })(\"legendLabelClick\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 16, \"g\", 4);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, SeriesVerticalComponent];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BarVerticalStackedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar D0Types = /*#__PURE__*/(() => {\n  (function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n  })(D0Types || (D0Types = {}));\n\n  return D0Types;\n})();\nlet SeriesVerticalComponent = /*#__PURE__*/(() => {\n  class SeriesVerticalComponent {\n    constructor() {\n      this.type = 'standard';\n      this.tooltipDisabled = false;\n      this.animations = true;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.dataLabelHeightChanged = new EventEmitter();\n      this.barsForDataLabels = [];\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.updateTooltipSettings();\n      let width;\n\n      if (this.series.length) {\n        width = this.xScale.bandwidth();\n      }\n\n      width = Math.round(width);\n      const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n      const d0 = {\n        [D0Types.positive]: 0,\n        [D0Types.negative]: 0\n      };\n      let d0Type = D0Types.positive;\n      let total;\n\n      if (this.type === 'normalized') {\n        total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n      }\n\n      this.bars = this.series.map((d, index) => {\n        let value = d.value;\n        const label = this.getLabel(d);\n        const formattedLabel = formatLabel(label);\n        const roundEdges = this.roundEdges;\n        d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n        const bar = {\n          value,\n          label,\n          roundEdges,\n          data: d,\n          width,\n          formattedLabel,\n          height: 0,\n          x: 0,\n          y: 0\n        };\n\n        if (this.type === 'standard') {\n          bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n          bar.x = this.xScale(label);\n\n          if (value < 0) {\n            bar.y = this.yScale(0);\n          } else {\n            bar.y = this.yScale(value);\n          }\n        } else if (this.type === 'stacked') {\n          const offset0 = d0[d0Type];\n          const offset1 = offset0 + value;\n          d0[d0Type] += value;\n          bar.height = this.yScale(offset0) - this.yScale(offset1);\n          bar.x = 0;\n          bar.y = this.yScale(offset1);\n          bar.offset0 = offset0;\n          bar.offset1 = offset1;\n        } else if (this.type === 'normalized') {\n          let offset0 = d0[d0Type];\n          let offset1 = offset0 + value;\n          d0[d0Type] += value;\n\n          if (total > 0) {\n            offset0 = offset0 * 100 / total;\n            offset1 = offset1 * 100 / total;\n          } else {\n            offset0 = 0;\n            offset1 = 0;\n          }\n\n          bar.height = this.yScale(offset0) - this.yScale(offset1);\n          bar.x = 0;\n          bar.y = this.yScale(offset1);\n          bar.offset0 = offset0;\n          bar.offset1 = offset1;\n          value = (offset1 - offset0).toFixed(2) + '%';\n        }\n\n        if (this.colors.scaleType === 'ordinal') {\n          bar.color = this.colors.getColor(label);\n        } else {\n          if (this.type === 'standard') {\n            bar.color = this.colors.getColor(value);\n            bar.gradientStops = this.colors.getLinearGradientStops(value);\n          } else {\n            bar.color = this.colors.getColor(bar.offset1);\n            bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n          }\n        }\n\n        let tooltipLabel = formattedLabel;\n        bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n        if (this.seriesName) {\n          tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n          bar.data.series = this.seriesName;\n          bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n        }\n\n        bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n        return bar;\n      });\n      this.updateDataLabels();\n    }\n\n    updateDataLabels() {\n      if (this.type === 'stacked') {\n        this.barsForDataLabels = [];\n        const section = {};\n        section.series = this.seriesName;\n        const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n        const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n        section.total = totalPositive + totalNegative;\n        section.x = 0;\n        section.y = 0;\n\n        if (section.total > 0) {\n          section.height = this.yScale(totalPositive);\n        } else {\n          section.height = this.yScale(totalNegative);\n        }\n\n        section.width = this.xScale.bandwidth();\n        this.barsForDataLabels.push(section);\n      } else {\n        this.barsForDataLabels = this.series.map(d => {\n          const section = {};\n          section.series = this.seriesName ? this.seriesName : d.label;\n          section.total = d.value;\n          section.x = this.xScale(d.label);\n          section.y = this.yScale(0);\n          section.height = this.yScale(section.total) - this.yScale(0);\n          section.width = this.xScale.bandwidth();\n          return section;\n        });\n      }\n    }\n\n    updateTooltipSettings() {\n      this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n      this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    getLabel(dataItem) {\n      if (dataItem.label) {\n        return dataItem.label;\n      }\n\n      return dataItem.name;\n    }\n\n    trackBy(index, bar) {\n      return bar.label;\n    }\n\n    trackDataLabelBy(index, barLabel) {\n      return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n\n  }\n\n  SeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) {\n    return new (t || SeriesVerticalComponent)();\n  };\n\n  SeriesVerticalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SeriesVerticalComponent,\n    selectors: [[\"g\", \"ngx-charts-series-vertical\", \"\"]],\n    inputs: {\n      type: \"type\",\n      tooltipDisabled: \"tooltipDisabled\",\n      animations: \"animations\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      dims: \"dims\",\n      series: \"series\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      colors: \"colors\",\n      gradient: \"gradient\",\n      activeEntries: \"activeEntries\",\n      seriesName: \"seriesName\",\n      tooltipTemplate: \"tooltipTemplate\",\n      roundEdges: \"roundEdges\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\",\n      dataLabelHeightChanged: \"dataLabelHeightChanged\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c27,\n    decls: 2,\n    vars: 3,\n    consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n    template: function SeriesVerticalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 1, 22, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, \"g\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgForOf, BarComponent, TooltipDirective, ɵngcc1.NgIf, BarLabelComponent];\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return SeriesVerticalComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SeriesHorizontal = /*#__PURE__*/(() => {\n  class SeriesHorizontal {\n    constructor() {\n      this.barsForDataLabels = [];\n      this.type = 'standard';\n      this.tooltipDisabled = false;\n      this.animations = true;\n      this.showDataLabel = false;\n      this.noBarWhenZero = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.dataLabelWidthChanged = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.updateTooltipSettings();\n      const d0 = {\n        [D0Types.positive]: 0,\n        [D0Types.negative]: 0\n      };\n      let d0Type;\n      d0Type = D0Types.positive;\n      let total;\n\n      if (this.type === 'normalized') {\n        total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n      }\n\n      const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n      this.bars = this.series.map((d, index) => {\n        let value = d.value;\n        const label = this.getLabel(d);\n        const formattedLabel = formatLabel(label);\n        const roundEdges = this.roundEdges;\n        d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n        const bar = {\n          value,\n          label,\n          roundEdges,\n          data: d,\n          formattedLabel\n        };\n        bar.height = this.yScale.bandwidth();\n\n        if (this.type === 'standard') {\n          bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n\n          if (value < 0) {\n            bar.x = this.xScale(value);\n          } else {\n            bar.x = this.xScale(xScaleMin);\n          }\n\n          bar.y = this.yScale(label);\n        } else if (this.type === 'stacked') {\n          const offset0 = d0[d0Type];\n          const offset1 = offset0 + value;\n          d0[d0Type] += value;\n          bar.width = this.xScale(offset1) - this.xScale(offset0);\n          bar.x = this.xScale(offset0);\n          bar.y = 0;\n          bar.offset0 = offset0;\n          bar.offset1 = offset1;\n        } else if (this.type === 'normalized') {\n          let offset0 = d0[d0Type];\n          let offset1 = offset0 + value;\n          d0[d0Type] += value;\n\n          if (total > 0) {\n            offset0 = offset0 * 100 / total;\n            offset1 = offset1 * 100 / total;\n          } else {\n            offset0 = 0;\n            offset1 = 0;\n          }\n\n          bar.width = this.xScale(offset1) - this.xScale(offset0);\n          bar.x = this.xScale(offset0);\n          bar.y = 0;\n          bar.offset0 = offset0;\n          bar.offset1 = offset1;\n          value = (offset1 - offset0).toFixed(2) + '%';\n        }\n\n        if (this.colors.scaleType === 'ordinal') {\n          bar.color = this.colors.getColor(label);\n        } else {\n          if (this.type === 'standard') {\n            bar.color = this.colors.getColor(value);\n            bar.gradientStops = this.colors.getLinearGradientStops(value);\n          } else {\n            bar.color = this.colors.getColor(bar.offset1);\n            bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n          }\n        }\n\n        let tooltipLabel = formattedLabel;\n        bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n        if (this.seriesName) {\n          tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n          bar.data.series = this.seriesName;\n          bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n        }\n\n        bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n        return bar;\n      });\n      this.updateDataLabels();\n    }\n\n    updateDataLabels() {\n      if (this.type === 'stacked') {\n        this.barsForDataLabels = [];\n        const section = {};\n        section.series = this.seriesName;\n        const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n        const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n        section.total = totalPositive + totalNegative;\n        section.x = 0;\n        section.y = 0; // if total is positive then we show it on the right, otherwise on the left\n\n        if (section.total > 0) {\n          section.width = this.xScale(totalPositive);\n        } else {\n          section.width = this.xScale(totalNegative);\n        }\n\n        section.height = this.yScale.bandwidth();\n        this.barsForDataLabels.push(section);\n      } else {\n        this.barsForDataLabels = this.series.map(d => {\n          const section = {};\n          section.series = this.seriesName ? this.seriesName : d.label;\n          section.total = d.value;\n          section.x = this.xScale(0);\n          section.y = this.yScale(d.label);\n          section.width = this.xScale(section.total) - this.xScale(0);\n          section.height = this.yScale.bandwidth();\n          return section;\n        });\n      }\n    }\n\n    updateTooltipSettings() {\n      this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n      this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n\n    getLabel(dataItem) {\n      if (dataItem.label) {\n        return dataItem.label;\n      }\n\n      return dataItem.name;\n    }\n\n    trackBy(index, bar) {\n      return bar.label;\n    }\n\n    trackDataLabelBy(index, barLabel) {\n      return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n\n    click(data) {\n      this.select.emit(data);\n    }\n\n  }\n\n  SeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) {\n    return new (t || SeriesHorizontal)();\n  };\n\n  SeriesHorizontal.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SeriesHorizontal,\n    selectors: [[\"g\", \"ngx-charts-series-horizontal\", \"\"]],\n    inputs: {\n      type: \"type\",\n      tooltipDisabled: \"tooltipDisabled\",\n      animations: \"animations\",\n      showDataLabel: \"showDataLabel\",\n      noBarWhenZero: \"noBarWhenZero\",\n      dims: \"dims\",\n      series: \"series\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      colors: \"colors\",\n      gradient: \"gradient\",\n      activeEntries: \"activeEntries\",\n      seriesName: \"seriesName\",\n      tooltipTemplate: \"tooltipTemplate\",\n      roundEdges: \"roundEdges\",\n      dataLabelFormatting: \"dataLabelFormatting\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\",\n      dataLabelWidthChanged: \"dataLabelWidthChanged\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c28,\n    decls: 2,\n    vars: 3,\n    consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n    template: function SeriesHorizontal_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, \"g\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgForOf, BarComponent, TooltipDirective, ɵngcc1.NgIf, BarLabelComponent];\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return SeriesHorizontal;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarLabelComponent = /*#__PURE__*/(() => {\n  class BarLabelComponent {\n    constructor(element) {\n      this.dimensionsChanged = new EventEmitter();\n      this.horizontalPadding = 2;\n      this.verticalPadding = 5;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    getSize() {\n      const h = this.element.getBoundingClientRect().height;\n      const w = this.element.getBoundingClientRect().width;\n      return {\n        height: h,\n        width: w,\n        negative: this.value < 0\n      };\n    }\n\n    ngAfterViewInit() {\n      this.dimensionsChanged.emit(this.getSize());\n    }\n\n    update() {\n      if (this.valueFormatting) {\n        this.formatedValue = this.valueFormatting(this.value);\n      } else {\n        this.formatedValue = formatLabel(this.value);\n      }\n\n      if (this.orientation === 'horizontal') {\n        this.x = this.barX + this.barWidth; // if the value is negative then it's on the left of the x0.\n        // we need to put the data label in front of the bar\n\n        if (this.value < 0) {\n          this.x = this.x - this.horizontalPadding;\n          this.textAnchor = 'end';\n        } else {\n          this.x = this.x + this.horizontalPadding;\n          this.textAnchor = 'start';\n        }\n\n        this.y = this.barY + this.barHeight / 2;\n      } else {\n        // orientation must be \"vertical\"\n        this.x = this.barX + this.barWidth / 2;\n        this.y = this.barY + this.barHeight;\n\n        if (this.value < 0) {\n          this.y = this.y + this.verticalPadding;\n          this.textAnchor = 'end';\n        } else {\n          this.y = this.y - this.verticalPadding;\n          this.textAnchor = 'start';\n        }\n\n        this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n      }\n    }\n\n  }\n\n  BarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) {\n    return new (t || BarLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  BarLabelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarLabelComponent,\n    selectors: [[\"g\", \"ngx-charts-bar-label\", \"\"]],\n    inputs: {\n      value: \"value\",\n      valueFormatting: \"valueFormatting\",\n      barX: \"barX\",\n      barY: \"barY\",\n      barWidth: \"barWidth\",\n      barHeight: \"barHeight\",\n      orientation: \"orientation\"\n    },\n    outputs: {\n      dimensionsChanged: \"dimensionsChanged\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c29,\n    decls: 2,\n    vars: 5,\n    consts: [[\"alignment-baseline\", \"middle\", 1, \"textDataLabel\"]],\n    template: function BarLabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"text\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform)(\"x\", ctx.x)(\"y\", ctx.y);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.formatedValue, \" \");\n      }\n    },\n    styles: [\".textDataLabel[_ngcontent-%COMP%]{font-size:11px}\"],\n    changeDetection: 0\n  });\n  return BarLabelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarChartModule = /*#__PURE__*/(() => {\n  class BarChartModule {}\n\n  BarChartModule.ɵfac = function BarChartModule_Factory(t) {\n    return new (t || BarChartModule)();\n  };\n\n  BarChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: BarChartModule\n  });\n  BarChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return BarChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BarChartModule, {\n    declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n    imports: [ChartCommonModule],\n    exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n  });\n})();\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n  let domain = [];\n\n  if (scaleType === 'linear') {\n    values = values.map(v => Number(v));\n\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nfunction getScale(domain, range, scaleType, roundDomains) {\n  let scale;\n\n  if (scaleType === 'time') {\n    scale = scaleTime().range(range).domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear().range(range).domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\n  }\n\n  return scale;\n}\n\nlet BubbleChartComponent = /*#__PURE__*/(() => {\n  class BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.showGridLines = true;\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.xAxis = true;\n      this.yAxis = true;\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.roundDomains = false;\n      this.maxRadius = 10;\n      this.minRadius = 3;\n      this.schemeType = 'ordinal';\n      this.tooltipDisabled = false;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.scaleType = 'linear';\n      this.margin = [10, 20, 10, 20];\n      this.bubblePadding = [0, 0, 0, 0];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.activeEntries = [];\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.seriesDomain = this.results.map(d => d.name);\n      this.rDomain = this.getRDomain();\n      this.xDomain = this.getXDomain();\n      this.yDomain = this.getYDomain();\n      this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n      const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n      this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n      this.data = this.results;\n      this.minRadius = Math.max(this.minRadius, 1);\n      this.maxRadius = Math.max(this.maxRadius, 1);\n      this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n      this.bubblePadding = [0, 0, 0, 0];\n      this.setScales();\n      this.bubblePadding = this.getBubblePadding();\n      this.setScales();\n      this.legendOptions = this.getLegendOptions();\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = `url(#${this.clipPathId})`;\n    }\n\n    hideCircles() {\n      this.deactivateAll();\n    }\n\n    onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    getBubblePadding() {\n      let yMin = 0;\n      let xMin = 0;\n      let yMax = this.dims.height;\n      let xMax = this.dims.width;\n\n      for (const s of this.data) {\n        for (const d of s.series) {\n          const r = this.rScale(d.r);\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n          xMin = Math.max(r - cx, xMin);\n          yMin = Math.max(r - cy, yMin);\n          yMax = Math.max(cy + r, yMax);\n          xMax = Math.max(cx + r, xMax);\n        }\n      }\n\n      xMax = Math.max(xMax - this.dims.width, 0);\n      yMax = Math.max(yMax - this.dims.height, 0);\n      return [yMin, xMax, yMax, xMin];\n    }\n\n    setScales() {\n      let width = this.dims.width;\n\n      if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n        width = width - this.bubblePadding[1];\n      }\n\n      let height = this.dims.height;\n\n      if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n        height = height - this.bubblePadding[2];\n      }\n\n      this.xScale = this.getXScale(this.xDomain, width);\n      this.yScale = this.getYScale(this.yDomain, height);\n    }\n\n    getYScale(domain, height) {\n      return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n\n    getXScale(domain, width) {\n      return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n\n    getRScale(domain, range) {\n      const scale = scaleLinear().range(range).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        position: this.legendPosition,\n        title: undefined\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.rDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    getXDomain() {\n      const values = [];\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          if (!values.includes(d.x)) {\n            values.push(d.x);\n          }\n        }\n      }\n\n      this.xScaleType = getScaleType(values);\n      return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n\n    getYDomain() {\n      const values = [];\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          if (!values.includes(d.y)) {\n            values.push(d.y);\n          }\n        }\n      }\n\n      this.yScaleType = getScaleType(values);\n      return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n\n    getRDomain() {\n      let min = Infinity;\n      let max = -Infinity;\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          const value = Number(d.r) || 1;\n          min = Math.min(min, value);\n          max = Math.max(max, value);\n        }\n      }\n\n      return [min, max];\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    deactivateAll() {\n      this.activeEntries = [...this.activeEntries];\n\n      for (const entry of this.activeEntries) {\n        this.deactivate.emit({\n          value: entry,\n          entries: []\n        });\n      }\n\n      this.activeEntries = [];\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n  }\n\n  BubbleChartComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵBubbleChartComponent_BaseFactory;\n    return function BubbleChartComponent_Factory(t) {\n      return (ɵBubbleChartComponent_BaseFactory || (ɵBubbleChartComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BubbleChartComponent)))(t || BubbleChartComponent);\n    };\n  }();\n\n  BubbleChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BubbleChartComponent,\n    selectors: [[\"ngx-charts-bubble-chart\"]],\n    contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function BubbleChartComponent_mouseleave_HostBindingHandler() {\n          return ctx.hideCircles();\n        });\n      }\n    },\n    inputs: {\n      showGridLines: \"showGridLines\",\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      roundDomains: \"roundDomains\",\n      maxRadius: \"maxRadius\",\n      minRadius: \"minRadius\",\n      schemeType: \"schemeType\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      autoScale: \"autoScale\",\n      xScaleMin: \"xScaleMin\",\n      xScaleMax: \"xScaleMax\",\n      yScaleMin: \"yScaleMin\",\n      yScaleMax: \"yScaleMax\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 10,\n    vars: 20,\n    consts: [[3, \"view\", \"showLegend\", \"activeEntries\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bubble-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"x\", \"0\", \"y\", \"0\", 1, \"bubble-chart-area\", 2, \"fill\", \"rgb(255, 0, 0)\", \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mouseenter\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-bubble-series\", \"\", 3, \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"xAxisLabel\", \"yAxisLabel\", \"colors\", \"data\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n    template: function BubbleChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event);\n        })(\"legendLabelDeactivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n        ɵngcc0.ɵɵelement(3, \"rect\");\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵelementStart(7, \"rect\", 4);\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() {\n          return ctx.deactivateAll();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(8, \"g\");\n        ɵngcc0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 13, \"g\", 5);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"activeEntries\", ctx.activeEntries)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, BubbleSeriesComponent];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BubbleChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BubbleSeriesComponent = /*#__PURE__*/(() => {\n  class BubbleSeriesComponent {\n    constructor() {\n      this.tooltipDisabled = false;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.circles = this.getCircles();\n    }\n\n    getCircles() {\n      const seriesName = this.data.name;\n      return this.data.series.map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n          const isActive = !this.activeEntries.length ? true : this.isActive({\n            name: seriesName\n          });\n          const opacity = isActive ? 1 : 0.3;\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      }).filter(circle => circle !== undefined);\n    }\n\n    getTooltipText(circle) {\n      const hasRadius = typeof circle.r !== 'undefined';\n      const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n      const hasSeriesName = circle.seriesName && circle.seriesName.length;\n      const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n      const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n      const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n      const x = formatLabel(circle.x);\n      const y = formatLabel(circle.y);\n      const name = hasSeriesName && hasTooltipLabel ? `${circle.seriesName} • ${circle.tooltipLabel}` : circle.seriesName + circle.tooltipLabel;\n      const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n      return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n\n    isVisible(circle) {\n      if (this.activeEntries.length > 0) {\n        return this.isActive({\n          name: circle.seriesName\n        });\n      }\n\n      return circle.opacity !== 0;\n    }\n\n    activateCircle(circle) {\n      circle.barVisible = true;\n      this.activate.emit({\n        name: this.data.name\n      });\n    }\n\n    deactivateCircle(circle) {\n      circle.barVisible = false;\n      this.deactivate.emit({\n        name: this.data.name\n      });\n    }\n\n    trackBy(index, circle) {\n      return `${circle.data.series} ${circle.data.name}`;\n    }\n\n  }\n\n  BubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) {\n    return new (t || BubbleSeriesComponent)();\n  };\n\n  BubbleSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BubbleSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-bubble-series\", \"\"]],\n    inputs: {\n      tooltipDisabled: \"tooltipDisabled\",\n      data: \"data\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      rScale: \"rScale\",\n      xScaleType: \"xScaleType\",\n      yScaleType: \"yScaleType\",\n      colors: \"colors\",\n      visibleValue: \"visibleValue\",\n      activeEntries: \"activeEntries\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c30,\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n    template: function BubbleSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.circles)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, CircleComponent, TooltipDirective],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), animate(250, style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return BubbleSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BubbleChartModule = /*#__PURE__*/(() => {\n  class BubbleChartModule {}\n\n  BubbleChartModule.ɵfac = function BubbleChartModule_Factory(t) {\n    return new (t || BubbleChartModule)();\n  };\n\n  BubbleChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: BubbleChartModule\n  });\n  BubbleChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return BubbleChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BubbleChartModule, {\n    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [BubbleChartComponent, BubbleSeriesComponent]\n  });\n})();\n\nlet HeatMapCellComponent = /*#__PURE__*/(() => {\n  class HeatMapCellComponent {\n    constructor(element) {\n      this.gradient = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      this.transform = `translate(${this.x} , ${this.y})`;\n      this.startOpacity = 0.3;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      this.gradientStops = this.getGradientStops();\n\n      if (this.animations) {\n        this.loadAnimation();\n      }\n    }\n\n    getGradientStops() {\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }];\n    }\n\n    loadAnimation() {\n      const node = select(this.element).select('.cell');\n      node.attr('opacity', 0);\n      this.animateToCurrentForm();\n    }\n\n    animateToCurrentForm() {\n      const node = select(this.element).select('.cell');\n      node.transition().duration(750).attr('opacity', 1);\n    }\n\n    onClick() {\n      this.select.emit(this.data);\n    }\n\n    onMouseEnter() {\n      this.activate.emit(this.data);\n    }\n\n    onMouseLeave() {\n      this.deactivate.emit(this.data);\n    }\n\n  }\n\n  HeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) {\n    return new (t || HeatMapCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  HeatMapCellComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: HeatMapCellComponent,\n    selectors: [[\"g\", \"ngx-charts-heat-map-cell\", \"\"]],\n    hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function HeatMapCellComponent_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function HeatMapCellComponent_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        });\n      }\n    },\n    inputs: {\n      gradient: \"gradient\",\n      animations: \"animations\",\n      fill: \"fill\",\n      x: \"x\",\n      y: \"y\",\n      width: \"width\",\n      height: \"height\",\n      data: \"data\",\n      label: \"label\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c31,\n    decls: 3,\n    vars: 5,\n    consts: [[1, \"cell\"], [4, \"ngIf\"], [\"rx\", \"3\", 1, \"cell\", 2, \"cursor\", \"pointer\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"]],\n    template: function HeatMapCellComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 2, \"defs\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"rect\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function HeatMapCellComponent_Template__svg_rect_click_2_listener() {\n          return ctx.onClick();\n        });\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height);\n      }\n    },\n    directives: [ɵngcc1.NgIf, SvgLinearGradientComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return HeatMapCellComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HeatCellSeriesComponent = /*#__PURE__*/(() => {\n  class HeatCellSeriesComponent {\n    constructor() {\n      this.tooltipDisabled = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n    }\n\n    ngOnInit() {\n      if (!this.tooltipText) {\n        this.tooltipText = this.getTooltipText;\n      }\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.cells = this.getCells();\n    }\n\n    getCells() {\n      const cells = [];\n      this.data.map(row => {\n        row.series.map(cell => {\n          const value = cell.value;\n          cell.series = row.name;\n          cells.push({\n            row,\n            cell,\n            x: this.xScale(row.name),\n            y: this.yScale(cell.name),\n            width: this.xScale.bandwidth(),\n            height: this.yScale.bandwidth(),\n            fill: this.colors.getColor(value),\n            data: value,\n            label: formatLabel(cell.name),\n            series: row.name\n          });\n        });\n      });\n      return cells;\n    }\n\n    getTooltipText({\n      label,\n      data,\n      series\n    }) {\n      return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n\n    trackBy(index, item) {\n      return item.tooltipText;\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n  }\n\n  HeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) {\n    return new (t || HeatCellSeriesComponent)();\n  };\n\n  HeatCellSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: HeatCellSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-heat-map-cell-series\", \"\"]],\n    inputs: {\n      tooltipDisabled: \"tooltipDisabled\",\n      animations: \"animations\",\n      tooltipText: \"tooltipText\",\n      data: \"data\",\n      colors: \"colors\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      gradient: \"gradient\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c32,\n    decls: 1,\n    vars: 2,\n    consts: [[\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n    template: function HeatCellSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, HeatMapCellComponent, TooltipDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return HeatCellSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HeatMapComponent = /*#__PURE__*/(() => {\n  class HeatMapComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.innerPadding = 8;\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.tooltipDisabled = false;\n      this.activeEntries = [];\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.scaleType = 'linear';\n    }\n\n    update() {\n      super.update();\n      this.formatDates();\n      this.xDomain = this.getXDomain();\n      this.yDomain = this.getYDomain();\n      this.valueDomain = this.getValueDomain();\n      this.scaleType = getScaleType(this.valueDomain, false);\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.scaleType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.scaleType === 'linear') {\n        let min = this.min;\n        let max = this.max;\n\n        if (!this.min) {\n          min = Math.min(0, ...this.valueDomain);\n        }\n\n        if (!this.max) {\n          max = Math.max(...this.valueDomain);\n        }\n\n        this.valueDomain = [min, max];\n      }\n\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n      this.rects = this.getRects();\n    }\n\n    getXDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        if (!domain.includes(group.name)) {\n          domain.push(group.name);\n        }\n      }\n\n      return domain;\n    }\n\n    getYDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.name)) {\n            domain.push(d.name);\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getValueDomain() {\n      const domain = [];\n\n      for (const group of this.results) {\n        for (const d of group.series) {\n          if (!domain.includes(d.value)) {\n            domain.push(d.value);\n          }\n        }\n      }\n\n      return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n\n\n    getDimension(value, index = 0, N, L) {\n      if (typeof value === 'string') {\n        value = value.replace('[', '').replace(']', '').replace('px', '') // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n        if (value.includes(',')) {\n          value = value.split(',');\n        }\n      }\n\n      if (Array.isArray(value) && typeof index === 'number') {\n        return this.getDimension(value[index], null, N, L);\n      }\n\n      if (typeof value === 'string' && value.includes('%')) {\n        return +value.replace('%', '') / 100;\n      }\n\n      return N / (L / +value + 1);\n    }\n\n    getXScale() {\n      const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n      return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n\n    getYScale() {\n      const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n      return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n\n    getRects() {\n      const rects = [];\n      this.xDomain.map(xVal => {\n        this.yDomain.map(yVal => {\n          rects.push({\n            x: this.xScale(xVal),\n            y: this.yScale(yVal),\n            rx: 3,\n            width: this.xScale.bandwidth(),\n            height: this.yScale.bandwidth(),\n            fill: 'rgba(200,200,200,0.03)'\n          });\n        });\n      });\n      return rects;\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n\n    getLegendOptions() {\n      return {\n        scaleType: this.scaleType,\n        domain: this.valueDomain,\n        colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n        title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n        position: this.legendPosition\n      };\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      const items = this.results.map(g => g.series).flat().filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = [...items];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(event, group, fromLegend = false) {\n      const item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(i => {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  HeatMapComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵHeatMapComponent_BaseFactory;\n    return function HeatMapComponent_Factory(t) {\n      return (ɵHeatMapComponent_BaseFactory || (ɵHeatMapComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(HeatMapComponent)))(t || HeatMapComponent);\n    };\n  }();\n\n  HeatMapComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: HeatMapComponent,\n    selectors: [[\"ngx-charts-heat-map\"]],\n    contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      innerPadding: \"innerPadding\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      tooltipDisabled: \"tooltipDisabled\",\n      activeEntries: \"activeEntries\",\n      legend: \"legend\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      gradient: \"gradient\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      tooltipText: \"tooltipText\",\n      min: \"min\",\n      max: \"max\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 20,\n    consts: [[3, \"view\", \"showLegend\", \"animations\", \"legendOptions\", \"legendLabelClick\"], [1, \"heat-map\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-heat-map-cell-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n    template: function HeatMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, \"rect\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"g\", 5);\n        ɵngcc0.ɵɵlistener(\"select\", function HeatMapComponent_Template__svg_g_select_5_listener($event) {\n          return ctx.onClick($event);\n        })(\"activate\", function HeatMapComponent_Template__svg_g_activate_5_listener($event) {\n          return ctx.onActivate($event, undefined);\n        })(\"deactivate\", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) {\n          return ctx.onDeactivate($event, undefined);\n        });\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"animations\", ctx.animations)(\"legendOptions\", ctx.legendOptions);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.rects);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"data\", ctx.results)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n      }\n    },\n    directives: [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, HeatCellSeriesComponent],\n    styles: [_c24],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return HeatMapComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HeatMapModule = /*#__PURE__*/(() => {\n  class HeatMapModule {}\n\n  HeatMapModule.ɵfac = function HeatMapModule_Factory(t) {\n    return new (t || HeatMapModule)();\n  };\n\n  HeatMapModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: HeatMapModule\n  });\n  HeatMapModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return HeatMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HeatMapModule, {\n    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n    imports: [ChartCommonModule],\n    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n  });\n})();\n\nlet LineComponent = /*#__PURE__*/(() => {\n  class LineComponent {\n    constructor(element) {\n      this.element = element;\n      this.fill = 'none';\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.initialized = false;\n    }\n\n    ngOnChanges(changes) {\n      if (!this.initialized) {\n        this.initialized = true;\n        this.initialPath = this.path;\n      } else {\n        this.updatePathEl();\n      }\n    }\n\n    updatePathEl() {\n      const node = select(this.element.nativeElement).select('.line');\n\n      if (this.animations) {\n        node.transition().duration(750).attr('d', this.path);\n      } else {\n        node.attr('d', this.path);\n      }\n    }\n\n  }\n\n  LineComponent.ɵfac = function LineComponent_Factory(t) {\n    return new (t || LineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  LineComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LineComponent,\n    selectors: [[\"g\", \"ngx-charts-line\", \"\"]],\n    inputs: {\n      fill: \"fill\",\n      animations: \"animations\",\n      path: \"path\",\n      stroke: \"stroke\",\n      data: \"data\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c34,\n    decls: 1,\n    vars: 4,\n    consts: [[\"stroke-width\", \"1.5px\", 1, \"line\"]],\n    template: function LineComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelement(0, \"path\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n        ɵngcc0.ɵɵattribute(\"d\", ctx.initialPath)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke);\n      }\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':enter', [style({\n        strokeDasharray: 2000,\n        strokeDashoffset: 2000\n      }), animate(1000, style({\n        strokeDashoffset: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return LineComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LineChartComponent = /*#__PURE__*/(() => {\n  class LineChartComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.showGridLines = true;\n      this.curve = curveLinear;\n      this.activeEntries = [];\n      this.trimXAxisTicks = true;\n      this.trimYAxisTicks = true;\n      this.rotateXAxisTicks = true;\n      this.maxXAxisTickLength = 16;\n      this.maxYAxisTickLength = 16;\n      this.roundDomains = false;\n      this.tooltipDisabled = false;\n      this.showRefLines = false;\n      this.showRefLabels = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n      this.timelineHeight = 50;\n      this.timelinePadding = 10;\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = `url(#${this.clipPathId})`;\n    }\n\n    updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n      }\n    }\n\n    getXDomain() {\n      let values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      let domain = [];\n\n      if (this.scaleType === 'linear') {\n        values = values.map(v => Number(v));\n      }\n\n      let min;\n      let max;\n\n      if (this.scaleType === 'time' || this.scaleType === 'linear') {\n        min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n        max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n      }\n\n      if (this.scaleType === 'time') {\n        domain = [new Date(min), new Date(max)];\n        this.xSet = [...values].sort((a, b) => {\n          const aDate = a.getTime();\n          const bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        domain = [min, max]; // Use compare function to sort numbers numerically\n\n        this.xSet = [...values].sort((a, b) => a - b);\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n\n    getYDomain() {\n      const domain = [];\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          if (domain.indexOf(d.value) < 0) {\n            domain.push(d.value);\n          }\n\n          if (d.min !== undefined) {\n            this.hasRange = true;\n\n            if (domain.indexOf(d.min) < 0) {\n              domain.push(d.min);\n            }\n          }\n\n          if (d.max !== undefined) {\n            this.hasRange = true;\n\n            if (domain.indexOf(d.max) < 0) {\n              domain.push(d.max);\n            }\n          }\n        }\n      }\n\n      const values = [...domain];\n\n      if (!this.autoScale) {\n        values.push(0);\n      }\n\n      const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n      const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n      return [min, max];\n    }\n\n    getSeriesDomain() {\n      return this.results.map(d => d.name);\n    }\n\n    getXScale(domain, width) {\n      let scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime().range([0, width]).domain(domain);\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear().range([0, width]).domain(domain);\n\n        if (this.roundDomains) {\n          scale = scale.nice();\n        }\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n      }\n\n      return scale;\n    }\n\n    getYScale(domain, height) {\n      const scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n\n    updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n\n    hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n    setColors() {\n      let domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      const opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(item) {\n      this.deactivateAll();\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    deactivateAll() {\n      this.activeEntries = [...this.activeEntries];\n\n      for (const entry of this.activeEntries) {\n        this.deactivate.emit({\n          value: entry,\n          entries: []\n        });\n      }\n\n      this.activeEntries = [];\n    }\n\n  }\n\n  LineChartComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵLineChartComponent_BaseFactory;\n    return function LineChartComponent_Factory(t) {\n      return (ɵLineChartComponent_BaseFactory || (ɵLineChartComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(LineChartComponent)))(t || LineChartComponent);\n    };\n  }();\n\n  LineChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LineChartComponent,\n    selectors: [[\"ngx-charts-line-chart\"]],\n    contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n      }\n    },\n    hostBindings: function LineChartComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function LineChartComponent_mouseleave_HostBindingHandler() {\n          return ctx.hideCircles();\n        });\n      }\n    },\n    inputs: {\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      showGridLines: \"showGridLines\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\",\n      trimXAxisTicks: \"trimXAxisTicks\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      rotateXAxisTicks: \"rotateXAxisTicks\",\n      maxXAxisTickLength: \"maxXAxisTickLength\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      roundDomains: \"roundDomains\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showRefLines: \"showRefLines\",\n      showRefLabels: \"showRefLabels\",\n      legend: \"legend\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      autoScale: \"autoScale\",\n      timeline: \"timeline\",\n      gradient: \"gradient\",\n      schemeType: \"schemeType\",\n      rangeFillOpacity: \"rangeFillOpacity\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\",\n      xAxisTicks: \"xAxisTicks\",\n      yAxisTicks: \"yAxisTicks\",\n      referenceLines: \"referenceLines\",\n      xScaleMin: \"xScaleMin\",\n      xScaleMax: \"xScaleMax\",\n      yScaleMin: \"yScaleMin\",\n      yScaleMax: \"yScaleMax\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 11,\n    vars: 20,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"line-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"hasRange\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"curve\", \"hasRange\", \"animations\"]],\n    template: function LineChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event);\n        })(\"legendLabelDeactivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n        ɵngcc0.ɵɵelement(3, \"rect\");\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 12, \"g\", 3);\n        ɵngcc0.ɵɵelementStart(7, \"g\");\n        ɵngcc0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 11, \"g\", 4);\n        ɵngcc0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n    },\n    styles: [_c24],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return LineChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LineSeriesComponent = /*#__PURE__*/(() => {\n  class LineSeriesComponent {\n    constructor() {\n      this.animations = true;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.updateGradients();\n      const data = this.sortData(this.data.series);\n      const lineGen = this.getLineGenerator();\n      this.path = lineGen(data) || '';\n      const areaGen = this.getAreaGenerator();\n      this.areaPath = areaGen(data) || '';\n\n      if (this.hasRange) {\n        const range = this.getRangeGenerator();\n        this.outerPath = range(data) || '';\n      }\n\n      if (this.hasGradient) {\n        this.stroke = this.gradientUrl;\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        const min = Math.min(...values);\n\n        if (max === min) {\n          this.stroke = this.colors.getColor(max);\n        }\n      } else {\n        this.stroke = this.colors.getColor(this.data.name);\n      }\n    }\n\n    getLineGenerator() {\n      return line().x(d => {\n        const label = d.name;\n        let value;\n\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n\n        return value;\n      }).y(d => this.yScale(d.value)).curve(this.curve);\n    }\n\n    getRangeGenerator() {\n      return area().x(d => {\n        const label = d.name;\n        let value;\n\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n\n        return value;\n      }).y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value)).y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value)).curve(this.curve);\n    }\n\n    getAreaGenerator() {\n      const xProperty = d => {\n        const label = d.name;\n        return this.xScale(label);\n      };\n\n      return area().x(xProperty).y0(() => this.yScale.range()[0]).y1(d => this.yScale(d.value)).curve(this.curve);\n    }\n\n    sortData(data) {\n      if (this.scaleType === 'linear') {\n        data = sortLinear(data, 'name');\n      } else if (this.scaleType === 'time') {\n        data = sortByTime(data, 'name');\n      } else {\n        data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n      }\n\n      return data;\n    }\n\n    updateGradients() {\n      if (this.colors.scaleType === 'linear') {\n        this.hasGradient = true;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        const min = Math.min(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        this.areaGradientStops = this.colors.getLinearGradientStops(max);\n      } else {\n        this.hasGradient = false;\n        this.gradientStops = undefined;\n        this.areaGradientStops = undefined;\n      }\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n\n    isInactive(entry) {\n      if (!this.activeEntries || this.activeEntries.length === 0) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item === undefined;\n    }\n\n  }\n\n  LineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) {\n    return new (t || LineSeriesComponent)();\n  };\n\n  LineSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LineSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-line-series\", \"\"]],\n    inputs: {\n      animations: \"animations\",\n      data: \"data\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      colors: \"colors\",\n      scaleType: \"scaleType\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\",\n      rangeFillOpacity: \"rangeFillOpacity\",\n      hasRange: \"hasRange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c35,\n    decls: 6,\n    vars: 22,\n    consts: [[\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-area\", \"\", 1, \"line-highlight\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"startOpacity\", \"gradient\", \"stops\", \"animations\"], [\"ngx-charts-line\", \"\", 1, \"line-series\", 3, \"data\", \"path\", \"stroke\", \"animations\"], [\"ngx-charts-area\", \"\", \"class\", \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"active\", \"inactive\", \"opacity\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"], [\"ngx-charts-area\", \"\", 1, \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"animations\"]],\n    template: function LineSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n        ɵngcc0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 2, \"g\", 0);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"g\", 1)(4, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n        ɵngcc0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.areaPath)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))(\"opacity\", 0.25)(\"startOpacity\", 0)(\"gradient\", true)(\"stops\", ctx.areaGradientStops)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n        ɵngcc0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"stroke\", ctx.stroke)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasRange);\n      }\n    },\n    directives: [ɵngcc1.NgIf, SvgLinearGradientComponent, AreaComponent, LineComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LineSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LineChartModule = /*#__PURE__*/(() => {\n  class LineChartModule {}\n\n  LineChartModule.ɵfac = function LineChartModule_Factory(t) {\n    return new (t || LineChartModule)();\n  };\n\n  LineChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LineChartModule\n  });\n  LineChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return LineChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LineChartModule, {\n    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n  });\n})();\n\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nconst twoPI = 2 * Math.PI;\nlet PolarChartComponent = /*#__PURE__*/(() => {\n  class PolarChartComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.showGridLines = true;\n      this.curve = curveCardinalClosed;\n      this.activeEntries = [];\n      this.rangeFillOpacity = 0.15;\n      this.trimYAxisTicks = true;\n      this.maxYAxisTickLength = 16;\n      this.roundDomains = false;\n      this.tooltipDisabled = false;\n      this.showSeriesOnHover = true;\n      this.gradient = false;\n      this.yAxisMinScale = 0;\n      this.labelTrim = true;\n      this.labelTrimSize = 10;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [10, 20, 10, 20];\n      this.xAxisHeight = 0;\n      this.yAxisWidth = 0;\n    }\n\n    update() {\n      super.update();\n      this.setDims();\n      this.setScales();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.setTicks();\n    }\n\n    setDims() {\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      const halfWidth = Math.floor(this.dims.width / 2);\n      const halfHeight = Math.floor(this.dims.height / 2);\n      const outerRadius = this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5);\n      const yOffset = Math.max(0, halfHeight - outerRadius);\n      this.yAxisDims = Object.assign(Object.assign({}, this.dims), {\n        width: halfWidth\n      });\n      this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n      this.transformYAxis = `translate(0, ${yOffset})`;\n      this.labelOffset = this.dims.height + 40;\n      this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n\n    setScales() {\n      const xValues = this.getXValues();\n      this.scaleType = getScaleType(xValues);\n      this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, twoPI);\n      this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n      this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n\n    setTicks() {\n      let tickFormat;\n\n      if (this.xAxisTickFormatting) {\n        tickFormat = this.xAxisTickFormatting;\n      } else if (this.xScale.tickFormat) {\n        tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n      } else {\n        tickFormat = d => {\n          if (isDate(d)) {\n            return d.toLocaleDateString();\n          }\n\n          return d.toLocaleString();\n        };\n      }\n\n      const outerRadius = this.outerRadius;\n      const s = 1.1;\n      this.thetaTicks = this.xDomain.map(d => {\n        const startAngle = this.xScale(d);\n        const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n        const label = tickFormat(d);\n        const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n        const pos = [dd, s * startPos[1]];\n        return {\n          innerRadius: 0,\n          outerRadius,\n          startAngle,\n          endAngle: startAngle,\n          value: outerRadius,\n          label,\n          startPos,\n          pos\n        };\n      });\n      const minDistance = 10;\n      /* from pie chart, abstract out -*/\n\n      for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n        const a = this.thetaTicks[i];\n\n        for (let j = i + 1; j < this.thetaTicks.length; j++) {\n          const b = this.thetaTicks[j]; // if they're on the same side\n\n          if (b.pos[0] * a.pos[0] > 0) {\n            // if they're overlapping\n            const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n            if (o > 0) {\n              // push the second up or down\n              b.pos[1] += Math.sign(b.pos[0]) * o;\n            }\n          }\n        }\n      }\n\n      this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n\n    getXValues() {\n      const values = [];\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          if (!values.includes(d.name)) {\n            values.push(d.name);\n          }\n        }\n      }\n\n      return values;\n    }\n\n    getXDomain(values = this.getXValues()) {\n      if (this.scaleType === 'time') {\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        return [min, max];\n      } else if (this.scaleType === 'linear') {\n        values = values.map(v => Number(v));\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        return [min, max];\n      }\n\n      return values;\n    }\n\n    getYValues() {\n      const domain = [];\n\n      for (const results of this.results) {\n        for (const d of results.series) {\n          if (domain.indexOf(d.value) < 0) {\n            domain.push(d.value);\n          }\n\n          if (d.min !== undefined) {\n            if (domain.indexOf(d.min) < 0) {\n              domain.push(d.min);\n            }\n          }\n\n          if (d.max !== undefined) {\n            if (domain.indexOf(d.max) < 0) {\n              domain.push(d.max);\n            }\n          }\n        }\n      }\n\n      return domain;\n    }\n\n    getYDomain(domain = this.getYValues()) {\n      let min = Math.min(...domain);\n      const max = Math.max(this.yAxisMinScale, ...domain);\n      min = Math.max(0, min);\n\n      if (!this.autoScale) {\n        min = Math.min(0, min);\n      }\n\n      return [min, max];\n    }\n\n    getSeriesDomain() {\n      return this.results.map(d => d.name);\n    }\n\n    getXScale(domain, width) {\n      switch (this.scaleType) {\n        case 'time':\n          return scaleTime().range([0, width]).domain(domain);\n\n        case 'linear':\n          const scale = scaleLinear().range([0, width]).domain(domain);\n          return this.roundDomains ? scale.nice() : scale;\n\n        default:\n          return scalePoint().range([0, width - twoPI / domain.length]).padding(0).domain(domain);\n      }\n    }\n\n    getYScale(domain, height) {\n      const scale = scaleLinear().range([0, height]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n\n    onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n\n    setColors() {\n      const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      if (this.schemeType === 'ordinal') {\n        return {\n          scaleType: this.schemeType,\n          colors: this.colors,\n          domain: this.seriesDomain,\n          title: this.legendTitle,\n          position: this.legendPosition\n        };\n      }\n\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors.scale,\n        domain: this.yDomain,\n        title: undefined,\n        position: this.legendPosition\n      };\n    }\n\n    updateYAxisWidth({\n      width\n    }) {\n      this.yAxisWidth = width;\n      this.update();\n    }\n\n    updateXAxisHeight({\n      height\n    }) {\n      this.xAxisHeight = height;\n      this.update();\n    }\n\n    onActivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    deactivateAll() {\n      this.activeEntries = [...this.activeEntries];\n\n      for (const entry of this.activeEntries) {\n        this.deactivate.emit({\n          value: entry,\n          entries: []\n        });\n      }\n\n      this.activeEntries = [];\n    }\n\n    trackBy(index, item) {\n      return item.name;\n    }\n\n  }\n\n  PolarChartComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵPolarChartComponent_BaseFactory;\n    return function PolarChartComponent_Factory(t) {\n      return (ɵPolarChartComponent_BaseFactory || (ɵPolarChartComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PolarChartComponent)))(t || PolarChartComponent);\n    };\n  }();\n\n  PolarChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PolarChartComponent,\n    selectors: [[\"ngx-charts-polar-chart\"]],\n    contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      showGridLines: \"showGridLines\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\",\n      rangeFillOpacity: \"rangeFillOpacity\",\n      trimYAxisTicks: \"trimYAxisTicks\",\n      maxYAxisTickLength: \"maxYAxisTickLength\",\n      roundDomains: \"roundDomains\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showSeriesOnHover: \"showSeriesOnHover\",\n      gradient: \"gradient\",\n      yAxisMinScale: \"yAxisMinScale\",\n      labelTrim: \"labelTrim\",\n      labelTrimSize: \"labelTrimSize\",\n      legend: \"legend\",\n      xAxis: \"xAxis\",\n      yAxis: \"yAxis\",\n      showXAxisLabel: \"showXAxisLabel\",\n      showYAxisLabel: \"showYAxisLabel\",\n      xAxisLabel: \"xAxisLabel\",\n      yAxisLabel: \"yAxisLabel\",\n      autoScale: \"autoScale\",\n      schemeType: \"schemeType\",\n      xAxisTickFormatting: \"xAxisTickFormatting\",\n      yAxisTickFormatting: \"yAxisTickFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 10,\n    vars: 18,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"polar-chart\", \"chart\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"polar-chart-background\"], [4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"gridline-path radial-gridline-path\", \"cx\", \"0\", \"cy\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"gridline-path\", \"radial-gridline-path\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"], [\"ngx-charts-polar-series\", \"\", 3, \"gradient\", \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n    template: function PolarChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event);\n        })(\"legendLabelDeactivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1)(2, \"g\");\n        ɵngcc0.ɵɵelement(3, \"circle\", 2);\n        ɵngcc0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 9, \"g\", 4);\n        ɵngcc0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, \"g\", 5);\n        ɵngcc0.ɵɵelementStart(8, \"g\");\n        ɵngcc0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 13, \"g\", 6);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(15, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transformPlot);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"r\", ctx.outerRadius);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showGridLines);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis && ctx.showXAxisLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transformPlot);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent];\n    },\n    styles: [_c24, _c39, \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{fill:none;stroke-dasharray:10 10}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return PolarChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PolarSeriesComponent = /*#__PURE__*/(() => {\n  class PolarSeriesComponent {\n    constructor() {\n      this.tooltipDisabled = false;\n      this.gradient = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.circleRadius = 3;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.updateGradients();\n      const line = this.getLineGenerator();\n      const data = this.sortData(this.data.series);\n      const seriesName = this.data.name;\n      const linearScaleType = this.colors.scaleType === 'linear';\n      const min = this.yScale.domain()[0];\n      this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n      this.path = line(data) || '';\n      this.circles = data.map(d => {\n        const a = this.getAngle(d);\n        const r = this.getRadius(d);\n        const value = d.value;\n        const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n        const cData = Object.assign({}, d, {\n          series: seriesName,\n          value,\n          name: d.name\n        });\n        return {\n          data: cData,\n          cx: r * Math.sin(a),\n          cy: -r * Math.cos(a),\n          value,\n          color,\n          label: d.name\n        };\n      });\n      this.active = this.isActive(this.data);\n      this.inactive = this.isInactive(this.data);\n\n      this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n\n    getAngle(d) {\n      const label = d.name;\n\n      if (this.scaleType === 'time') {\n        return this.xScale(label);\n      } else if (this.scaleType === 'linear') {\n        return this.xScale(Number(label));\n      }\n\n      return this.xScale(label);\n    }\n\n    getRadius(d) {\n      return this.yScale(d.value);\n    }\n\n    getLineGenerator() {\n      return lineRadial().angle(d => this.getAngle(d)).radius(d => this.getRadius(d)).curve(this.curve);\n    }\n\n    sortData(data) {\n      if (this.scaleType === 'linear') {\n        return sortLinear(data, 'name');\n      } else if (this.scaleType === 'time') {\n        return sortByTime(data, 'name');\n      }\n\n      return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n\n    isInactive(entry) {\n      if (!this.activeEntries || this.activeEntries.length === 0) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name;\n      });\n      return item === undefined;\n    }\n\n    defaultTooltipText({\n      label,\n      value\n    }) {\n      return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n\n    updateGradients() {\n      this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n      if (!this.hasGradient) {\n        return;\n      }\n\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n\n      if (this.colors.scaleType === 'linear') {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        const min = Math.min(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        this.gradientStops = undefined;\n      }\n    }\n\n  }\n\n  PolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) {\n    return new (t || PolarSeriesComponent)();\n  };\n\n  PolarSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PolarSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-polar-series\", \"\"]],\n    inputs: {\n      tooltipDisabled: \"tooltipDisabled\",\n      gradient: \"gradient\",\n      animations: \"animations\",\n      tooltipText: \"tooltipText\",\n      name: \"name\",\n      data: \"data\",\n      xScale: \"xScale\",\n      yScale: \"yScale\",\n      colors: \"colors\",\n      scaleType: \"scaleType\",\n      curve: \"curve\",\n      activeEntries: \"activeEntries\",\n      rangeFillOpacity: \"rangeFillOpacity\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c36,\n    decls: 5,\n    vars: 11,\n    consts: [[1, \"polar-charts-series\"], [\"ngx-charts-svg-radial-gradient\", \"\", \"orientation\", \"vertical\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-line\", \"\", 1, \"polar-series-path\", 3, \"path\", \"stroke\", \"fill\", \"animations\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", \"tooltipType\", \"tooltip\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-radial-gradient\", \"\", \"orientation\", \"vertical\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", \"tooltipType\", \"tooltip\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n    template: function PolarSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", 0)(1, \"defs\");\n        ɵngcc0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 11, \"g\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.active)(\"inactive\", ctx.inactive);\n        ɵngcc0.ɵɵproperty(\"path\", ctx.path)(\"stroke\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵattribute(\"fill-opacity\", ctx.rangeFillOpacity);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.circles);\n      }\n    },\n    directives: [ɵngcc1.NgIf, SvgRadialGradientComponent, LineComponent, ɵngcc1.NgForOf, CircleComponent, TooltipDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PolarSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AdvancedPieChartComponent = /*#__PURE__*/(() => {\n  class AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.activeEntries = [];\n      this.tooltipDisabled = false;\n      this.label = 'Total';\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [20, 20, 20, 20];\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width * 4 / 12.0,\n        height: this.height,\n        margins: this.margin\n      });\n      this.formatDates();\n      this.domain = this.getDomain();\n      this.setColors();\n      const xOffset = this.dims.width / 2;\n      const yOffset = this.margin[0] + this.dims.height / 2;\n      this.legendWidth = this.width - this.dims.width - this.margin[1];\n      this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n      this.innerRadius = this.outerRadius * 0.75;\n      this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n\n    getDomain() {\n      return this.results.map(d => d.label);\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n\n    onActivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  AdvancedPieChartComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵAdvancedPieChartComponent_BaseFactory;\n    return function AdvancedPieChartComponent_Factory(t) {\n      return (ɵAdvancedPieChartComponent_BaseFactory || (ɵAdvancedPieChartComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AdvancedPieChartComponent)))(t || AdvancedPieChartComponent);\n    };\n  }();\n\n  AdvancedPieChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AdvancedPieChartComponent,\n    selectors: [[\"ngx-charts-advanced-pie-chart\"]],\n    contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      activeEntries: \"activeEntries\",\n      tooltipDisabled: \"tooltipDisabled\",\n      label: \"label\",\n      gradient: \"gradient\",\n      tooltipText: \"tooltipText\",\n      valueFormatting: \"valueFormatting\",\n      nameFormatting: \"nameFormatting\",\n      percentageFormatting: \"percentageFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 7,\n    vars: 37,\n    consts: [[1, \"advanced-pie\", \"chart\"], [3, \"view\", \"showLegend\", \"animations\"], [1, \"pie\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"innerRadius\", \"activeEntries\", \"outerRadius\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"animations\", \"select\", \"activate\", \"deactivate\"], [1, \"advanced-pie-legend-wrapper\"], [3, \"data\", \"colors\", \"width\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\", \"select\", \"activate\", \"deactivate\"]],\n    template: function AdvancedPieChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"ngx-charts-chart\", 1);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(3, \"g\", 2)(4, \"g\", 3);\n        ɵngcc0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) {\n          return ctx.onClick($event);\n        })(\"activate\", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) {\n          return ctx.onActivate($event);\n        })(\"deactivate\", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵelementEnd()()()();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4)(6, \"ngx-charts-advanced-legend\", 5);\n        ɵngcc0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) {\n          return ctx.onClick($event);\n        })(\"activate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) {\n          return ctx.onActivate($event, true);\n        })(\"deactivate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) {\n          return ctx.onDeactivate($event, true);\n        });\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"height\", ctx.height, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.dims.width, \"px\")(\"height\", ctx.dims.height, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(34, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.results)(\"innerRadius\", ctx.innerRadius)(\"activeEntries\", ctx.activeEntries)(\"outerRadius\", ctx.outerRadius)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.width - ctx.dims.width, \"px\")(\"height\", ctx.height, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"data\", ctx.results)(\"colors\", ctx.colors)(\"width\", ctx.width - ctx.dims.width - ctx.margin[1])(\"label\", ctx.label)(\"animations\", ctx.animations)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.nameFormatting)(\"percentageFormatting\", ctx.percentageFormatting);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, PieSeriesComponent, AdvancedLegendComponent];\n    },\n    styles: [_c24, \".advanced-pie{float:left}.advanced-pie,.advanced-pie-legend-wrapper{display:inline-block}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AdvancedPieChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PieLabelComponent = /*#__PURE__*/(() => {\n  class PieLabelComponent {\n    constructor() {\n      this.animations = true;\n      this.labelTrim = true;\n      this.labelTrimSize = 10;\n      this.isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.trimLabel = trimLabel;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      let startRadius = this.radius;\n\n      if (this.explodeSlices) {\n        startRadius = this.radius * this.value / this.max;\n      }\n\n      const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius); // Calculate innerPos then scale outer position to match label position\n\n      const innerPos = innerArc.centroid(this.data);\n      let scale = this.data.pos[1] / innerPos[1];\n\n      if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n        scale = 1;\n      }\n\n      const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n      this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n\n    get textX() {\n      return this.data.pos[0];\n    }\n\n    get textY() {\n      return this.data.pos[1];\n    }\n\n    get styleTransform() {\n      return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n    }\n\n    get attrTransform() {\n      return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\n    }\n\n    get textTransition() {\n      return this.isIE || !this.animations ? null : 'transform 0.75s';\n    }\n\n    textAnchor() {\n      return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n    }\n\n    midAngle(d) {\n      return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n\n  }\n\n  PieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) {\n    return new (t || PieLabelComponent)();\n  };\n\n  PieLabelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PieLabelComponent,\n    selectors: [[\"g\", \"ngx-charts-pie-label\", \"\"]],\n    inputs: {\n      animations: \"animations\",\n      labelTrim: \"labelTrim\",\n      labelTrimSize: \"labelTrimSize\",\n      data: \"data\",\n      radius: \"radius\",\n      label: \"label\",\n      color: \"color\",\n      max: \"max\",\n      value: \"value\",\n      explodeSlices: \"explodeSlices\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c37,\n    decls: 6,\n    vars: 17,\n    consts: [[\"dy\", \".35em\", 1, \"pie-label\"], [\"fill\", \"none\", 1, \"pie-label-line\", \"line\"]],\n    template: function PieLabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"title\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(2, \"g\")(3, \"text\", 0);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelement(5, \"path\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"transform\", ctx.styleTransform)(\"transition\", ctx.textTransition);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.attrTransform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"text-anchor\", ctx.textAnchor())(\"shape-rendering\", \"crispEdges\");\n        ɵngcc0.ɵɵclassProp(\"animation\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"animation\", ctx.animations);\n        ɵngcc0.ɵɵattribute(\"d\", ctx.line)(\"stroke\", ctx.color);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PieLabelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PieArcComponent = /*#__PURE__*/(() => {\n  class PieArcComponent {\n    constructor(element) {\n      this.startAngle = 0;\n      this.endAngle = Math.PI * 2;\n      this.cornerRadius = 0;\n      this.explodeSlices = false;\n      this.gradient = false;\n      this.animate = true;\n      this.pointerEvents = true;\n      this.isActive = false;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.dblclick = new EventEmitter();\n      this.initialized = false;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    getGradient() {\n      return this.gradient ? this.gradientFill : this.fill;\n    }\n\n    getPointerEvents() {\n      return this.pointerEvents ? 'auto' : 'none';\n    }\n\n    update() {\n      const calc = this.calculateArc();\n      this.startOpacity = 0.5;\n      this.radialGradientId = 'linearGrad' + id().toString();\n      this.gradientFill = `url(#${this.radialGradientId})`;\n\n      if (this.animate) {\n        if (this.initialized) {\n          this.updateAnimation();\n        } else {\n          this.loadAnimation();\n          this.initialized = true;\n        }\n      } else {\n        this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n      }\n    }\n\n    calculateArc() {\n      let outerRadius = this.outerRadius;\n\n      if (this.explodeSlices && this.innerRadius === 0) {\n        outerRadius = this.outerRadius * this.value / this.max;\n      }\n\n      return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n\n    loadAnimation() {\n      const node = select(this.element).selectAll('.arc').data([{\n        startAngle: this.startAngle,\n        endAngle: this.endAngle\n      }]);\n      const calc = this.calculateArc();\n      node.transition().attrTween('d', function (d) {\n        this._current = this._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        this._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      }).transition().duration(750).attrTween('d', function (d) {\n        this._current = this._current || d;\n        const interpolater = interpolate(this._current, d);\n        this._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n    }\n\n    updateAnimation() {\n      const node = select(this.element).selectAll('.arc').data([{\n        startAngle: this.startAngle,\n        endAngle: this.endAngle\n      }]);\n      const calc = this.calculateArc();\n      node.transition().duration(750).attrTween('d', function (d) {\n        this._current = this._current || d;\n        const interpolater = interpolate(this._current, d);\n        this._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n    }\n\n    onClick() {\n      clearTimeout(this._timeout);\n      this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n\n    onDblClick(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this._timeout);\n      this.dblclick.emit({\n        data: this.data,\n        nativeEvent: event\n      });\n    }\n\n  }\n\n  PieArcComponent.ɵfac = function PieArcComponent_Factory(t) {\n    return new (t || PieArcComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  PieArcComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PieArcComponent,\n    selectors: [[\"g\", \"ngx-charts-pie-arc\", \"\"]],\n    inputs: {\n      startAngle: \"startAngle\",\n      endAngle: \"endAngle\",\n      cornerRadius: \"cornerRadius\",\n      explodeSlices: \"explodeSlices\",\n      gradient: \"gradient\",\n      animate: \"animate\",\n      pointerEvents: \"pointerEvents\",\n      isActive: \"isActive\",\n      fill: \"fill\",\n      innerRadius: \"innerRadius\",\n      outerRadius: \"outerRadius\",\n      value: \"value\",\n      max: \"max\",\n      data: \"data\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\",\n      dblclick: \"dblclick\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c38,\n    decls: 3,\n    vars: 7,\n    consts: [[1, \"arc-group\"], [4, \"ngIf\"], [1, \"arc\", 3, \"click\", \"dblclick\", \"mouseenter\", \"mouseleave\"], [\"ngx-charts-svg-radial-gradient\", \"\", \"orientation\", \"vertical\", 3, \"color\", \"name\", \"startOpacity\"]],\n    template: function PieArcComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"path\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function PieArcComponent_Template__svg_path_click_2_listener() {\n          return ctx.onClick();\n        })(\"dblclick\", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) {\n          return ctx.onDblClick($event);\n        })(\"mouseenter\", function PieArcComponent_Template__svg_path_mouseenter_2_listener() {\n          return ctx.activate.emit(ctx.data);\n        })(\"mouseleave\", function PieArcComponent_Template__svg_path_mouseleave_2_listener() {\n          return ctx.deactivate.emit(ctx.data);\n        });\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"pointer-events\", ctx.getPointerEvents());\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive);\n        ɵngcc0.ɵɵattribute(\"d\", ctx.path)(\"fill\", ctx.getGradient());\n      }\n    },\n    directives: [ɵngcc1.NgIf, SvgRadialGradientComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PieArcComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PieChartComponent = /*#__PURE__*/(() => {\n  class PieChartComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.labels = false;\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.explodeSlices = false;\n      this.doughnut = false;\n      this.arcWidth = 0.25;\n      this.activeEntries = [];\n      this.tooltipDisabled = false;\n      this.trimLabels = true;\n      this.maxLabelLength = 10;\n      this.dblclick = new EventEmitter();\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n    }\n\n    update() {\n      super.update();\n\n      if (this.labels && this.hasNoOptionalMarginsSet()) {\n        this.margins = [30, 80, 30, 80];\n      } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n        // default value for margins\n        this.margins = [20, 20, 20, 20];\n      }\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margins,\n        showLegend: this.legend,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      const xOffset = this.margins[3] + this.dims.width / 2;\n      const yOffset = this.margins[0] + this.dims.height / 2;\n      this.translation = `translate(${xOffset}, ${yOffset})`;\n      this.outerRadius = Math.min(this.dims.width, this.dims.height);\n\n      if (this.labels) {\n        // make room for labels\n        this.outerRadius /= 3;\n      } else {\n        this.outerRadius /= 2;\n      }\n\n      this.innerRadius = 0;\n\n      if (this.doughnut) {\n        this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n      }\n\n      this.domain = this.getDomain(); // sort data according to domain\n\n      this.data = this.results.sort((a, b) => {\n        return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n      });\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n    }\n\n    getDomain() {\n      return this.results.map(d => d.label);\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n\n    getLegendOptions() {\n      return {\n        scaleType: 'ordinal',\n        domain: this.domain,\n        colors: this.colors,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n\n    onActivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    hasNoOptionalMarginsSet() {\n      return !this.margins || this.margins.length <= 0;\n    }\n\n  }\n\n  PieChartComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵPieChartComponent_BaseFactory;\n    return function PieChartComponent_Factory(t) {\n      return (ɵPieChartComponent_BaseFactory || (ɵPieChartComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PieChartComponent)))(t || PieChartComponent);\n    };\n  }();\n\n  PieChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PieChartComponent,\n    selectors: [[\"ngx-charts-pie-chart\"]],\n    contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      labels: \"labels\",\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      explodeSlices: \"explodeSlices\",\n      doughnut: \"doughnut\",\n      arcWidth: \"arcWidth\",\n      activeEntries: \"activeEntries\",\n      tooltipDisabled: \"tooltipDisabled\",\n      trimLabels: \"trimLabels\",\n      maxLabelLength: \"maxLabelLength\",\n      margins: \"margins\",\n      gradient: \"gradient\",\n      labelFormatting: \"labelFormatting\",\n      tooltipText: \"tooltipText\"\n    },\n    outputs: {\n      dblclick: \"dblclick\",\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 24,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"pie-chart\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"showLabels\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"activeEntries\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"dblclick\", \"select\", \"activate\", \"deactivate\"]],\n    template: function PieChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event, true);\n        })(\"legendLabelDeactivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event, true);\n        })(\"legendLabelClick\", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n        ɵngcc0.ɵɵlistener(\"dblclick\", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) {\n          return ctx.dblclick.emit($event);\n        })(\"select\", function PieChartComponent_Template__svg_g_select_2_listener($event) {\n          return ctx.onClick($event);\n        })(\"activate\", function PieChartComponent_Template__svg_g_activate_2_listener($event) {\n          return ctx.onActivate($event);\n        })(\"deactivate\", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(21, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.translation);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.data)(\"showLabels\", ctx.labels)(\"labelFormatting\", ctx.labelFormatting)(\"trimLabels\", ctx.trimLabels)(\"maxLabelLength\", ctx.maxLabelLength)(\"activeEntries\", ctx.activeEntries)(\"innerRadius\", ctx.innerRadius)(\"outerRadius\", ctx.outerRadius)(\"explodeSlices\", ctx.explodeSlices)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, PieSeriesComponent];\n    },\n    styles: [_c24, _c39],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PieChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale = scaleBand();\n  const yScale = scaleBand();\n  const width = dims.width;\n  const height = dims.height;\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n  const xDomain = [];\n  const yDomain = [];\n\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => d ? d.value : 0).reduce((sum, val) => sum + val, 0);\n}\n\nlet PieGridComponent = /*#__PURE__*/(() => {\n  class PieGridComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.tooltipDisabled = false;\n      this.label = 'Total';\n      this.minWidth = 150;\n      this.activeEntries = [];\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.margin = [20, 20, 20, 20];\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.formatDates();\n      this.domain = this.getDomain();\n      this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n      this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n      this.series = this.getSeries();\n      this.setColors();\n      this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n\n    defaultTooltipText({\n      data\n    }) {\n      const label = trimLabel(formatLabel(data.name));\n      const val = data.value.toLocaleString();\n      return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n\n    getDomain() {\n      return this.results.map(d => d.label);\n    }\n\n    getSeries() {\n      const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n      return this.data.map(d => {\n        const baselineLabelHeight = 20;\n        const padding = 10;\n        const name = d.data.name;\n        const label = formatLabel(name);\n        const value = d.data.value;\n        const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n        const innerRadius = radius * 0.9;\n        let count = 0;\n\n        const colors = () => {\n          count += 1;\n\n          if (count === 1) {\n            return 'rgba(100,100,100,0.3)';\n          } else {\n            return this.colorScale.getColor(label);\n          }\n        };\n\n        const xPos = d.x + (d.width - padding) / 2;\n        const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n        return {\n          transform: `translate(${xPos}, ${yPos})`,\n          colors,\n          innerRadius,\n          outerRadius: radius,\n          name,\n          label: trimLabel(label),\n          total: value,\n          value,\n          percent: format('.1%')(d.data.percent),\n          data: [d, {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }]\n        };\n      });\n    }\n\n    getTotal() {\n      return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n\n    onActivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item, fromLegend = false) {\n      item = this.results.find(d => {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n  }\n\n  PieGridComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵPieGridComponent_BaseFactory;\n    return function PieGridComponent_Factory(t) {\n      return (ɵPieGridComponent_BaseFactory || (ɵPieGridComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PieGridComponent)))(t || PieGridComponent);\n    };\n  }();\n\n  PieGridComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PieGridComponent,\n    selectors: [[\"ngx-charts-pie-grid\"]],\n    contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      tooltipDisabled: \"tooltipDisabled\",\n      label: \"label\",\n      minWidth: \"minWidth\",\n      activeEntries: \"activeEntries\",\n      tooltipText: \"tooltipText\",\n      designatedTotal: \"designatedTotal\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 8,\n    consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"pie-grid\", \"chart\"], [\"class\", \"pie-grid-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"pie-grid-item\"], [\"ngx-charts-pie-grid-series\", \"\", \"ngx-tooltip\", \"\", 3, \"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countPrefix\", 4, \"ngIf\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\", 3, \"countTo\", \"countSuffix\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 1, \"label\", 3, \"countTo\", \"countPrefix\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 1, \"label\"]],\n    template: function PieGridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, \"g\", 2);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(5, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.series);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgForOf, PieGridSeriesComponent, TooltipDirective, ɵngcc1.NgIf, CountUpDirective];\n    },\n    styles: [_c24, \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PieGridComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PieGridSeriesComponent = /*#__PURE__*/(() => {\n  class PieGridSeriesComponent {\n    constructor(element) {\n      this.innerRadius = 70;\n      this.outerRadius = 80;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.layout = pie().value(d => d.data.value).sort(null);\n      this.arcs = this.getArcs();\n    }\n\n    getArcs() {\n      return this.layout(this.data).map((arc, index) => {\n        const label = arc.data.data.name;\n        const other = arc.data.data.other;\n\n        if (index === 0) {\n          arc.startAngle = 0;\n        }\n\n        const color = this.colors(label);\n        return {\n          data: arc.data.data,\n          class: 'arc ' + 'arc' + index,\n          fill: color,\n          startAngle: other ? 0 : arc.startAngle,\n          endAngle: arc.endAngle,\n          animate: this.animations && !other,\n          pointerEvents: !other\n        };\n      });\n    }\n\n    onClick(data) {\n      this.select.emit(this.data[0].data);\n    }\n\n    trackBy(index, item) {\n      return item.data.name;\n    }\n\n    label(arc) {\n      return arc.data.name;\n    }\n\n    color(arc) {\n      return this.colors(this.label(arc));\n    }\n\n  }\n\n  PieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) {\n    return new (t || PieGridSeriesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  PieGridSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PieGridSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-pie-grid-series\", \"\"]],\n    inputs: {\n      innerRadius: \"innerRadius\",\n      outerRadius: \"outerRadius\",\n      animations: \"animations\",\n      colors: \"colors\",\n      data: \"data\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c41,\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"pie-grid-arcs\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\"]],\n    template: function PieGridSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, \"g\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, PieArcComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PieGridSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PieSeriesComponent = /*#__PURE__*/(() => {\n  class PieSeriesComponent {\n    constructor() {\n      this.series = [];\n      this.innerRadius = 60;\n      this.outerRadius = 80;\n      this.trimLabels = true;\n      this.maxLabelLength = 10;\n      this.tooltipDisabled = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.dblclick = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      const pieGenerator = pie().value(d => d.value).sort(null);\n      const arcData = pieGenerator(this.series);\n      this.max = max(arcData, d => {\n        return d.value;\n      });\n      this.data = this.calculateLabelPositions(arcData);\n      this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n\n    midAngle(d) {\n      return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n\n    outerArc() {\n      const factor = 1.5;\n      return arc().innerRadius(this.outerRadius * factor).outerRadius(this.outerRadius * factor);\n    }\n\n    calculateLabelPositions(pieData) {\n      const factor = 1.5;\n      const minDistance = 10;\n      const labelPositions = pieData;\n      labelPositions.forEach(d => {\n        d.pos = this.outerArc().centroid(d);\n        d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n      });\n\n      for (let i = 0; i < labelPositions.length - 1; i++) {\n        const a = labelPositions[i];\n\n        if (!this.labelVisible(a)) {\n          continue;\n        }\n\n        for (let j = i + 1; j < labelPositions.length; j++) {\n          const b = labelPositions[j];\n\n          if (!this.labelVisible(b)) {\n            continue;\n          } // if they're on the same side\n\n\n          if (b.pos[0] * a.pos[0] > 0) {\n            // if they're overlapping\n            const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n            if (o > 0) {\n              // push the second up or down\n              b.pos[1] += Math.sign(b.pos[0]) * o;\n            }\n          }\n        }\n      }\n\n      return labelPositions;\n    }\n\n    labelVisible(myArc) {\n      return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n\n    getTooltipTitle(a) {\n      return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n\n    labelText(myArc) {\n      if (this.labelFormatting) {\n        return this.labelFormatting(myArc.data.name);\n      }\n\n      return this.label(myArc);\n    }\n\n    label(myArc) {\n      return formatLabel(myArc.data.name);\n    }\n\n    defaultTooltipText(myArc) {\n      const label = this.label(myArc);\n      const val = formatLabel(myArc.data.value);\n      return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n\n    color(myArc) {\n      return this.colors.getColor(this.label(myArc));\n    }\n\n    trackBy(index, item) {\n      return item.data.name;\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n\n  }\n\n  PieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) {\n    return new (t || PieSeriesComponent)();\n  };\n\n  PieSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PieSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-pie-series\", \"\"]],\n    inputs: {\n      series: \"series\",\n      innerRadius: \"innerRadius\",\n      outerRadius: \"outerRadius\",\n      trimLabels: \"trimLabels\",\n      maxLabelLength: \"maxLabelLength\",\n      tooltipDisabled: \"tooltipDisabled\",\n      animations: \"animations\",\n      tooltipText: \"tooltipText\",\n      colors: \"colors\",\n      dims: \"dims\",\n      explodeSlices: \"explodeSlices\",\n      showLabels: \"showLabels\",\n      gradient: \"gradient\",\n      activeEntries: \"activeEntries\",\n      labelFormatting: \"labelFormatting\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\",\n      dblclick: \"dblclick\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c42,\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"gradient\", \"data\", \"max\", \"explodeSlices\", \"isActive\", \"animate\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", \"dblclick\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\"]],\n    template: function PieSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, PieLabelComponent, PieArcComponent, TooltipDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PieSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PieChartModule = /*#__PURE__*/(() => {\n  class PieChartModule {}\n\n  PieChartModule.ɵfac = function PieChartModule_Factory(t) {\n    return new (t || PieChartModule)();\n  };\n\n  PieChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PieChartModule\n  });\n  PieChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return PieChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PieChartModule, {\n    declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n  });\n})();\n\nlet PolarChartModule = /*#__PURE__*/(() => {\n  class PolarChartModule {}\n\n  PolarChartModule.ɵfac = function PolarChartModule_Factory(t) {\n    return new (t || PolarChartModule)();\n  };\n\n  PolarChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PolarChartModule\n  });\n  PolarChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule, PieChartModule, LineChartModule]]\n  });\n  return PolarChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PolarChartModule, {\n    declarations: [PolarChartComponent, PolarSeriesComponent],\n    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n    exports: [PolarChartComponent, PolarSeriesComponent]\n  });\n})();\n\nlet CardComponent = /*#__PURE__*/(() => {\n  class CardComponent {\n    constructor(element, cd, zone) {\n      this.cd = cd;\n      this.zone = zone;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.value = '';\n      this.textFontSize = 12;\n      this.textTransform = '';\n      this.initialized = false;\n      this.bandHeight = 10;\n      this.textPadding = [10, 20, 5, 20];\n      this.labelFontSize = 15;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    ngOnDestroy() {\n      cancelAnimationFrame(this.animationReq);\n    }\n\n    update() {\n      this.zone.run(() => {\n        const hasValue = this.data && typeof this.data.value !== 'undefined';\n\n        const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n        const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n        this.cardWidth = Math.max(0, this.width);\n        this.cardHeight = Math.max(0, this.height);\n        this.label = this.label ? this.label : this.data.name;\n        const cardData = {\n          label: this.label,\n          data: this.data,\n          value: this.data.value\n        };\n        this.formattedLabel = labelFormatting(cardData);\n        this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n        const value = hasValue ? valueFormatting(cardData) : '';\n        this.value = this.paddedValue(value);\n        this.setPadding();\n        this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n        setTimeout(() => {\n          this.scaleText();\n          this.value = value;\n\n          if (hasValue && !this.initialized) {\n            setTimeout(() => this.startCount(), 20);\n          }\n        }, 8);\n      });\n    }\n\n    paddedValue(value) {\n      if (this.medianSize && this.medianSize > value.length) {\n        value += '\\u2007'.repeat(this.medianSize - value.length);\n      }\n\n      return value;\n    }\n\n    startCount() {\n      if (!this.initialized && this.animations) {\n        cancelAnimationFrame(this.animationReq);\n        const val = this.data.value;\n        const decs = decimalChecker(val);\n\n        const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n        const callback = ({\n          value,\n          finished\n        }) => {\n          this.zone.run(() => {\n            value = finished ? val : value;\n            this.value = valueFormatting({\n              label: this.label,\n              data: this.data,\n              value\n            });\n\n            if (!finished) {\n              this.value = this.paddedValue(this.value);\n            }\n\n            this.cd.markForCheck();\n          });\n        };\n\n        this.animationReq = count(0, val, decs, 1, callback);\n        this.initialized = true;\n      }\n    }\n\n    scaleText() {\n      this.zone.run(() => {\n        const {\n          width,\n          height\n        } = this.textEl.nativeElement.getBoundingClientRect();\n\n        if (width === 0 || height === 0) {\n          return;\n        }\n\n        const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n        this.cd.markForCheck();\n      });\n    }\n\n    setPadding() {\n      this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n      const padding = this.cardHeight / 2;\n      this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n      this.textPadding[2] = padding - this.labelFontSize;\n    }\n\n    onClick() {\n      this.select.emit(this.data);\n    }\n\n  }\n\n  CardComponent.ɵfac = function CardComponent_Factory(t) {\n    return new (t || CardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CardComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CardComponent,\n    selectors: [[\"g\", \"ngx-charts-card\", \"\"]],\n    viewQuery: function CardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c43, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n      }\n    },\n    inputs: {\n      animations: \"animations\",\n      label: \"label\",\n      color: \"color\",\n      bandColor: \"bandColor\",\n      textColor: \"textColor\",\n      x: \"x\",\n      y: \"y\",\n      width: \"width\",\n      height: \"height\",\n      data: \"data\",\n      medianSize: \"medianSize\",\n      valueFormatting: \"valueFormatting\",\n      labelFormatting: \"labelFormatting\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c44,\n    decls: 10,\n    vars: 25,\n    consts: [[1, \"cell\", 3, \"click\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card\"], [\"class\", \"card-band\", \"stroke\", \"none\", 4, \"ngIf\"], [\"x\", \"5\", \"alignment-baseline\", \"hanging\", 1, \"trimmed-label\"], [3, \"innerHTML\"], [\"text-anchor\", \"start\", \"alignment-baseline\", \"hanging\", 1, \"value-text\"], [\"textEl\", \"\"], [\"stroke\", \"none\", 1, \"card-band\"]],\n    template: function CardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function CardComponent_Template__svg_g_click_0_listener() {\n          return ctx.onClick();\n        });\n        ɵngcc0.ɵɵelement(1, \"rect\", 1);\n        ɵngcc0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"title\");\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"foreignObject\", 3);\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(6, \"p\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(7, \"text\", 5, 6);\n        ɵngcc0.ɵɵtext(9);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"fill\", ctx.color);\n        ɵngcc0.ɵɵattribute(\"width\", ctx.cardWidth)(\"height\", ctx.cardHeight);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.bandColor && ctx.bandColor !== ctx.color);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.cardHeight - ctx.textPadding[2])(\"width\", ctx.textWidth)(\"height\", ctx.labelFontSize + ctx.textPadding[2]);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"color\", ctx.textColor)(\"font-size\", ctx.labelFontSize, \"px\")(\"line-height\", ctx.labelFontSize, \"px\");\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.formattedLabel, ɵngcc0.ɵɵsanitizeHtml);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"fill\", ctx.textColor)(\"font-size\", ctx.textFontSize, \"pt\");\n        ɵngcc0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.textPadding[0]);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CardComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Converts a hex to RGB\n *\n * @export\n */\n\n\nfunction hexToRgb(value) {\n  // deprecated, use d3.color()\n  return rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\n\n\nfunction invertColor(value) {\n  const color = rgb(value);\n  const {\n    r,\n    g,\n    b,\n    opacity\n  } = color;\n\n  if (opacity === 0) {\n    return color.toString();\n  }\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n  return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\n\n\nfunction shadeRGBColor({\n  r,\n  g,\n  b\n}, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\nlet CardSeriesComponent = /*#__PURE__*/(() => {\n  class CardSeriesComponent {\n    constructor() {\n      this.innerPadding = 15;\n      this.emptyColor = 'rgba(0, 0, 0, 0)';\n      this.animations = true;\n      this.select = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      if (this.data.length > 2) {\n        const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n        const sortedLengths = this.data.map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue ? valueFormatting({\n            data: d.data,\n            label: d ? d.data.name : '',\n            value: d && d.data ? d.data.value : ''\n          }).length : 0;\n        }).sort((a, b) => b - a);\n        const idx = Math.ceil(this.data.length / 2);\n        this.medianSize = sortedLengths[idx];\n      }\n\n      const cards = this.getCards();\n      this.cards = cards.filter(d => d.data.value !== null);\n      this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n\n    getCards() {\n      const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n      const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n      return this.data.map((d, index) => {\n        let label = d.data.name;\n\n        if (label && label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label ? label.toLocaleString() : label;\n        }\n\n        const value = d.data.value;\n        const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n        const color = this.cardColor || valueColor || '#000';\n        return {\n          x: d.x,\n          y: d.y,\n          width: d.width - xPadding,\n          height: d.height - yPadding,\n          color,\n          bandColor: this.bandColor || valueColor,\n          textColor: this.textColor || invertColor(color),\n          label,\n          data: d.data,\n          tooltipText: `${label}: ${value}`\n        };\n      });\n    }\n\n    trackBy(index, card) {\n      return card.label;\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n  }\n\n  CardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) {\n    return new (t || CardSeriesComponent)();\n  };\n\n  CardSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CardSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-card-series\", \"\"]],\n    inputs: {\n      innerPadding: \"innerPadding\",\n      emptyColor: \"emptyColor\",\n      animations: \"animations\",\n      data: \"data\",\n      slots: \"slots\",\n      dims: \"dims\",\n      colors: \"colors\",\n      cardColor: \"cardColor\",\n      bandColor: \"bandColor\",\n      textColor: \"textColor\",\n      valueFormatting: \"valueFormatting\",\n      labelFormatting: \"labelFormatting\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c45,\n    decls: 2,\n    vars: 4,\n    consts: [[\"class\", \"card-empty\", \"rx\", \"3\", \"ry\", \"3\", 3, \"fill\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card-empty\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n    template: function CardSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, \"rect\", 0);\n        ɵngcc0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, \"g\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.emptySlots)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.cards)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, CardComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CardSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NumberCardComponent = /*#__PURE__*/(() => {\n  class NumberCardComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.emptyColor = 'rgba(0, 0, 0, 0)';\n      this.innerPadding = 15;\n      this.margin = [10, 10, 10, 10];\n    }\n\n    get clickable() {\n      return !!this.select.observers.length;\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.formatDates();\n      this.domain = this.getDomain();\n      this.setColors();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n      const size = gridSize(this.dims, this.results.length, 150);\n      const N = size[0] * size[1];\n      const data = this.results.slice();\n\n      while (data.length < N) {\n        data.push({\n          value: null\n        });\n      }\n\n      this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n\n    getDomain() {\n      return this.results.map(d => d.label);\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n\n  }\n\n  NumberCardComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵNumberCardComponent_BaseFactory;\n    return function NumberCardComponent_Factory(t) {\n      return (ɵNumberCardComponent_BaseFactory || (ɵNumberCardComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NumberCardComponent)))(t || NumberCardComponent);\n    };\n  }();\n\n  NumberCardComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NumberCardComponent,\n    selectors: [[\"ngx-charts-number-card\"]],\n    inputs: {\n      emptyColor: \"emptyColor\",\n      innerPadding: \"innerPadding\",\n      cardColor: \"cardColor\",\n      bandColor: \"bandColor\",\n      textColor: \"textColor\",\n      valueFormatting: \"valueFormatting\",\n      labelFormatting: \"labelFormatting\",\n      designatedTotal: \"designatedTotal\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 20,\n    consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"number-card\", \"chart\"], [\"ngx-charts-card-series\", \"\", 3, \"colors\", \"cardColor\", \"bandColor\", \"textColor\", \"emptyColor\", \"data\", \"dims\", \"innerPadding\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n    template: function NumberCardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n        ɵngcc0.ɵɵlistener(\"select\", function NumberCardComponent_Template__svg_g_select_2_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"clickable\", ctx.clickable);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"cardColor\", ctx.cardColor)(\"bandColor\", ctx.bandColor)(\"textColor\", ctx.textColor)(\"emptyColor\", ctx.emptyColor)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"innerPadding\", ctx.innerPadding)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"animations\", ctx.animations);\n      }\n    },\n    directives: [ChartComponent, CardSeriesComponent],\n    styles: [_c24, \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;line-height:1em;overflow:hidden;pointer-events:none;text-align:left}ngx-charts-number-card .cell .trimmed-label p{margin:0;overflow:hidden;padding:0;text-overflow:ellipsis;white-space:nowrap;width:100%}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NumberCardComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NumberCardModule = /*#__PURE__*/(() => {\n  class NumberCardModule {}\n\n  NumberCardModule.ɵfac = function NumberCardModule_Factory(t) {\n    return new (t || NumberCardModule)();\n  };\n\n  NumberCardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NumberCardModule\n  });\n  NumberCardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return NumberCardModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NumberCardModule, {\n    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n    imports: [ChartCommonModule],\n    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n  });\n})();\n\nlet TreeMapCellComponent = /*#__PURE__*/(() => {\n  class TreeMapCellComponent {\n    constructor(element) {\n      this.gradient = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.initialized = false;\n      this.element = element.nativeElement;\n    }\n\n    ngOnChanges() {\n      this.update();\n\n      this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n\n      const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n      const cellData = {\n        data: this.data,\n        label: this.label,\n        value: this.value\n      };\n      this.formattedValue = this.valueFormatting(cellData.value);\n      this.formattedLabel = labelFormatting(cellData);\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      this.gradientStops = this.getGradientStops();\n    }\n\n    update() {\n      if (this.initialized) {\n        this.animateToCurrentForm();\n      } else {\n        if (this.animations) {\n          this.loadAnimation();\n        }\n\n        this.initialized = true;\n      }\n    }\n\n    loadAnimation() {\n      const node = select(this.element).select('.cell');\n      node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n      this.animateToCurrentForm();\n    }\n\n    getTextColor() {\n      return invertColor(this.fill);\n    }\n\n    animateToCurrentForm() {\n      const node = select(this.element).select('.cell');\n\n      if (this.animations) {\n        node.transition().duration(750).attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n      } else {\n        node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n      }\n    }\n\n    onClick() {\n      this.select.emit(this.data);\n    }\n\n    getGradientStops() {\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }];\n    }\n\n  }\n\n  TreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) {\n    return new (t || TreeMapCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  TreeMapCellComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TreeMapCellComponent,\n    selectors: [[\"g\", \"ngx-charts-tree-map-cell\", \"\"]],\n    inputs: {\n      gradient: \"gradient\",\n      animations: \"animations\",\n      valueFormatting: \"valueFormatting\",\n      data: \"data\",\n      fill: \"fill\",\n      x: \"x\",\n      y: \"y\",\n      width: \"width\",\n      height: \"height\",\n      label: \"label\",\n      value: \"value\",\n      valueType: \"valueType\",\n      labelFormatting: \"labelFormatting\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c46,\n    decls: 4,\n    vars: 9,\n    consts: [[4, \"ngIf\"], [1, \"cell\", 3, \"click\"], [\"class\", \"treemap-label\", 3, \"pointer-events\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"], [1, \"treemap-label\"], [1, \"treemap-label\", 3, \"innerHTML\"], [\"class\", \"treemap-val\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"treemap-val\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"treemap-val\", 3, \"countTo\", \"valueFormatting\"], [1, \"treemap-val\"]],\n    template: function TreeMapCellComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\");\n        ɵngcc0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 2, \"defs\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"rect\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function TreeMapCellComponent_Template__svg_rect_click_2_listener() {\n          return ctx.onClick();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, \"foreignObject\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"cursor\", \"pointer\");\n        ɵngcc0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height)(\"x\", ctx.x)(\"y\", ctx.y);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.width >= 70 && ctx.height >= 35);\n      }\n    },\n    directives: [ɵngcc1.NgIf, SvgLinearGradientComponent, CountUpDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TreeMapCellComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeMapCellSeriesComponent = /*#__PURE__*/(() => {\n  class TreeMapCellSeriesComponent {\n    constructor() {\n      this.gradient = false;\n      this.tooltipDisabled = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      this.cells = this.getCells();\n    }\n\n    getCells() {\n      return this.data.children.filter(d => {\n        return d.depth === 1;\n      }).map((d, index) => {\n        const label = d.id;\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n    }\n\n    getTooltipText({\n      label,\n      value\n    }) {\n      return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    trackBy(index, item) {\n      return item.label;\n    }\n\n  }\n\n  TreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) {\n    return new (t || TreeMapCellSeriesComponent)();\n  };\n\n  TreeMapCellSeriesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TreeMapCellSeriesComponent,\n    selectors: [[\"g\", \"ngx-charts-tree-map-cell-series\", \"\"]],\n    inputs: {\n      gradient: \"gradient\",\n      tooltipDisabled: \"tooltipDisabled\",\n      animations: \"animations\",\n      data: \"data\",\n      dims: \"dims\",\n      colors: \"colors\",\n      valueFormatting: \"valueFormatting\",\n      labelFormatting: \"labelFormatting\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c47,\n    decls: 1,\n    vars: 2,\n    consts: [[\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueType\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueType\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\"]],\n    template: function TreeMapCellSeriesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 19, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, TreeMapCellComponent, TooltipDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TreeMapCellSeriesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeMapComponent = /*#__PURE__*/(() => {\n  class TreeMapComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.tooltipDisabled = false;\n      this.gradient = false;\n      this.select = new EventEmitter();\n      this.margin = [10, 10, 10, 10];\n    }\n\n    update() {\n      super.update();\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.domain = this.getDomain();\n      this.treemap = treemap().size([this.dims.width, this.dims.height]);\n      const rootNode = {\n        name: 'root',\n        value: 0,\n        isRoot: true\n      };\n      const root = stratify().id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n\n        return label;\n      }).parentId(d => d.isRoot ? null : 'root')([rootNode, ...this.results]).sum(d => d.value);\n      this.data = this.treemap(root);\n      this.setColors();\n      this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n\n    getDomain() {\n      return this.results.map(d => d.name);\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n\n  }\n\n  TreeMapComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵTreeMapComponent_BaseFactory;\n    return function TreeMapComponent_Factory(t) {\n      return (ɵTreeMapComponent_BaseFactory || (ɵTreeMapComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TreeMapComponent)))(t || TreeMapComponent);\n    };\n  }();\n\n  TreeMapComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TreeMapComponent,\n    selectors: [[\"ngx-charts-tree-map\"]],\n    contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    inputs: {\n      tooltipDisabled: \"tooltipDisabled\",\n      gradient: \"gradient\",\n      results: \"results\",\n      valueFormatting: \"valueFormatting\",\n      labelFormatting: \"labelFormatting\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 16,\n    consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"tree-map\", \"chart\"], [\"ngx-charts-tree-map-cell-series\", \"\", 3, \"colors\", \"data\", \"dims\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"select\"]],\n    template: function TreeMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n        ɵngcc0.ɵɵlistener(\"select\", function TreeMapComponent_Template__svg_g_select_2_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(13, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations);\n      }\n    },\n    directives: [ChartComponent, TreeMapCellSeriesComponent],\n    styles: [\".tree-map .treemap-val{display:inline-block;font-size:1.3em;padding-top:5px}.tree-map .treemap-label p{display:table-cell;line-height:1.2em;text-align:center;vertical-align:middle}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TreeMapComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeMapModule = /*#__PURE__*/(() => {\n  class TreeMapModule {}\n\n  TreeMapModule.ɵfac = function TreeMapModule_Factory(t) {\n    return new (t || TreeMapModule)();\n  };\n\n  TreeMapModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TreeMapModule\n  });\n  TreeMapModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule]]\n  });\n  return TreeMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeMapModule, {\n    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n    imports: [ChartCommonModule],\n    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n  });\n})();\n\nlet LinearGaugeComponent = /*#__PURE__*/(() => {\n  class LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.min = 0;\n      this.max = 100;\n      this.value = 0;\n      this.margin = [10, 20, 10, 20];\n      this.valueResizeScale = 1;\n      this.unitsResizeScale = 1;\n      this.valueTextTransform = '';\n      this.valueTranslate = '';\n      this.unitsTextTransform = '';\n      this.unitsTranslate = '';\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      setTimeout(() => {\n        this.scaleText('value');\n        this.scaleText('units');\n      });\n    }\n\n    update() {\n      super.update();\n      this.hasPreviousValue = this.previousValue !== undefined;\n      this.max = Math.max(this.max, this.value);\n      this.min = Math.min(this.min, this.value);\n\n      if (this.hasPreviousValue) {\n        this.max = Math.max(this.max, this.previousValue);\n        this.min = Math.min(this.min, this.previousValue);\n      }\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.valueDomain = this.getValueDomain();\n      this.valueScale = this.getValueScale();\n      this.displayValue = this.getDisplayValue();\n      this.setColors();\n      const xOffset = this.margin[3] + this.dims.width / 2;\n      const yOffset = this.margin[0] + this.dims.height / 2;\n      this.transform = `translate(${xOffset}, ${yOffset})`;\n      this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n      this.valueTranslate = `translate(0, -15)`;\n      this.unitsTranslate = `translate(0, 15)`;\n      setTimeout(() => this.scaleText('value'), 50);\n      setTimeout(() => this.scaleText('units'), 50);\n    }\n\n    getValueDomain() {\n      return [this.min, this.max];\n    }\n\n    getValueScale() {\n      return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n\n    getDisplayValue() {\n      if (this.valueFormatting) {\n        return this.valueFormatting(this.value);\n      }\n\n      return this.value.toLocaleString();\n    }\n\n    scaleText(element, repeat = true) {\n      let el;\n      let resizeScale;\n\n      if (element === 'value') {\n        el = this.valueTextEl;\n        resizeScale = this.valueResizeScale;\n      } else {\n        el = this.unitsTextEl;\n        resizeScale = this.unitsResizeScale;\n      }\n\n      const {\n        width,\n        height\n      } = el.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) return;\n      const oldScale = resizeScale;\n      const availableWidth = this.dims.width;\n      const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n      const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n      const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n      resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n      if (resizeScale !== oldScale) {\n        if (element === 'value') {\n          this.valueResizeScale = resizeScale;\n          this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        } else {\n          this.unitsResizeScale = resizeScale;\n          this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n\n        this.cd.markForCheck();\n\n        if (repeat) {\n          setTimeout(() => {\n            this.scaleText(element, false);\n          }, 50);\n        }\n      }\n    }\n\n    onClick() {\n      this.select.emit({\n        name: 'Value',\n        value: this.value\n      });\n    }\n\n    setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n    }\n\n  }\n\n  LinearGaugeComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵLinearGaugeComponent_BaseFactory;\n    return function LinearGaugeComponent_Factory(t) {\n      return (ɵLinearGaugeComponent_BaseFactory || (ɵLinearGaugeComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(LinearGaugeComponent)))(t || LinearGaugeComponent);\n    };\n  }();\n\n  LinearGaugeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LinearGaugeComponent,\n    selectors: [[\"ngx-charts-linear-gauge\"]],\n    viewQuery: function LinearGaugeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c48, 5);\n        ɵngcc0.ɵɵviewQuery(_c49, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      value: \"value\",\n      units: \"units\",\n      previousValue: \"previousValue\",\n      valueFormatting: \"valueFormatting\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 15,\n    vars: 38,\n    consts: [[3, \"view\", \"showLegend\", \"animations\", \"click\"], [1, \"linear-gauge\", \"chart\"], [\"ngx-charts-bar\", \"\", 1, \"background-bar\", 3, \"width\", \"height\", \"x\", \"y\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"ngx-charts-bar\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\", 4, \"ngIf\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\", 4, \"ngIf\"], [\"alignment-baseline\", \"after-edge\", 1, \"value\"], [\"valueTextEl\", \"\"], [\"alignment-baseline\", \"before-edge\", 1, \"units\"], [\"unitsTextEl\", \"\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\"]],\n    template: function LinearGaugeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() {\n          return ctx.onClick();\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵelement(2, \"g\", 2)(3, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, \"line\", 4);\n        ɵngcc0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, \"line\", 5);\n        ɵngcc0.ɵɵelementStart(6, \"g\")(7, \"g\")(8, \"text\", 6, 7);\n        ɵngcc0.ɵɵtext(10);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(11, \"g\")(12, \"text\", 8, 9);\n        ɵngcc0.ɵɵtext(14);\n        ɵngcc0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(33, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"width\", ctx.dims.width)(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"data\", ɵngcc0.ɵɵpureFunction0(36, _c50))(\"orientation\", \"horizontal\")(\"roundEdges\", true)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"width\", ctx.valueScale(ctx.value))(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"fill\", ctx.colors.getColor(ctx.units))(\"data\", ɵngcc0.ɵɵpureFunction0(37, _c50))(\"orientation\", \"horizontal\")(\"roundEdges\", true)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.valueTranslate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.valueTextTransform);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.displayValue, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.unitsTranslate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.unitsTextTransform);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.units, \" \");\n      }\n    },\n    directives: [ChartComponent, BarComponent, ɵngcc1.NgIf],\n    styles: [_c24, \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:rgba(0,0,0,.05)}.linear-gauge .units{fill:#666}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LinearGaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GaugeComponent = /*#__PURE__*/(() => {\n  class GaugeComponent extends BaseChartComponent {\n    constructor() {\n      super(...arguments);\n      this.legend = false;\n      this.legendTitle = 'Legend';\n      this.legendPosition = 'right';\n      this.min = 0;\n      this.max = 100;\n      this.bigSegments = 10;\n      this.smallSegments = 5;\n      this.showAxis = true;\n      this.startAngle = -120;\n      this.angleSpan = 240;\n      this.activeEntries = [];\n      this.tooltipDisabled = false;\n      this.showText = true;\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n      this.resizeScale = 1;\n      this.rotation = '';\n      this.textTransform = 'scale(1, 1)';\n      this.cornerRadius = 10;\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      setTimeout(() => this.scaleText());\n    }\n\n    update() {\n      super.update();\n\n      if (!this.showAxis) {\n        if (!this.margin) {\n          this.margin = [10, 20, 10, 20];\n        }\n      } else {\n        if (!this.margin) {\n          this.margin = [60, 100, 60, 100];\n        }\n      } // make the starting angle positive\n\n\n      if (this.startAngle < 0) {\n        this.startAngle = this.startAngle % 360 + 360;\n      }\n\n      this.angleSpan = Math.min(this.angleSpan, 360);\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showLegend: this.legend,\n        legendPosition: this.legendPosition\n      });\n      this.domain = this.getDomain();\n      this.valueDomain = this.getValueDomain();\n      this.valueScale = this.getValueScale();\n      this.displayValue = this.getDisplayValue();\n      this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n      this.arcs = this.getArcs();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      const xOffset = this.margin[3] + this.dims.width / 2;\n      const yOffset = this.margin[0] + this.dims.height / 2;\n      this.transform = `translate(${xOffset}, ${yOffset})`;\n      this.rotation = `rotate(${this.startAngle})`;\n      setTimeout(() => this.scaleText(), 50);\n    }\n\n    getArcs() {\n      const arcs = [];\n      const availableRadius = this.outerRadius * 0.7;\n      const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n      const arcWidth = radiusPerArc * 0.7;\n      this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n      this.cornerRadius = Math.floor(arcWidth / 2);\n      let i = 0;\n\n      for (const d of this.results) {\n        const outerRadius = this.outerRadius - i * radiusPerArc;\n        const innerRadius = outerRadius - arcWidth;\n        const backgroundArc = {\n          endAngle: this.angleSpan * Math.PI / 180,\n          innerRadius,\n          outerRadius,\n          data: {\n            value: this.max,\n            name: d.name\n          }\n        };\n        const valueArc = {\n          endAngle: Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI / 180,\n          innerRadius,\n          outerRadius,\n          data: {\n            value: d.value,\n            name: d.name\n          }\n        };\n        const arc = {\n          backgroundArc,\n          valueArc\n        };\n        arcs.push(arc);\n        i++;\n      }\n\n      return arcs;\n    }\n\n    getDomain() {\n      return this.results.map(d => d.name);\n    }\n\n    getValueDomain() {\n      const values = this.results.map(d => d.value);\n      const dataMin = Math.min(...values);\n      const dataMax = Math.max(...values);\n\n      if (this.min !== undefined) {\n        this.min = Math.min(this.min, dataMin);\n      } else {\n        this.min = dataMin;\n      }\n\n      if (this.max !== undefined) {\n        this.max = Math.max(this.max, dataMax);\n      } else {\n        this.max = dataMax;\n      }\n\n      return [this.min, this.max];\n    }\n\n    getValueScale() {\n      return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n\n    getDisplayValue() {\n      const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n      if (this.textValue && 0 !== this.textValue.length) {\n        return this.textValue.toLocaleString();\n      }\n\n      if (this.valueFormatting) {\n        return this.valueFormatting(value);\n      }\n\n      return value.toLocaleString();\n    }\n\n    scaleText(repeat = true) {\n      if (!this.showText) {\n        return;\n      }\n\n      const {\n        width\n      } = this.textEl.nativeElement.getBoundingClientRect();\n      const oldScale = this.resizeScale;\n\n      if (width === 0) {\n        this.resizeScale = 1;\n      } else {\n        const availableSpace = this.textRadius;\n        this.resizeScale = Math.floor(availableSpace / (width / this.resizeScale) * 100) / 100;\n      }\n\n      if (this.resizeScale !== oldScale) {\n        this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n        this.cd.markForCheck();\n\n        if (repeat) {\n          setTimeout(() => this.scaleText(false), 50);\n        }\n      }\n    }\n\n    onClick(data) {\n      this.select.emit(data);\n    }\n\n    getLegendOptions() {\n      return {\n        scaleType: 'ordinal',\n        colors: this.colors,\n        domain: this.domain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n\n    setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n\n    onActivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item, ...this.activeEntries];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    onDeactivate(item) {\n      const idx = this.activeEntries.findIndex(d => {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = [...this.activeEntries];\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n\n    isActive(entry) {\n      if (!this.activeEntries) return false;\n      const item = this.activeEntries.find(d => {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n\n    trackBy(index, item) {\n      return item.valueArc.data.name;\n    }\n\n  }\n\n  GaugeComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵGaugeComponent_BaseFactory;\n    return function GaugeComponent_Factory(t) {\n      return (ɵGaugeComponent_BaseFactory || (ɵGaugeComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(GaugeComponent)))(t || GaugeComponent);\n    };\n  }();\n\n  GaugeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: GaugeComponent,\n    selectors: [[\"ngx-charts-gauge\"]],\n    contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      }\n    },\n    viewQuery: function GaugeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c43, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n      }\n    },\n    inputs: {\n      legend: \"legend\",\n      legendTitle: \"legendTitle\",\n      legendPosition: \"legendPosition\",\n      min: \"min\",\n      max: \"max\",\n      bigSegments: \"bigSegments\",\n      smallSegments: \"smallSegments\",\n      showAxis: \"showAxis\",\n      startAngle: \"startAngle\",\n      angleSpan: \"angleSpan\",\n      activeEntries: \"activeEntries\",\n      tooltipDisabled: \"tooltipDisabled\",\n      showText: \"showText\",\n      margin: \"margin\",\n      textValue: \"textValue\",\n      units: \"units\",\n      results: \"results\",\n      axisTickFormatting: \"axisTickFormatting\",\n      valueFormatting: \"valueFormatting\"\n    },\n    outputs: {\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 13,\n    consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"gauge\", \"chart\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\", 4, \"ngIf\"], [\"alignment-baseline\", \"central\", 3, \"textAnchor\", 4, \"ngIf\"], [\"ngx-charts-gauge-arc\", \"\", 3, \"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\"], [\"alignment-baseline\", \"central\"], [\"textEl\", \"\"], [\"x\", \"0\", \"dy\", \"0\"], [\"x\", \"0\", \"dy\", \"1.2em\"]],\n    template: function GaugeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n        ɵngcc0.ɵɵlistener(\"legendLabelClick\", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n          return ctx.onClick($event);\n        })(\"legendLabelActivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n          return ctx.onActivate($event);\n        })(\"legendLabelDeactivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, \"g\", 2);\n        ɵngcc0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n        ɵngcc0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, \"text\", 4);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showAxis);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showText);\n      }\n    },\n    directives: function () {\n      return [ChartComponent, ɵngcc1.NgForOf, GaugeArcComponent, ɵngcc1.NgIf, GaugeAxisComponent];\n    },\n    styles: [_c24, \".gauge .background-arc path{fill:rgba(0,0,0,.05)}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{fill:#666;font-size:12px;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return GaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GaugeArcComponent = /*#__PURE__*/(() => {\n  class GaugeArcComponent {\n    constructor() {\n      this.isActive = false;\n      this.tooltipDisabled = false;\n      this.animations = true;\n      this.select = new EventEmitter();\n      this.activate = new EventEmitter();\n      this.deactivate = new EventEmitter();\n    }\n\n    tooltipText(arc) {\n      const label = formatLabel(arc.data.name);\n      let val;\n\n      if (this.valueFormatting) {\n        val = this.valueFormatting(arc.data.value);\n      } else {\n        val = formatLabel(arc.data.value);\n      }\n\n      return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n\n  }\n\n  GaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) {\n    return new (t || GaugeArcComponent)();\n  };\n\n  GaugeArcComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: GaugeArcComponent,\n    selectors: [[\"g\", \"ngx-charts-gauge-arc\", \"\"]],\n    inputs: {\n      isActive: \"isActive\",\n      tooltipDisabled: \"tooltipDisabled\",\n      animations: \"animations\",\n      backgroundArc: \"backgroundArc\",\n      valueArc: \"valueArc\",\n      cornerRadius: \"cornerRadius\",\n      colors: \"colors\",\n      valueFormatting: \"valueFormatting\",\n      tooltipTemplate: \"tooltipTemplate\"\n    },\n    outputs: {\n      select: \"select\",\n      activate: \"activate\",\n      deactivate: \"deactivate\"\n    },\n    attrs: _c51,\n    decls: 2,\n    vars: 23,\n    consts: [[\"ngx-charts-pie-arc\", \"\", 1, \"background-arc\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"data\", \"animate\", \"pointerEvents\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"fill\", \"data\", \"animate\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n    template: function GaugeArcComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelement(0, \"g\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n        ɵngcc0.ɵɵlistener(\"select\", function GaugeArcComponent_Template__svg_g_select_1_listener($event) {\n          return ctx.select.emit($event);\n        })(\"activate\", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) {\n          return ctx.activate.emit($event);\n        })(\"deactivate\", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) {\n          return ctx.deactivate.emit($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.backgroundArc.endAngle)(\"innerRadius\", ctx.backgroundArc.innerRadius)(\"outerRadius\", ctx.backgroundArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"data\", ctx.backgroundArc.data)(\"animate\", false)(\"pointerEvents\", false);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.valueArc.endAngle)(\"innerRadius\", ctx.valueArc.innerRadius)(\"outerRadius\", ctx.valueArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"fill\", ctx.colors.getColor(ctx.valueArc.data.name))(\"data\", ctx.valueArc.data)(\"animate\", ctx.animations)(\"isActive\", ctx.isActive)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.valueArc.data);\n      }\n    },\n    directives: [PieArcComponent, TooltipDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return GaugeArcComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GaugeAxisComponent = /*#__PURE__*/(() => {\n  class GaugeAxisComponent {\n    constructor() {\n      this.rotate = '';\n    }\n\n    ngOnChanges(changes) {\n      this.update();\n    }\n\n    update() {\n      this.rotationAngle = -90 + this.startAngle;\n      this.rotate = `rotate(${this.rotationAngle})`;\n      this.ticks = this.getTicks();\n    }\n\n    getTicks() {\n      const bigTickSegment = this.angleSpan / this.bigSegments;\n      const smallTickSegment = bigTickSegment / this.smallSegments;\n      const tickLength = 20;\n      const ticks = {\n        big: [],\n        small: []\n      };\n      const startDistance = this.radius + 10;\n      const textDist = startDistance + tickLength + 10;\n\n      for (let i = 0; i <= this.bigSegments; i++) {\n        const angleDeg = i * bigTickSegment;\n        const angle = angleDeg * Math.PI / 180;\n        const textAnchor = this.getTextAnchor(angleDeg);\n        let skip = false;\n\n        if (i === 0 && this.angleSpan === 360) {\n          skip = true;\n        }\n\n        if (!skip) {\n          let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n\n          if (this.tickFormatting) {\n            text = this.tickFormatting(text);\n          }\n\n          ticks.big.push({\n            line: this.getTickPath(startDistance, tickLength, angle),\n            textAnchor,\n            text,\n            textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n          });\n        }\n\n        if (i === this.bigSegments) {\n          continue;\n        }\n\n        for (let j = 1; j <= this.smallSegments; j++) {\n          const smallAngleDeg = angleDeg + j * smallTickSegment;\n          const smallAngle = smallAngleDeg * Math.PI / 180;\n          ticks.small.push({\n            line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n          });\n        }\n      }\n\n      return ticks;\n    }\n\n    getTextAnchor(angle) {\n      // [0, 45] = 'middle';\n      // [46, 135] = 'start';\n      // [136, 225] = 'middle';\n      // [226, 315] = 'end';\n      angle = (this.startAngle + angle) % 360;\n      let textAnchor = 'middle';\n\n      if (angle > 45 && angle <= 135) {\n        textAnchor = 'start';\n      } else if (angle > 225 && angle <= 315) {\n        textAnchor = 'end';\n      }\n\n      return textAnchor;\n    }\n\n    getTickPath(startDistance, tickLength, angle) {\n      const y1 = startDistance * Math.sin(angle);\n      const y2 = (startDistance + tickLength) * Math.sin(angle);\n      const x1 = startDistance * Math.cos(angle);\n      const x2 = (startDistance + tickLength) * Math.cos(angle);\n      const points = [{\n        x: x1,\n        y: y1\n      }, {\n        x: x2,\n        y: y2\n      }];\n      const lineGenerator = line().x(d => d.x).y(d => d.y);\n      return lineGenerator(points);\n    }\n\n  }\n\n  GaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) {\n    return new (t || GaugeAxisComponent)();\n  };\n\n  GaugeAxisComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: GaugeAxisComponent,\n    selectors: [[\"g\", \"ngx-charts-gauge-axis\", \"\"]],\n    inputs: {\n      bigSegments: \"bigSegments\",\n      smallSegments: \"smallSegments\",\n      min: \"min\",\n      max: \"max\",\n      angleSpan: \"angleSpan\",\n      startAngle: \"startAngle\",\n      radius: \"radius\",\n      valueScale: \"valueScale\",\n      tickFormatting: \"tickFormatting\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c52,\n    decls: 4,\n    vars: 4,\n    consts: [[\"class\", \"gauge-tick gauge-tick-large\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gauge-tick gauge-tick-small\", 4, \"ngFor\", \"ngForOf\"], [1, \"gauge-tick\", \"gauge-tick-large\"], [\"alignment-baseline\", \"central\"], [1, \"gauge-tick\", \"gauge-tick-small\"]],\n    template: function GaugeAxisComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"g\");\n        ɵngcc0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, \"g\", 0);\n        ɵngcc0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, \"g\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"transform\", ctx.rotate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks.small);\n      }\n    },\n    directives: [ɵngcc1.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return GaugeAxisComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GaugeModule = /*#__PURE__*/(() => {\n  class GaugeModule {}\n\n  GaugeModule.ɵfac = function GaugeModule_Factory(t) {\n    return new (t || GaugeModule)();\n  };\n\n  GaugeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: GaugeModule\n  });\n  GaugeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ChartCommonModule, PieChartModule, BarChartModule]]\n  });\n  return GaugeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GaugeModule, {\n    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n  });\n})(); // The export is needed here to generate a valid polyfills.metadata.json file\n\n\nfunction ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n\nlet NgxChartsModule = /*#__PURE__*/(() => {\n  class NgxChartsModule {\n    constructor() {\n      ngxChartsPolyfills();\n    }\n\n  }\n\n  NgxChartsModule.ɵfac = function NgxChartsModule_Factory(t) {\n    return new (t || NgxChartsModule)();\n  };\n\n  NgxChartsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxChartsModule\n  });\n  NgxChartsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ChartCommonModule, AreaChartModule, BarChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n  });\n  return NgxChartsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxChartsModule, {\n    exports: [ChartCommonModule, AreaChartModule, BarChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n  });\n})();\n\nfunction tickFormat(fieldType, groupByType) {\n  return function (label) {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(label);\n    }\n\n    return label.toString();\n  };\n}\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AlignmentTypes, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, SeriesHorizontal, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getUniqueXDomainValues, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel, InjectionRegisteryService as ɵa, InjectionService as ɵb }; //# sourceMappingURL=swimlane-ngx-charts.js.map","map":null,"metadata":{},"sourceType":"module"}